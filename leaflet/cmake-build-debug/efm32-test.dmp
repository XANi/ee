
efm32-test:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__Vectors>:
       0:	20002000 	.word	0x20002000
       4:	000004a9 	.word	0x000004a9
       8:	000004d5 	.word	0x000004d5
       c:	000004d5 	.word	0x000004d5
      10:	000004d5 	.word	0x000004d5
      14:	000004d5 	.word	0x000004d5
      18:	000004d5 	.word	0x000004d5
      1c:	000004d5 	.word	0x000004d5
      20:	000004d5 	.word	0x000004d5
      24:	000004d5 	.word	0x000004d5
      28:	000004d5 	.word	0x000004d5
      2c:	000004d5 	.word	0x000004d5
      30:	000004d5 	.word	0x000004d5
      34:	000004d5 	.word	0x000004d5
      38:	000004d5 	.word	0x000004d5
      3c:	00000401 	.word	0x00000401
      40:	000004d5 	.word	0x000004d5
      44:	000004d5 	.word	0x000004d5
      48:	000004d5 	.word	0x000004d5
      4c:	000004d5 	.word	0x000004d5
      50:	000004d5 	.word	0x000004d5
      54:	000004d5 	.word	0x000004d5
      58:	000004d5 	.word	0x000004d5
      5c:	000004d5 	.word	0x000004d5
      60:	000004d5 	.word	0x000004d5
      64:	000004d5 	.word	0x000004d5
      68:	000004d5 	.word	0x000004d5
      6c:	000004d5 	.word	0x000004d5
      70:	000004d5 	.word	0x000004d5
      74:	000004d5 	.word	0x000004d5
      78:	000004d5 	.word	0x000004d5
      7c:	000004d5 	.word	0x000004d5
      80:	000004d5 	.word	0x000004d5
      84:	000004d5 	.word	0x000004d5
      88:	000004d5 	.word	0x000004d5
      8c:	000004d5 	.word	0x000004d5
      90:	000004d5 	.word	0x000004d5

00000094 <deregister_tm_clones>:
      94:	4b05      	ldr	r3, [pc, #20]	; (ac <deregister_tm_clones+0x18>)
      96:	4806      	ldr	r0, [pc, #24]	; (b0 <deregister_tm_clones+0x1c>)
      98:	3303      	adds	r3, #3
      9a:	b510      	push	{r4, lr}
      9c:	1a1b      	subs	r3, r3, r0
      9e:	2b06      	cmp	r3, #6
      a0:	d903      	bls.n	aa <deregister_tm_clones+0x16>
      a2:	4b04      	ldr	r3, [pc, #16]	; (b4 <deregister_tm_clones+0x20>)
      a4:	2b00      	cmp	r3, #0
      a6:	d000      	beq.n	aa <deregister_tm_clones+0x16>
      a8:	4798      	blx	r3
      aa:	bd10      	pop	{r4, pc}
      ac:	20000080 	.word	0x20000080
      b0:	20000080 	.word	0x20000080
      b4:	00000000 	.word	0x00000000

000000b8 <register_tm_clones>:
      b8:	4806      	ldr	r0, [pc, #24]	; (d4 <register_tm_clones+0x1c>)
      ba:	4907      	ldr	r1, [pc, #28]	; (d8 <register_tm_clones+0x20>)
      bc:	b510      	push	{r4, lr}
      be:	1a09      	subs	r1, r1, r0
      c0:	1089      	asrs	r1, r1, #2
      c2:	0fcb      	lsrs	r3, r1, #31
      c4:	1859      	adds	r1, r3, r1
      c6:	1049      	asrs	r1, r1, #1
      c8:	d003      	beq.n	d2 <register_tm_clones+0x1a>
      ca:	4b04      	ldr	r3, [pc, #16]	; (dc <register_tm_clones+0x24>)
      cc:	2b00      	cmp	r3, #0
      ce:	d000      	beq.n	d2 <register_tm_clones+0x1a>
      d0:	4798      	blx	r3
      d2:	bd10      	pop	{r4, pc}
      d4:	20000080 	.word	0x20000080
      d8:	20000080 	.word	0x20000080
      dc:	00000000 	.word	0x00000000

000000e0 <__do_global_dtors_aux>:
      e0:	b510      	push	{r4, lr}
      e2:	4c07      	ldr	r4, [pc, #28]	; (100 <__do_global_dtors_aux+0x20>)
      e4:	7823      	ldrb	r3, [r4, #0]
      e6:	2b00      	cmp	r3, #0
      e8:	d109      	bne.n	fe <__do_global_dtors_aux+0x1e>
      ea:	f7ff ffd3 	bl	94 <deregister_tm_clones>
      ee:	4b05      	ldr	r3, [pc, #20]	; (104 <__do_global_dtors_aux+0x24>)
      f0:	2b00      	cmp	r3, #0
      f2:	d002      	beq.n	fa <__do_global_dtors_aux+0x1a>
      f4:	4804      	ldr	r0, [pc, #16]	; (108 <__do_global_dtors_aux+0x28>)
      f6:	e000      	b.n	fa <__do_global_dtors_aux+0x1a>
      f8:	bf00      	nop
      fa:	2301      	movs	r3, #1
      fc:	7023      	strb	r3, [r4, #0]
      fe:	bd10      	pop	{r4, pc}
     100:	20000080 	.word	0x20000080
     104:	00000000 	.word	0x00000000
     108:	00002dc4 	.word	0x00002dc4

0000010c <frame_dummy>:
     10c:	4b09      	ldr	r3, [pc, #36]	; (134 <frame_dummy+0x28>)
     10e:	b510      	push	{r4, lr}
     110:	2b00      	cmp	r3, #0
     112:	d003      	beq.n	11c <frame_dummy+0x10>
     114:	4908      	ldr	r1, [pc, #32]	; (138 <frame_dummy+0x2c>)
     116:	4809      	ldr	r0, [pc, #36]	; (13c <frame_dummy+0x30>)
     118:	e000      	b.n	11c <frame_dummy+0x10>
     11a:	bf00      	nop
     11c:	4808      	ldr	r0, [pc, #32]	; (140 <frame_dummy+0x34>)
     11e:	6803      	ldr	r3, [r0, #0]
     120:	2b00      	cmp	r3, #0
     122:	d102      	bne.n	12a <frame_dummy+0x1e>
     124:	f7ff ffc8 	bl	b8 <register_tm_clones>
     128:	bd10      	pop	{r4, pc}
     12a:	4b06      	ldr	r3, [pc, #24]	; (144 <frame_dummy+0x38>)
     12c:	2b00      	cmp	r3, #0
     12e:	d0f9      	beq.n	124 <frame_dummy+0x18>
     130:	4798      	blx	r3
     132:	e7f7      	b.n	124 <frame_dummy+0x18>
     134:	00000000 	.word	0x00000000
     138:	20000084 	.word	0x20000084
     13c:	00002dc4 	.word	0x00002dc4
     140:	2000007c 	.word	0x2000007c
     144:	00000000 	.word	0x00000000

00000148 <_mainCRTStartup>:
     148:	4b14      	ldr	r3, [pc, #80]	; (19c <_mainCRTStartup+0x54>)
     14a:	2b00      	cmp	r3, #0
     14c:	d100      	bne.n	150 <_mainCRTStartup+0x8>
     14e:	4b12      	ldr	r3, [pc, #72]	; (198 <_mainCRTStartup+0x50>)
     150:	469d      	mov	sp, r3
     152:	2240      	movs	r2, #64	; 0x40
     154:	0292      	lsls	r2, r2, #10
     156:	1a9a      	subs	r2, r3, r2
     158:	4692      	mov	sl, r2
     15a:	2100      	movs	r1, #0
     15c:	468b      	mov	fp, r1
     15e:	460f      	mov	r7, r1
     160:	4811      	ldr	r0, [pc, #68]	; (1a8 <_mainCRTStartup+0x60>)
     162:	4a12      	ldr	r2, [pc, #72]	; (1ac <_mainCRTStartup+0x64>)
     164:	1a12      	subs	r2, r2, r0
     166:	f000 ff9d 	bl	10a4 <memset>
     16a:	4b0d      	ldr	r3, [pc, #52]	; (1a0 <_mainCRTStartup+0x58>)
     16c:	2b00      	cmp	r3, #0
     16e:	d000      	beq.n	172 <_mainCRTStartup+0x2a>
     170:	4798      	blx	r3
     172:	4b0c      	ldr	r3, [pc, #48]	; (1a4 <_mainCRTStartup+0x5c>)
     174:	2b00      	cmp	r3, #0
     176:	d000      	beq.n	17a <_mainCRTStartup+0x32>
     178:	4798      	blx	r3
     17a:	2000      	movs	r0, #0
     17c:	2100      	movs	r1, #0
     17e:	0004      	movs	r4, r0
     180:	000d      	movs	r5, r1
     182:	480b      	ldr	r0, [pc, #44]	; (1b0 <_mainCRTStartup+0x68>)
     184:	f000 ff32 	bl	fec <atexit>
     188:	f000 ff68 	bl	105c <__libc_init_array>
     18c:	0020      	movs	r0, r4
     18e:	0029      	movs	r1, r5
     190:	f000 f952 	bl	438 <main>
     194:	f000 ff32 	bl	ffc <exit>
     198:	00080000 	.word	0x00080000
     19c:	20002000 	.word	0x20002000
	...
     1a8:	20000080 	.word	0x20000080
     1ac:	20000140 	.word	0x20000140
     1b0:	00001029 	.word	0x00001029

000001b4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     1b4:	b530      	push	{r4, r5, lr}
     1b6:	b083      	sub	sp, #12
     1b8:	0002      	movs	r2, r0
     1ba:	9100      	str	r1, [sp, #0]
     1bc:	466b      	mov	r3, sp
     1be:	3307      	adds	r3, #7
     1c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
     1c2:	466b      	mov	r3, sp
     1c4:	3307      	adds	r3, #7
     1c6:	781b      	ldrb	r3, [r3, #0]
     1c8:	2b7f      	cmp	r3, #127	; 0x7f
     1ca:	d936      	bls.n	23a <NVIC_SetPriority+0x86>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     1cc:	4c32      	ldr	r4, [pc, #200]	; (298 <NVIC_SetPriority+0xe4>)
     1ce:	466b      	mov	r3, sp
     1d0:	3307      	adds	r3, #7
     1d2:	781b      	ldrb	r3, [r3, #0]
     1d4:	001a      	movs	r2, r3
     1d6:	230f      	movs	r3, #15
     1d8:	4013      	ands	r3, r2
     1da:	3b08      	subs	r3, #8
     1dc:	0899      	lsrs	r1, r3, #2
     1de:	4a2e      	ldr	r2, [pc, #184]	; (298 <NVIC_SetPriority+0xe4>)
     1e0:	466b      	mov	r3, sp
     1e2:	3307      	adds	r3, #7
     1e4:	781b      	ldrb	r3, [r3, #0]
     1e6:	0018      	movs	r0, r3
     1e8:	230f      	movs	r3, #15
     1ea:	4003      	ands	r3, r0
     1ec:	3b08      	subs	r3, #8
     1ee:	089b      	lsrs	r3, r3, #2
     1f0:	3306      	adds	r3, #6
     1f2:	009b      	lsls	r3, r3, #2
     1f4:	18d3      	adds	r3, r2, r3
     1f6:	3304      	adds	r3, #4
     1f8:	681b      	ldr	r3, [r3, #0]
     1fa:	466a      	mov	r2, sp
     1fc:	3207      	adds	r2, #7
     1fe:	7812      	ldrb	r2, [r2, #0]
     200:	0010      	movs	r0, r2
     202:	2203      	movs	r2, #3
     204:	4002      	ands	r2, r0
     206:	00d2      	lsls	r2, r2, #3
     208:	20ff      	movs	r0, #255	; 0xff
     20a:	4090      	lsls	r0, r2
     20c:	0002      	movs	r2, r0
     20e:	43d2      	mvns	r2, r2
     210:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     212:	9b00      	ldr	r3, [sp, #0]
     214:	019b      	lsls	r3, r3, #6
     216:	20ff      	movs	r0, #255	; 0xff
     218:	4018      	ands	r0, r3
     21a:	466b      	mov	r3, sp
     21c:	3307      	adds	r3, #7
     21e:	781b      	ldrb	r3, [r3, #0]
     220:	001d      	movs	r5, r3
     222:	2303      	movs	r3, #3
     224:	402b      	ands	r3, r5
     226:	00db      	lsls	r3, r3, #3
     228:	4098      	lsls	r0, r3
     22a:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     22c:	431a      	orrs	r2, r3
     22e:	1d8b      	adds	r3, r1, #6
     230:	009b      	lsls	r3, r3, #2
     232:	18e3      	adds	r3, r4, r3
     234:	3304      	adds	r3, #4
     236:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
     238:	e02b      	b.n	292 <NVIC_SetPriority+0xde>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     23a:	4c18      	ldr	r4, [pc, #96]	; (29c <NVIC_SetPriority+0xe8>)
     23c:	466b      	mov	r3, sp
     23e:	3307      	adds	r3, #7
     240:	781b      	ldrb	r3, [r3, #0]
     242:	b25b      	sxtb	r3, r3
     244:	089b      	lsrs	r3, r3, #2
     246:	4915      	ldr	r1, [pc, #84]	; (29c <NVIC_SetPriority+0xe8>)
     248:	466a      	mov	r2, sp
     24a:	3207      	adds	r2, #7
     24c:	7812      	ldrb	r2, [r2, #0]
     24e:	b252      	sxtb	r2, r2
     250:	0892      	lsrs	r2, r2, #2
     252:	32c0      	adds	r2, #192	; 0xc0
     254:	0092      	lsls	r2, r2, #2
     256:	5852      	ldr	r2, [r2, r1]
     258:	4669      	mov	r1, sp
     25a:	3107      	adds	r1, #7
     25c:	7809      	ldrb	r1, [r1, #0]
     25e:	0008      	movs	r0, r1
     260:	2103      	movs	r1, #3
     262:	4001      	ands	r1, r0
     264:	00c9      	lsls	r1, r1, #3
     266:	20ff      	movs	r0, #255	; 0xff
     268:	4088      	lsls	r0, r1
     26a:	0001      	movs	r1, r0
     26c:	43c9      	mvns	r1, r1
     26e:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     270:	9a00      	ldr	r2, [sp, #0]
     272:	0192      	lsls	r2, r2, #6
     274:	20ff      	movs	r0, #255	; 0xff
     276:	4010      	ands	r0, r2
     278:	466a      	mov	r2, sp
     27a:	3207      	adds	r2, #7
     27c:	7812      	ldrb	r2, [r2, #0]
     27e:	0015      	movs	r5, r2
     280:	2203      	movs	r2, #3
     282:	402a      	ands	r2, r5
     284:	00d2      	lsls	r2, r2, #3
     286:	4090      	lsls	r0, r2
     288:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     28a:	430a      	orrs	r2, r1
     28c:	33c0      	adds	r3, #192	; 0xc0
     28e:	009b      	lsls	r3, r3, #2
     290:	511a      	str	r2, [r3, r4]
}
     292:	46c0      	nop			; (mov r8, r8)
     294:	b003      	add	sp, #12
     296:	bd30      	pop	{r4, r5, pc}
     298:	e000ed00 	.word	0xe000ed00
     29c:	e000e100 	.word	0xe000e100

000002a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
     2a0:	b500      	push	{lr}
     2a2:	b083      	sub	sp, #12
     2a4:	9001      	str	r0, [sp, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
     2a6:	9b01      	ldr	r3, [sp, #4]
     2a8:	3b01      	subs	r3, #1
     2aa:	4a0c      	ldr	r2, [pc, #48]	; (2dc <SysTick_Config+0x3c>)
     2ac:	4293      	cmp	r3, r2
     2ae:	d901      	bls.n	2b4 <SysTick_Config+0x14>
  {
    return (1UL);                                                   /* Reload value impossible */
     2b0:	2301      	movs	r3, #1
     2b2:	e010      	b.n	2d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
     2b4:	4b0a      	ldr	r3, [pc, #40]	; (2e0 <SysTick_Config+0x40>)
     2b6:	9a01      	ldr	r2, [sp, #4]
     2b8:	3a01      	subs	r2, #1
     2ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
     2bc:	2301      	movs	r3, #1
     2be:	425b      	negs	r3, r3
     2c0:	2103      	movs	r1, #3
     2c2:	0018      	movs	r0, r3
     2c4:	f7ff ff76 	bl	1b4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
     2c8:	4b05      	ldr	r3, [pc, #20]	; (2e0 <SysTick_Config+0x40>)
     2ca:	2200      	movs	r2, #0
     2cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     2ce:	4b04      	ldr	r3, [pc, #16]	; (2e0 <SysTick_Config+0x40>)
     2d0:	2207      	movs	r2, #7
     2d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
     2d4:	2300      	movs	r3, #0
}
     2d6:	0018      	movs	r0, r3
     2d8:	b003      	add	sp, #12
     2da:	bd00      	pop	{pc}
     2dc:	00ffffff 	.word	0x00ffffff
     2e0:	e000e010 	.word	0xe000e010

000002e4 <SYSTEM_GetProdRev>:
 * @return
 *   Production revision for this part.
 ******************************************************************************/
__STATIC_INLINE uint8_t SYSTEM_GetProdRev(void)
{
  return (DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
     2e4:	4b02      	ldr	r3, [pc, #8]	; (2f0 <SYSTEM_GetProdRev+0xc>)
     2e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
         >> _DEVINFO_PART_PROD_REV_SHIFT;
     2e8:	0e1b      	lsrs	r3, r3, #24
     2ea:	b2db      	uxtb	r3, r3
}
     2ec:	0018      	movs	r0, r3
     2ee:	4770      	bx	lr
     2f0:	0fe081b0 	.word	0x0fe081b0

000002f4 <GPIO_PinOutSet>:
 *
 * @param[in] pin
 *   The pin to set.
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutSet(GPIO_Port_TypeDef port, unsigned int pin)
{
     2f4:	b082      	sub	sp, #8
     2f6:	0002      	movs	r2, r0
     2f8:	9100      	str	r1, [sp, #0]
     2fa:	466b      	mov	r3, sp
     2fc:	3307      	adds	r3, #7
     2fe:	701a      	strb	r2, [r3, #0]
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
     300:	466b      	mov	r3, sp
     302:	3307      	adds	r3, #7
     304:	781b      	ldrb	r3, [r3, #0]
     306:	2b00      	cmp	r3, #0
     308:	d011      	beq.n	32e <GPIO_PinOutSet+0x3a>
     30a:	466b      	mov	r3, sp
     30c:	3307      	adds	r3, #7
     30e:	781b      	ldrb	r3, [r3, #0]
     310:	2b01      	cmp	r3, #1
     312:	d00c      	beq.n	32e <GPIO_PinOutSet+0x3a>
     314:	466b      	mov	r3, sp
     316:	3307      	adds	r3, #7
     318:	781b      	ldrb	r3, [r3, #0]
     31a:	2b02      	cmp	r3, #2
     31c:	d007      	beq.n	32e <GPIO_PinOutSet+0x3a>
     31e:	466b      	mov	r3, sp
     320:	3307      	adds	r3, #7
     322:	781b      	ldrb	r3, [r3, #0]
     324:	2b03      	cmp	r3, #3
     326:	d002      	beq.n	32e <GPIO_PinOutSet+0x3a>
     328:	466b      	mov	r3, sp
     32a:	3307      	adds	r3, #7
     32c:	781b      	ldrb	r3, [r3, #0]
#if defined(_GPIO_P_DOUTSET_MASK)
  GPIO->P[port].DOUTSET = 1 << pin;
     32e:	4909      	ldr	r1, [pc, #36]	; (354 <GPIO_PinOutSet+0x60>)
     330:	466b      	mov	r3, sp
     332:	3307      	adds	r3, #7
     334:	781a      	ldrb	r2, [r3, #0]
     336:	2001      	movs	r0, #1
     338:	9b00      	ldr	r3, [sp, #0]
     33a:	4098      	lsls	r0, r3
     33c:	0003      	movs	r3, r0
     33e:	0018      	movs	r0, r3
     340:	0013      	movs	r3, r2
     342:	00db      	lsls	r3, r3, #3
     344:	189b      	adds	r3, r3, r2
     346:	009b      	lsls	r3, r3, #2
     348:	18cb      	adds	r3, r1, r3
     34a:	3310      	adds	r3, #16
     34c:	6018      	str	r0, [r3, #0]
#else
  BUS_RegMaskedSet(&GPIO->P[port].DOUT, 1 << pin);
#endif
}
     34e:	46c0      	nop			; (mov r8, r8)
     350:	b002      	add	sp, #8
     352:	4770      	bx	lr
     354:	40006000 	.word	0x40006000

00000358 <GPIO_PinOutToggle>:
 *
 * @param[in] pin
 *   The pin to toggle.
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutToggle(GPIO_Port_TypeDef port, unsigned int pin)
{
     358:	b082      	sub	sp, #8
     35a:	0002      	movs	r2, r0
     35c:	9100      	str	r1, [sp, #0]
     35e:	466b      	mov	r3, sp
     360:	3307      	adds	r3, #7
     362:	701a      	strb	r2, [r3, #0]
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
     364:	466b      	mov	r3, sp
     366:	3307      	adds	r3, #7
     368:	781b      	ldrb	r3, [r3, #0]
     36a:	2b00      	cmp	r3, #0
     36c:	d011      	beq.n	392 <GPIO_PinOutToggle+0x3a>
     36e:	466b      	mov	r3, sp
     370:	3307      	adds	r3, #7
     372:	781b      	ldrb	r3, [r3, #0]
     374:	2b01      	cmp	r3, #1
     376:	d00c      	beq.n	392 <GPIO_PinOutToggle+0x3a>
     378:	466b      	mov	r3, sp
     37a:	3307      	adds	r3, #7
     37c:	781b      	ldrb	r3, [r3, #0]
     37e:	2b02      	cmp	r3, #2
     380:	d007      	beq.n	392 <GPIO_PinOutToggle+0x3a>
     382:	466b      	mov	r3, sp
     384:	3307      	adds	r3, #7
     386:	781b      	ldrb	r3, [r3, #0]
     388:	2b03      	cmp	r3, #3
     38a:	d002      	beq.n	392 <GPIO_PinOutToggle+0x3a>
     38c:	466b      	mov	r3, sp
     38e:	3307      	adds	r3, #7
     390:	781b      	ldrb	r3, [r3, #0]

  GPIO->P[port].DOUTTGL = 1 << pin;
     392:	4909      	ldr	r1, [pc, #36]	; (3b8 <GPIO_PinOutToggle+0x60>)
     394:	466b      	mov	r3, sp
     396:	3307      	adds	r3, #7
     398:	781a      	ldrb	r2, [r3, #0]
     39a:	2001      	movs	r0, #1
     39c:	9b00      	ldr	r3, [sp, #0]
     39e:	4098      	lsls	r0, r3
     3a0:	0003      	movs	r3, r0
     3a2:	0018      	movs	r0, r3
     3a4:	0013      	movs	r3, r2
     3a6:	00db      	lsls	r3, r3, #3
     3a8:	189b      	adds	r3, r3, r2
     3aa:	009b      	lsls	r3, r3, #2
     3ac:	18cb      	adds	r3, r1, r3
     3ae:	3318      	adds	r3, #24
     3b0:	6018      	str	r0, [r3, #0]
}
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	b002      	add	sp, #8
     3b6:	4770      	bx	lr
     3b8:	40006000 	.word	0x40006000

000003bc <CHIP_Init>:
 * This init function will configure the device to a state where it is
 * as similar as later revisions as possible, to improve software compatibility
 * with newer parts. See the device specific errata for details.
 *****************************************************************************/
__STATIC_INLINE void CHIP_Init(void)
{
     3bc:	b510      	push	{r4, lr}
     3be:	b082      	sub	sp, #8
#endif

#if defined(_SILICON_LABS_32B_SERIES_0) && defined(_EFM32_HAPPY_FAMILY)

  uint8_t prodRev;
  prodRev = SYSTEM_GetProdRev();
     3c0:	466b      	mov	r3, sp
     3c2:	1ddc      	adds	r4, r3, #7
     3c4:	f7ff ff8e 	bl	2e4 <SYSTEM_GetProdRev>
     3c8:	0003      	movs	r3, r0
     3ca:	7023      	strb	r3, [r4, #0]

  if (prodRev <= 129) {
     3cc:	466b      	mov	r3, sp
     3ce:	3307      	adds	r3, #7
     3d0:	781b      	ldrb	r3, [r3, #0]
     3d2:	2b81      	cmp	r3, #129	; 0x81
     3d4:	d808      	bhi.n	3e8 <CHIP_Init+0x2c>
    /* This fixes a mistaken internal connection between PC0 and PC4 */
    /* This disables an internal pulldown on PC4 */
    *(volatile uint32_t*)(0x400C6018) = (1 << 26) | (5 << 0);
     3d6:	4b06      	ldr	r3, [pc, #24]	; (3f0 <CHIP_Init+0x34>)
     3d8:	4a06      	ldr	r2, [pc, #24]	; (3f4 <CHIP_Init+0x38>)
     3da:	601a      	str	r2, [r3, #0]
    /* This disables an internal LDO test signal driving PC4 */
    *(volatile uint32_t*)(0x400C80E4) &= ~(1 << 24);
     3dc:	4b06      	ldr	r3, [pc, #24]	; (3f8 <CHIP_Init+0x3c>)
     3de:	4a06      	ldr	r2, [pc, #24]	; (3f8 <CHIP_Init+0x3c>)
     3e0:	6812      	ldr	r2, [r2, #0]
     3e2:	4906      	ldr	r1, [pc, #24]	; (3fc <CHIP_Init+0x40>)
     3e4:	400a      	ands	r2, r1
     3e6:	601a      	str	r2, [r3, #0]
#endif

#if defined(_EFR_DEVICE) && (_SILICON_LABS_GECKO_INTERNAL_SDID >= 84)
  MSC->CTRL |= 0x1 << 8;
#endif
}
     3e8:	46c0      	nop			; (mov r8, r8)
     3ea:	b002      	add	sp, #8
     3ec:	bd10      	pop	{r4, pc}
     3ee:	46c0      	nop			; (mov r8, r8)
     3f0:	400c6018 	.word	0x400c6018
     3f4:	04000005 	.word	0x04000005
     3f8:	400c80e4 	.word	0x400c80e4
     3fc:	feffffff 	.word	0xfeffffff

00000400 <SysTick_Handler>:
 * @brief SysTick_Handler
 * Interrupt Service Routine for system tick counter
 *****************************************************************************/
void SysTick_Handler(void)
{
    msTicks++;       /* increment counter necessary in Delay()*/
     400:	4b03      	ldr	r3, [pc, #12]	; (410 <Heap_Size+0x10>)
     402:	681b      	ldr	r3, [r3, #0]
     404:	1c5a      	adds	r2, r3, #1
     406:	4b02      	ldr	r3, [pc, #8]	; (410 <Heap_Size+0x10>)
     408:	601a      	str	r2, [r3, #0]
}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	4770      	bx	lr
     40e:	46c0      	nop			; (mov r8, r8)
     410:	20000138 	.word	0x20000138

00000414 <Delay>:
/**************************************************************************//**
 * @brief Delays number of msTick Systicks (typically 1 ms)
 * @param dlyTicks Number of ticks to delay
 *****************************************************************************/
void Delay(uint32_t dlyTicks)
{
     414:	b084      	sub	sp, #16
     416:	9001      	str	r0, [sp, #4]
    uint32_t curTicks;

    curTicks = msTicks;
     418:	4b06      	ldr	r3, [pc, #24]	; (434 <Delay+0x20>)
     41a:	681b      	ldr	r3, [r3, #0]
     41c:	9303      	str	r3, [sp, #12]
    while ((msTicks - curTicks) < dlyTicks) ;
     41e:	46c0      	nop			; (mov r8, r8)
     420:	4b04      	ldr	r3, [pc, #16]	; (434 <Delay+0x20>)
     422:	681a      	ldr	r2, [r3, #0]
     424:	9b03      	ldr	r3, [sp, #12]
     426:	1ad2      	subs	r2, r2, r3
     428:	9b01      	ldr	r3, [sp, #4]
     42a:	429a      	cmp	r2, r3
     42c:	d3f8      	bcc.n	420 <Delay+0xc>
}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	b004      	add	sp, #16
     432:	4770      	bx	lr
     434:	20000138 	.word	0x20000138

00000438 <main>:

/**************************************************************************//**
 * @brief  Main function
 *****************************************************************************/
int main(void)
{
     438:	b510      	push	{r4, lr}
    CHIP_Init();
     43a:	f7ff ffbf 	bl	3bc <CHIP_Init>

    CMU_ClockEnable(cmuClock_GPIO, true);
     43e:	4b17      	ldr	r3, [pc, #92]	; (49c <main+0x64>)
     440:	2101      	movs	r1, #1
     442:	0018      	movs	r0, r3
     444:	f000 fa50 	bl	8e8 <CMU_ClockEnable>

    /* Setup SysTick Timer for 1 msec interrupts  */
    if (SysTick_Config(CMU_ClockFreqGet(cmuClock_CORE) / 1000)) while (1) ;
     448:	4b15      	ldr	r3, [pc, #84]	; (4a0 <main+0x68>)
     44a:	0018      	movs	r0, r3
     44c:	f000 faa4 	bl	998 <CMU_ClockFreqGet>
     450:	0002      	movs	r2, r0
     452:	23fa      	movs	r3, #250	; 0xfa
     454:	0099      	lsls	r1, r3, #2
     456:	0010      	movs	r0, r2
     458:	f000 fd3c 	bl	ed4 <__udivsi3>
     45c:	0003      	movs	r3, r0
     45e:	0018      	movs	r0, r3
     460:	f7ff ff1e 	bl	2a0 <SysTick_Config>
     464:	1e03      	subs	r3, r0, #0
     466:	d000      	beq.n	46a <main+0x32>
     468:	e7fe      	b.n	468 <main+0x30>

    /* Initialize LED driver */
    GPIO_PinModeSet(LED_PORT, LED_PIN, gpioModePushPull, 0);
     46a:	2300      	movs	r3, #0
     46c:	2204      	movs	r2, #4
     46e:	2104      	movs	r1, #4
     470:	2000      	movs	r0, #0
     472:	f000 fc7d 	bl	d70 <GPIO_PinModeSet>

    GPIO_PinOutSet(LED_PORT, LED_PIN);
     476:	2104      	movs	r1, #4
     478:	2000      	movs	r0, #0
     47a:	f7ff ff3b 	bl	2f4 <GPIO_PinOutSet>

    printf("test");
     47e:	4b09      	ldr	r3, [pc, #36]	; (4a4 <main+0x6c>)
     480:	0018      	movs	r0, r3
     482:	f000 fe75 	bl	1170 <iprintf>

    /* Infinite blink loop */
    while (1)
    {
        Delay(1000);
     486:	23fa      	movs	r3, #250	; 0xfa
     488:	009b      	lsls	r3, r3, #2
     48a:	0018      	movs	r0, r3
     48c:	f7ff ffc2 	bl	414 <Delay>
        GPIO_PinOutToggle(LED_PORT, LED_PIN);
     490:	2104      	movs	r1, #4
     492:	2000      	movs	r0, #0
     494:	f7ff ff60 	bl	358 <GPIO_PinOutToggle>
        Delay(1000);
     498:	e7f5      	b.n	486 <main+0x4e>
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	00048200 	.word	0x00048200
     4a0:	00020050 	.word	0x00020050
     4a4:	00002cd0 	.word	0x00002cd0

000004a8 <Reset_Handler>:
    .align      2
    .globl      Reset_Handler
    .type       Reset_Handler, %function
Reset_Handler:
#ifndef __NO_SYSTEM_INIT
    ldr     r0, =SystemInit
     4a8:	4806      	ldr	r0, [pc, #24]	; (4c4 <Reset_Handler+0x1c>)
    blx     r0
     4aa:	4780      	blx	r0
 *    __data_start__: VMA of start of the section to copy to
 *    __data_end__: VMA of end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
    ldr     r1, =__etext
     4ac:	4906      	ldr	r1, [pc, #24]	; (4c8 <Reset_Handler+0x20>)
    ldr     r2, =__data_start__
     4ae:	4a07      	ldr	r2, [pc, #28]	; (4cc <Reset_Handler+0x24>)
    ldr     r3, =__data_end__
     4b0:	4b07      	ldr	r3, [pc, #28]	; (4d0 <Reset_Handler+0x28>)

    subs    r3, r2
     4b2:	1a9b      	subs	r3, r3, r2
    ble     .L_loop1_done
     4b4:	dd03      	ble.n	4be <Reset_Handler+0x16>

.L_loop1:
    subs    r3, #4
     4b6:	3b04      	subs	r3, #4
    ldr     r0, [r1,r3]
     4b8:	58c8      	ldr	r0, [r1, r3]
    str     r0, [r2,r3]
     4ba:	50d0      	str	r0, [r2, r3]
    bgt     .L_loop1
     4bc:	dcfb      	bgt.n	4b6 <Reset_Handler+0xe>
#endif /* __STARTUP_CLEAR_BSS_MULTIPLE || __STARTUP_CLEAR_BSS */

#ifndef __START
#define __START _start
#endif
    bl      __START
     4be:	f7ff fe43 	bl	148 <_mainCRTStartup>
     4c2:	0000      	.short	0x0000
    ldr     r0, =SystemInit
     4c4:	00000605 	.word	0x00000605
    ldr     r1, =__etext
     4c8:	00002dd0 	.word	0x00002dd0
    ldr     r2, =__data_start__
     4cc:	20000000 	.word	0x20000000
    ldr     r3, =__data_end__
     4d0:	20000080 	.word	0x20000080

000004d4 <ACMP0_IRQHandler>:
    .align  1
    .thumb_func
    .weak   Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    b       .
     4d4:	e7fe      	b.n	4d4 <ACMP0_IRQHandler>
     4d6:	46c0      	nop			; (mov r8, r8)

000004d8 <SystemCoreClockGet>:
 *
 * @return
 *   The current core clock frequency in Hz.
 ******************************************************************************/
uint32_t SystemCoreClockGet(void)
{
     4d8:	b500      	push	{lr}
     4da:	b083      	sub	sp, #12
  uint32_t ret;

  ret = SystemHFClockGet();
     4dc:	f000 f816 	bl	50c <SystemHFClockGet>
     4e0:	0003      	movs	r3, r0
     4e2:	9301      	str	r3, [sp, #4]
  ret >>= (CMU->HFCORECLKDIV & _CMU_HFCORECLKDIV_HFCORECLKDIV_MASK) >>
     4e4:	4b07      	ldr	r3, [pc, #28]	; (504 <SystemCoreClockGet+0x2c>)
     4e6:	685b      	ldr	r3, [r3, #4]
     4e8:	220f      	movs	r2, #15
     4ea:	4013      	ands	r3, r2
     4ec:	9a01      	ldr	r2, [sp, #4]
     4ee:	40da      	lsrs	r2, r3
     4f0:	0013      	movs	r3, r2
     4f2:	9301      	str	r3, [sp, #4]
          _CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT;

  /* Keep CMSIS variable up-to-date just in case */
  SystemCoreClock = ret;
     4f4:	4b04      	ldr	r3, [pc, #16]	; (508 <SystemCoreClockGet+0x30>)
     4f6:	9a01      	ldr	r2, [sp, #4]
     4f8:	601a      	str	r2, [r3, #0]

  return ret;
     4fa:	9b01      	ldr	r3, [sp, #4]
}
     4fc:	0018      	movs	r0, r3
     4fe:	b003      	add	sp, #12
     500:	bd00      	pop	{pc}
     502:	46c0      	nop			; (mov r8, r8)
     504:	400c8000 	.word	0x400c8000
     508:	20000008 	.word	0x20000008

0000050c <SystemHFClockGet>:
 *
 * @return
 *   The current HFCLK frequency in Hz.
 ******************************************************************************/
uint32_t SystemHFClockGet(void)
{
     50c:	b500      	push	{lr}
     50e:	b083      	sub	sp, #12
  uint32_t ret;

  switch (CMU->STATUS & (CMU_STATUS_HFRCOSEL | CMU_STATUS_HFXOSEL
     510:	4b32      	ldr	r3, [pc, #200]	; (5dc <SystemHFClockGet+0xd0>)
     512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     514:	4a32      	ldr	r2, [pc, #200]	; (5e0 <SystemHFClockGet+0xd4>)
     516:	4013      	ands	r3, r2
     518:	2280      	movs	r2, #128	; 0x80
     51a:	0152      	lsls	r2, r2, #5
     51c:	4293      	cmp	r3, r2
     51e:	d015      	beq.n	54c <SystemHFClockGet+0x40>
     520:	2280      	movs	r2, #128	; 0x80
     522:	0152      	lsls	r2, r2, #5
     524:	4293      	cmp	r3, r2
     526:	d804      	bhi.n	532 <SystemHFClockGet+0x26>
     528:	2280      	movs	r2, #128	; 0x80
     52a:	0112      	lsls	r2, r2, #4
     52c:	4293      	cmp	r3, r2
     52e:	d011      	beq.n	554 <SystemHFClockGet+0x48>
     530:	e017      	b.n	562 <SystemHFClockGet+0x56>
     532:	2280      	movs	r2, #128	; 0x80
     534:	0192      	lsls	r2, r2, #6
     536:	4293      	cmp	r3, r2
     538:	d004      	beq.n	544 <SystemHFClockGet+0x38>
     53a:	2280      	movs	r2, #128	; 0x80
     53c:	04d2      	lsls	r2, r2, #19
     53e:	4293      	cmp	r3, r2
     540:	d00c      	beq.n	55c <SystemHFClockGet+0x50>
     542:	e00e      	b.n	562 <SystemHFClockGet+0x56>
#endif
                        ))
  {
    case CMU_STATUS_LFXOSEL:
#if (EFM32_LFXO_FREQ > 0)
      ret = SystemLFXOClock;
     544:	4b27      	ldr	r3, [pc, #156]	; (5e4 <SystemHFClockGet+0xd8>)
     546:	681b      	ldr	r3, [r3, #0]
     548:	9301      	str	r3, [sp, #4]
#else
      /* We should not get here, since core should not be clocked. May */
      /* be caused by a misconfiguration though. */
      ret = 0;
#endif
      break;
     54a:	e039      	b.n	5c0 <SystemHFClockGet+0xb4>

    case CMU_STATUS_LFRCOSEL:
      ret = EFM32_LFRCO_FREQ;
     54c:	2380      	movs	r3, #128	; 0x80
     54e:	021b      	lsls	r3, r3, #8
     550:	9301      	str	r3, [sp, #4]
      break;
     552:	e035      	b.n	5c0 <SystemHFClockGet+0xb4>

    case CMU_STATUS_HFXOSEL:
#if (EFM32_HFXO_FREQ > 0)
      ret = SystemHFXOClock;
     554:	4b24      	ldr	r3, [pc, #144]	; (5e8 <SystemHFClockGet+0xdc>)
     556:	681b      	ldr	r3, [r3, #0]
     558:	9301      	str	r3, [sp, #4]
#else
      /* We should not get here, since core should not be clocked. May */
      /* be caused by a misconfiguration though. */
      ret = 0;
#endif
      break;
     55a:	e031      	b.n	5c0 <SystemHFClockGet+0xb4>

#if defined(CMU_STATUS_USHFRCODIV2SEL)
    case CMU_STATUS_USHFRCODIV2SEL:
      ret = 24000000;
     55c:	4b23      	ldr	r3, [pc, #140]	; (5ec <SystemHFClockGet+0xe0>)
     55e:	9301      	str	r3, [sp, #4]
      break;
     560:	e02e      	b.n	5c0 <SystemHFClockGet+0xb4>
#endif

    default: /* CMU_STATUS_HFRCOSEL */
      switch (CMU->HFRCOCTRL & _CMU_HFRCOCTRL_BAND_MASK)
     562:	4b1e      	ldr	r3, [pc, #120]	; (5dc <SystemHFClockGet+0xd0>)
     564:	68da      	ldr	r2, [r3, #12]
     566:	23e0      	movs	r3, #224	; 0xe0
     568:	00db      	lsls	r3, r3, #3
     56a:	4013      	ands	r3, r2
     56c:	2280      	movs	r2, #128	; 0x80
     56e:	0092      	lsls	r2, r2, #2
     570:	4293      	cmp	r3, r2
     572:	d018      	beq.n	5a6 <SystemHFClockGet+0x9a>
     574:	2280      	movs	r2, #128	; 0x80
     576:	0092      	lsls	r2, r2, #2
     578:	4293      	cmp	r3, r2
     57a:	d806      	bhi.n	58a <SystemHFClockGet+0x7e>
     57c:	2b00      	cmp	r3, #0
     57e:	d018      	beq.n	5b2 <SystemHFClockGet+0xa6>
     580:	2280      	movs	r2, #128	; 0x80
     582:	0052      	lsls	r2, r2, #1
     584:	4293      	cmp	r3, r2
     586:	d011      	beq.n	5ac <SystemHFClockGet+0xa0>
     588:	e016      	b.n	5b8 <SystemHFClockGet+0xac>
     58a:	22c0      	movs	r2, #192	; 0xc0
     58c:	0092      	lsls	r2, r2, #2
     58e:	4293      	cmp	r3, r2
     590:	d006      	beq.n	5a0 <SystemHFClockGet+0x94>
     592:	2280      	movs	r2, #128	; 0x80
     594:	00d2      	lsls	r2, r2, #3
     596:	4293      	cmp	r3, r2
     598:	d10e      	bne.n	5b8 <SystemHFClockGet+0xac>
      {
      case CMU_HFRCOCTRL_BAND_21MHZ:
        ret = 21000000;
     59a:	4b15      	ldr	r3, [pc, #84]	; (5f0 <SystemHFClockGet+0xe4>)
     59c:	9301      	str	r3, [sp, #4]
        break;
     59e:	e00e      	b.n	5be <SystemHFClockGet+0xb2>

      case CMU_HFRCOCTRL_BAND_14MHZ:
        ret = 14000000;
     5a0:	4b14      	ldr	r3, [pc, #80]	; (5f4 <SystemHFClockGet+0xe8>)
     5a2:	9301      	str	r3, [sp, #4]
        break;
     5a4:	e00b      	b.n	5be <SystemHFClockGet+0xb2>

      case CMU_HFRCOCTRL_BAND_11MHZ:
        ret = 11000000;
     5a6:	4b14      	ldr	r3, [pc, #80]	; (5f8 <SystemHFClockGet+0xec>)
     5a8:	9301      	str	r3, [sp, #4]
        break;
     5aa:	e008      	b.n	5be <SystemHFClockGet+0xb2>

      case CMU_HFRCOCTRL_BAND_7MHZ:
        ret = 6600000;
     5ac:	4b13      	ldr	r3, [pc, #76]	; (5fc <SystemHFClockGet+0xf0>)
     5ae:	9301      	str	r3, [sp, #4]
        break;
     5b0:	e005      	b.n	5be <SystemHFClockGet+0xb2>

      case CMU_HFRCOCTRL_BAND_1MHZ:
        ret = 1200000;
     5b2:	4b13      	ldr	r3, [pc, #76]	; (600 <SystemHFClockGet+0xf4>)
     5b4:	9301      	str	r3, [sp, #4]
        break;
     5b6:	e002      	b.n	5be <SystemHFClockGet+0xb2>

      default:
        ret = 0;
     5b8:	2300      	movs	r3, #0
     5ba:	9301      	str	r3, [sp, #4]
        break;
     5bc:	46c0      	nop			; (mov r8, r8)
      }
      break;
     5be:	46c0      	nop			; (mov r8, r8)
  }

  return ret / (1U + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK)
     5c0:	4b06      	ldr	r3, [pc, #24]	; (5dc <SystemHFClockGet+0xd0>)
     5c2:	681b      	ldr	r3, [r3, #0]
                      >> _CMU_CTRL_HFCLKDIV_SHIFT));
     5c4:	0b9b      	lsrs	r3, r3, #14
     5c6:	2207      	movs	r2, #7
     5c8:	4013      	ands	r3, r2
  return ret / (1U + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK)
     5ca:	3301      	adds	r3, #1
     5cc:	0019      	movs	r1, r3
     5ce:	9801      	ldr	r0, [sp, #4]
     5d0:	f000 fc80 	bl	ed4 <__udivsi3>
     5d4:	0003      	movs	r3, r0
}
     5d6:	0018      	movs	r0, r3
     5d8:	b003      	add	sp, #12
     5da:	bd00      	pop	{pc}
     5dc:	400c8000 	.word	0x400c8000
     5e0:	04003c00 	.word	0x04003c00
     5e4:	20000004 	.word	0x20000004
     5e8:	20000000 	.word	0x20000000
     5ec:	016e3600 	.word	0x016e3600
     5f0:	01406f40 	.word	0x01406f40
     5f4:	00d59f80 	.word	0x00d59f80
     5f8:	00a7d8c0 	.word	0x00a7d8c0
     5fc:	0064b540 	.word	0x0064b540
     600:	00124f80 	.word	0x00124f80

00000604 <SystemInit>:
 *   and any data has been initialized. For this reason, it cannot do any
 *   initialization of variables etc.
 *****************************************************************************/
void SystemInit(void)
{
}
     604:	46c0      	nop			; (mov r8, r8)
     606:	4770      	bx	lr

00000608 <SystemLFRCOClockGet>:
uint32_t SystemLFRCOClockGet(void)
{
  /* Currently we assume that this frequency is properly tuned during */
  /* manufacturing and is not changed after reset. If future requirements */
  /* for re-tuning by user, we can add support for that. */
  return EFM32_LFRCO_FREQ;
     608:	2380      	movs	r3, #128	; 0x80
     60a:	021b      	lsls	r3, r3, #8
}
     60c:	0018      	movs	r0, r3
     60e:	4770      	bx	lr

00000610 <SystemULFRCOClockGet>:
 *   ULFRCO frequency in Hz.
 *****************************************************************************/
uint32_t SystemULFRCOClockGet(void)
{
  /* The ULFRCO frequency is not tuned, and can be very inaccurate */
  return EFM32_ULFRCO_FREQ;
     610:	23fa      	movs	r3, #250	; 0xfa
     612:	009b      	lsls	r3, r3, #2
}
     614:	0018      	movs	r0, r3
     616:	4770      	bx	lr

00000618 <SystemLFXOClockGet>:
 *****************************************************************************/
uint32_t SystemLFXOClockGet(void)
{
  /* External crystal oscillator present? */
#if (EFM32_LFXO_FREQ > 0)
  return SystemLFXOClock;
     618:	4b01      	ldr	r3, [pc, #4]	; (620 <SystemLFXOClockGet+0x8>)
     61a:	681b      	ldr	r3, [r3, #0]
#else
  return 0;
#endif
}
     61c:	0018      	movs	r0, r3
     61e:	4770      	bx	lr
     620:	20000004 	.word	0x20000004

00000624 <BUS_RegBitWrite>:
 * @param[in] val Value to set bit to, 0 or 1
 ******************************************************************************/
__STATIC_INLINE void BUS_RegBitWrite(volatile uint32_t *addr,
                                     unsigned int bit,
                                     unsigned int val)
{
     624:	b086      	sub	sp, #24
     626:	9003      	str	r0, [sp, #12]
     628:	9102      	str	r1, [sp, #8]
     62a:	9201      	str	r2, [sp, #4]
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
#else
  uint32_t tmp = *addr;
     62c:	9b03      	ldr	r3, [sp, #12]
     62e:	681b      	ldr	r3, [r3, #0]
     630:	9305      	str	r3, [sp, #20]

  /* Make sure val is not more than 1, because we only want to set one bit. */
  *addr = (tmp & ~(1 << bit)) | ((val & 1) << bit);
     632:	2201      	movs	r2, #1
     634:	9b02      	ldr	r3, [sp, #8]
     636:	409a      	lsls	r2, r3
     638:	0013      	movs	r3, r2
     63a:	43db      	mvns	r3, r3
     63c:	001a      	movs	r2, r3
     63e:	9b05      	ldr	r3, [sp, #20]
     640:	401a      	ands	r2, r3
     642:	9b01      	ldr	r3, [sp, #4]
     644:	2101      	movs	r1, #1
     646:	4019      	ands	r1, r3
     648:	9b02      	ldr	r3, [sp, #8]
     64a:	4099      	lsls	r1, r3
     64c:	000b      	movs	r3, r1
     64e:	431a      	orrs	r2, r3
     650:	9b03      	ldr	r3, [sp, #12]
     652:	601a      	str	r2, [r3, #0]
#endif
}
     654:	46c0      	nop			; (mov r8, r8)
     656:	b006      	add	sp, #24
     658:	4770      	bx	lr
	...

0000065c <SYSTEM_GetProdRev>:
  return (DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
     65c:	4b02      	ldr	r3, [pc, #8]	; (668 <SYSTEM_GetProdRev+0xc>)
     65e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
         >> _DEVINFO_PART_PROD_REV_SHIFT;
     660:	0e1b      	lsrs	r3, r3, #24
     662:	b2db      	uxtb	r3, r3
}
     664:	0018      	movs	r0, r3
     666:	4770      	bx	lr
     668:	0fe081b0 	.word	0x0fe081b0

0000066c <auxClkGet>:
 *
 * @return
 *   AUX Frequency in Hz
 ******************************************************************************/
static uint32_t auxClkGet(void)
{
     66c:	b500      	push	{lr}
     66e:	b083      	sub	sp, #12
#if defined(_CMU_AUXHFRCOCTRL_FREQRANGE_MASK)
  ret = auxHfrcoFreq;

#elif defined(_CMU_AUXHFRCOCTRL_BAND_MASK)
  /* All series 0 families except EFM32G */
  switch (CMU->AUXHFRCOCTRL & _CMU_AUXHFRCOCTRL_BAND_MASK) {
     670:	4b21      	ldr	r3, [pc, #132]	; (6f8 <auxClkGet+0x8c>)
     672:	695a      	ldr	r2, [r3, #20]
     674:	23e0      	movs	r3, #224	; 0xe0
     676:	00db      	lsls	r3, r3, #3
     678:	4013      	ands	r3, r2
     67a:	2280      	movs	r2, #128	; 0x80
     67c:	0092      	lsls	r2, r2, #2
     67e:	4293      	cmp	r3, r2
     680:	d01e      	beq.n	6c0 <auxClkGet+0x54>
     682:	2280      	movs	r2, #128	; 0x80
     684:	0092      	lsls	r2, r2, #2
     686:	4293      	cmp	r3, r2
     688:	d806      	bhi.n	698 <auxClkGet+0x2c>
     68a:	2b00      	cmp	r3, #0
     68c:	d026      	beq.n	6dc <auxClkGet+0x70>
     68e:	2280      	movs	r2, #128	; 0x80
     690:	0052      	lsls	r2, r2, #1
     692:	4293      	cmp	r3, r2
     694:	d01f      	beq.n	6d6 <auxClkGet+0x6a>
     696:	e027      	b.n	6e8 <auxClkGet+0x7c>
     698:	22c0      	movs	r2, #192	; 0xc0
     69a:	0092      	lsls	r2, r2, #2
     69c:	4293      	cmp	r3, r2
     69e:	d004      	beq.n	6aa <auxClkGet+0x3e>
     6a0:	22e0      	movs	r2, #224	; 0xe0
     6a2:	00d2      	lsls	r2, r2, #3
     6a4:	4293      	cmp	r3, r2
     6a6:	d01c      	beq.n	6e2 <auxClkGet+0x76>
     6a8:	e01e      	b.n	6e8 <auxClkGet+0x7c>
    case CMU_AUXHFRCOCTRL_BAND_1MHZ:
      if ( SYSTEM_GetProdRev() >= 19 ) {
     6aa:	f7ff ffd7 	bl	65c <SYSTEM_GetProdRev>
     6ae:	0003      	movs	r3, r0
     6b0:	2b12      	cmp	r3, #18
     6b2:	d902      	bls.n	6ba <auxClkGet+0x4e>
        ret = 1200000;
     6b4:	4b11      	ldr	r3, [pc, #68]	; (6fc <auxClkGet+0x90>)
     6b6:	9301      	str	r3, [sp, #4]
      } else {
        ret = 1000000;
      }
      break;
     6b8:	e019      	b.n	6ee <auxClkGet+0x82>
        ret = 1000000;
     6ba:	4b11      	ldr	r3, [pc, #68]	; (700 <auxClkGet+0x94>)
     6bc:	9301      	str	r3, [sp, #4]
      break;
     6be:	e016      	b.n	6ee <auxClkGet+0x82>

    case CMU_AUXHFRCOCTRL_BAND_7MHZ:
      if ( SYSTEM_GetProdRev() >= 19 ) {
     6c0:	f7ff ffcc 	bl	65c <SYSTEM_GetProdRev>
     6c4:	0003      	movs	r3, r0
     6c6:	2b12      	cmp	r3, #18
     6c8:	d902      	bls.n	6d0 <auxClkGet+0x64>
        ret = 6600000;
     6ca:	4b0e      	ldr	r3, [pc, #56]	; (704 <auxClkGet+0x98>)
     6cc:	9301      	str	r3, [sp, #4]
      } else {
        ret = 7000000;
      }
      break;
     6ce:	e00e      	b.n	6ee <auxClkGet+0x82>
        ret = 7000000;
     6d0:	4b0d      	ldr	r3, [pc, #52]	; (708 <auxClkGet+0x9c>)
     6d2:	9301      	str	r3, [sp, #4]
      break;
     6d4:	e00b      	b.n	6ee <auxClkGet+0x82>

    case CMU_AUXHFRCOCTRL_BAND_11MHZ:
      ret = 11000000;
     6d6:	4b0d      	ldr	r3, [pc, #52]	; (70c <auxClkGet+0xa0>)
     6d8:	9301      	str	r3, [sp, #4]
      break;
     6da:	e008      	b.n	6ee <auxClkGet+0x82>

    case CMU_AUXHFRCOCTRL_BAND_14MHZ:
      ret = 14000000;
     6dc:	4b0c      	ldr	r3, [pc, #48]	; (710 <auxClkGet+0xa4>)
     6de:	9301      	str	r3, [sp, #4]
      break;
     6e0:	e005      	b.n	6ee <auxClkGet+0x82>

    case CMU_AUXHFRCOCTRL_BAND_21MHZ:
      ret = 21000000;
     6e2:	4b0c      	ldr	r3, [pc, #48]	; (714 <auxClkGet+0xa8>)
     6e4:	9301      	str	r3, [sp, #4]
      break;
     6e6:	e002      	b.n	6ee <auxClkGet+0x82>
      break;
#endif

    default:
      EFM_ASSERT(0);
      ret = 0;
     6e8:	2300      	movs	r3, #0
     6ea:	9301      	str	r3, [sp, #4]
      break;
     6ec:	46c0      	nop			; (mov r8, r8)
  /* Gecko has a fixed 14Mhz AUXHFRCO clock */
  ret = 14000000;

#endif

  return ret;
     6ee:	9b01      	ldr	r3, [sp, #4]
}
     6f0:	0018      	movs	r0, r3
     6f2:	b003      	add	sp, #12
     6f4:	bd00      	pop	{pc}
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	400c8000 	.word	0x400c8000
     6fc:	00124f80 	.word	0x00124f80
     700:	000f4240 	.word	0x000f4240
     704:	0064b540 	.word	0x0064b540
     708:	006acfc0 	.word	0x006acfc0
     70c:	00a7d8c0 	.word	0x00a7d8c0
     710:	00d59f80 	.word	0x00d59f80
     714:	01406f40 	.word	0x01406f40

00000718 <dbgClkGet>:
 *
 * @return
 *   Debug Trace frequency in Hz
 ******************************************************************************/
static uint32_t dbgClkGet(void)
{
     718:	b510      	push	{r4, lr}
     71a:	b082      	sub	sp, #8
  uint32_t ret;
  CMU_Select_TypeDef clk;

  /* Get selected clock source */
  clk = CMU_ClockSelectGet(cmuClock_DBG);
     71c:	466b      	mov	r3, sp
     71e:	1cdc      	adds	r4, r3, #3
     720:	4b0e      	ldr	r3, [pc, #56]	; (75c <dbgClkGet+0x44>)
     722:	0018      	movs	r0, r3
     724:	f000 f9d6 	bl	ad4 <CMU_ClockSelectGet>
     728:	0003      	movs	r3, r0
     72a:	7023      	strb	r3, [r4, #0]

  switch (clk) {
     72c:	466b      	mov	r3, sp
     72e:	3303      	adds	r3, #3
     730:	781b      	ldrb	r3, [r3, #0]
     732:	2b07      	cmp	r3, #7
     734:	d006      	beq.n	744 <dbgClkGet+0x2c>
     736:	2b09      	cmp	r3, #9
     738:	d109      	bne.n	74e <dbgClkGet+0x36>
    case cmuSelect_HFCLK:
      ret = SystemHFClockGet();
     73a:	f7ff fee7 	bl	50c <SystemHFClockGet>
     73e:	0003      	movs	r3, r0
     740:	9301      	str	r3, [sp, #4]
      break;
     742:	e007      	b.n	754 <dbgClkGet+0x3c>

    case cmuSelect_AUXHFRCO:
      ret = auxClkGet();
     744:	f7ff ff92 	bl	66c <auxClkGet>
     748:	0003      	movs	r3, r0
     74a:	9301      	str	r3, [sp, #4]
      break;
     74c:	e002      	b.n	754 <dbgClkGet+0x3c>

    default:
      EFM_ASSERT(0);
      ret = 0;
     74e:	2300      	movs	r3, #0
     750:	9301      	str	r3, [sp, #4]
      break;
     752:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
     754:	9b01      	ldr	r3, [sp, #4]
}
     756:	0018      	movs	r0, r3
     758:	b002      	add	sp, #8
     75a:	bd10      	pop	{r4, pc}
     75c:	000c0006 	.word	0x000c0006

00000760 <lfClkGet>:
 * @return
 *   The LFnCLK frequency in Hz. If no LFnCLK is selected (disabled), 0 is
 *   returned.
 ******************************************************************************/
static uint32_t lfClkGet(CMU_Clock_TypeDef lfClkBranch)
{
     760:	b500      	push	{lr}
     762:	b085      	sub	sp, #20
     764:	9001      	str	r0, [sp, #4]
  uint32_t sel;
  uint32_t ret = 0;
     766:	2300      	movs	r3, #0
     768:	9302      	str	r3, [sp, #8]

  switch (lfClkBranch) {
     76a:	9b01      	ldr	r3, [sp, #4]
     76c:	4a35      	ldr	r2, [pc, #212]	; (844 <lfClkGet+0xe4>)
     76e:	4293      	cmp	r3, r2
     770:	d006      	beq.n	780 <lfClkGet+0x20>
     772:	4a35      	ldr	r2, [pc, #212]	; (848 <lfClkGet+0xe8>)
     774:	4293      	cmp	r3, r2
     776:	d003      	beq.n	780 <lfClkGet+0x20>
     778:	4a34      	ldr	r2, [pc, #208]	; (84c <lfClkGet+0xec>)
     77a:	4293      	cmp	r3, r2
     77c:	d000      	beq.n	780 <lfClkGet+0x20>
#endif
      break;

    default:
      EFM_ASSERT(0);
      break;
     77e:	e000      	b.n	782 <lfClkGet+0x22>
      break;
     780:	46c0      	nop			; (mov r8, r8)
  }

  sel = CMU_ClockSelectGet(lfClkBranch);
     782:	9b01      	ldr	r3, [sp, #4]
     784:	0018      	movs	r0, r3
     786:	f000 f9a5 	bl	ad4 <CMU_ClockSelectGet>
     78a:	0003      	movs	r3, r0
     78c:	9303      	str	r3, [sp, #12]

  /* Get clock select field */
  switch (lfClkBranch) {
     78e:	9b01      	ldr	r3, [sp, #4]
     790:	4a2c      	ldr	r2, [pc, #176]	; (844 <lfClkGet+0xe4>)
     792:	4293      	cmp	r3, r2
     794:	d00c      	beq.n	7b0 <lfClkGet+0x50>
     796:	4a2c      	ldr	r2, [pc, #176]	; (848 <lfClkGet+0xe8>)
     798:	4293      	cmp	r3, r2
     79a:	d010      	beq.n	7be <lfClkGet+0x5e>
     79c:	4a2b      	ldr	r2, [pc, #172]	; (84c <lfClkGet+0xec>)
     79e:	4293      	cmp	r3, r2
     7a0:	d000      	beq.n	7a4 <lfClkGet+0x44>
      break;
#endif

    default:
      EFM_ASSERT(0);
      break;
     7a2:	e013      	b.n	7cc <lfClkGet+0x6c>
      sel = (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFA_MASK) >> _CMU_LFCLKSEL_LFA_SHIFT;
     7a4:	4b2a      	ldr	r3, [pc, #168]	; (850 <lfClkGet+0xf0>)
     7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     7a8:	2203      	movs	r2, #3
     7aa:	4013      	ands	r3, r2
     7ac:	9303      	str	r3, [sp, #12]
      break;
     7ae:	e00d      	b.n	7cc <lfClkGet+0x6c>
      sel = (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFB_MASK) >> _CMU_LFCLKSEL_LFB_SHIFT;
     7b0:	4b27      	ldr	r3, [pc, #156]	; (850 <lfClkGet+0xf0>)
     7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     7b4:	089b      	lsrs	r3, r3, #2
     7b6:	2203      	movs	r2, #3
     7b8:	4013      	ands	r3, r2
     7ba:	9303      	str	r3, [sp, #12]
      break;
     7bc:	e006      	b.n	7cc <lfClkGet+0x6c>
      sel = (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFC_MASK) >> _CMU_LFCLKSEL_LFC_SHIFT;
     7be:	4b24      	ldr	r3, [pc, #144]	; (850 <lfClkGet+0xf0>)
     7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     7c2:	091b      	lsrs	r3, r3, #4
     7c4:	2203      	movs	r2, #3
     7c6:	4013      	ands	r3, r2
     7c8:	9303      	str	r3, [sp, #12]
      break;
     7ca:	46c0      	nop			; (mov r8, r8)
  }

  /* Get clock frequency */
#if defined(_CMU_LFCLKSEL_MASK)
  switch (sel) {
     7cc:	9b03      	ldr	r3, [sp, #12]
     7ce:	2b01      	cmp	r3, #1
     7d0:	d005      	beq.n	7de <lfClkGet+0x7e>
     7d2:	d314      	bcc.n	7fe <lfClkGet+0x9e>
     7d4:	2b02      	cmp	r3, #2
     7d6:	d007      	beq.n	7e8 <lfClkGet+0x88>
     7d8:	2b03      	cmp	r3, #3
     7da:	d00a      	beq.n	7f2 <lfClkGet+0x92>
     7dc:	e02a      	b.n	834 <lfClkGet+0xd4>
    case _CMU_LFCLKSEL_LFA_LFRCO:
      ret = SystemLFRCOClockGet();
     7de:	f7ff ff13 	bl	608 <SystemLFRCOClockGet>
     7e2:	0003      	movs	r3, r0
     7e4:	9302      	str	r3, [sp, #8]
      break;
     7e6:	e029      	b.n	83c <lfClkGet+0xdc>

    case _CMU_LFCLKSEL_LFA_LFXO:
      ret = SystemLFXOClockGet();
     7e8:	f7ff ff16 	bl	618 <SystemLFXOClockGet>
     7ec:	0003      	movs	r3, r0
     7ee:	9302      	str	r3, [sp, #8]
      break;
     7f0:	e024      	b.n	83c <lfClkGet+0xdc>
#if defined(CMU_MAX_FREQ_HFLE)
      /* HFLE bit is or'ed by hardware with HFCORECLKLEDIV to reduce the
       * frequency of CMU_HFCORECLKLEDIV2. */
      ret = SystemCoreClockGet() / (1U << (getHfLeConfig() + 1));
#else
      ret = SystemCoreClockGet() / 2U;
     7f2:	f7ff fe71 	bl	4d8 <SystemCoreClockGet>
     7f6:	0003      	movs	r3, r0
     7f8:	085b      	lsrs	r3, r3, #1
     7fa:	9302      	str	r3, [sp, #8]
#endif
      break;
     7fc:	e01e      	b.n	83c <lfClkGet+0xdc>
#endif

    case _CMU_LFCLKSEL_LFA_DISABLED:
      ret = 0;
     7fe:	2300      	movs	r3, #0
     800:	9302      	str	r3, [sp, #8]
#if defined(CMU_LFCLKSEL_LFAE)
      /* Check LF Extended bit setting for LFA or LFB ULFRCO clock */
      if ((lfClkBranch == cmuClock_LFA) || (lfClkBranch == cmuClock_LFB)) {
     802:	9b01      	ldr	r3, [sp, #4]
     804:	4a11      	ldr	r2, [pc, #68]	; (84c <lfClkGet+0xec>)
     806:	4293      	cmp	r3, r2
     808:	d003      	beq.n	812 <lfClkGet+0xb2>
     80a:	9b01      	ldr	r3, [sp, #4]
     80c:	4a0d      	ldr	r2, [pc, #52]	; (844 <lfClkGet+0xe4>)
     80e:	4293      	cmp	r3, r2
     810:	d113      	bne.n	83a <lfClkGet+0xda>
        if (CMU->LFCLKSEL >> (lfClkBranch == cmuClock_LFA
     812:	4b0f      	ldr	r3, [pc, #60]	; (850 <lfClkGet+0xf0>)
     814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                              ? _CMU_LFCLKSEL_LFAE_SHIFT
                              : _CMU_LFCLKSEL_LFBE_SHIFT)) {
     816:	9b01      	ldr	r3, [sp, #4]
     818:	490c      	ldr	r1, [pc, #48]	; (84c <lfClkGet+0xec>)
     81a:	428b      	cmp	r3, r1
     81c:	d101      	bne.n	822 <lfClkGet+0xc2>
     81e:	2310      	movs	r3, #16
     820:	e000      	b.n	824 <lfClkGet+0xc4>
     822:	2314      	movs	r3, #20
        if (CMU->LFCLKSEL >> (lfClkBranch == cmuClock_LFA
     824:	40da      	lsrs	r2, r3
     826:	1e13      	subs	r3, r2, #0
     828:	d007      	beq.n	83a <lfClkGet+0xda>
          ret = SystemULFRCOClockGet();
     82a:	f7ff fef1 	bl	610 <SystemULFRCOClockGet>
     82e:	0003      	movs	r3, r0
     830:	9302      	str	r3, [sp, #8]
        }
      }
#endif
      break;
     832:	e002      	b.n	83a <lfClkGet+0xda>

    default:
      EFM_ASSERT(0);
      ret = 0U;
     834:	2300      	movs	r3, #0
     836:	9302      	str	r3, [sp, #8]
      break;
     838:	e000      	b.n	83c <lfClkGet+0xdc>
      break;
     83a:	46c0      	nop			; (mov r8, r8)
      ret = 0;
      break;
  }
#endif

  return ret;
     83c:	9b02      	ldr	r3, [sp, #8]
}
     83e:	0018      	movs	r0, r3
     840:	b005      	add	sp, #20
     842:	bd00      	pop	{pc}
     844:	001c0003 	.word	0x001c0003
     848:	001e0004 	.word	0x001e0004
     84c:	001a0002 	.word	0x001a0002
     850:	400c8000 	.word	0x400c8000

00000854 <syncReg>:
 * @param[in] mask
 *   Bitmask corresponding to SYNCBUSY register defined bits, indicating
 *   registers that must complete any ongoing synchronization.
 ******************************************************************************/
__STATIC_INLINE void syncReg(uint32_t mask)
{
     854:	b082      	sub	sp, #8
     856:	9001      	str	r0, [sp, #4]
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (CMU->FREEZE & CMU_FREEZE_REGFREEZE) {
     858:	4b07      	ldr	r3, [pc, #28]	; (878 <syncReg+0x24>)
     85a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     85c:	2201      	movs	r2, #1
     85e:	4013      	ands	r3, r2
     860:	d106      	bne.n	870 <syncReg+0x1c>
    return;
  }

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain */
  while (CMU->SYNCBUSY & mask) {
     862:	46c0      	nop			; (mov r8, r8)
     864:	4b04      	ldr	r3, [pc, #16]	; (878 <syncReg+0x24>)
     866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     868:	9a01      	ldr	r2, [sp, #4]
     86a:	4013      	ands	r3, r2
     86c:	d1fa      	bne.n	864 <syncReg+0x10>
     86e:	e000      	b.n	872 <syncReg+0x1e>
    return;
     870:	46c0      	nop			; (mov r8, r8)
  }
}
     872:	b002      	add	sp, #8
     874:	4770      	bx	lr
     876:	46c0      	nop			; (mov r8, r8)
     878:	400c8000 	.word	0x400c8000

0000087c <usbCClkGet>:
 *
 * @return
 *   USBC frequency in Hz
 ******************************************************************************/
static uint32_t usbCClkGet(void)
{
     87c:	b510      	push	{r4, lr}
     87e:	b082      	sub	sp, #8
  uint32_t ret;
  CMU_Select_TypeDef clk;

  /* Get selected clock source */
  clk = CMU_ClockSelectGet(cmuClock_USBC);
     880:	466b      	mov	r3, sp
     882:	1cdc      	adds	r4, r3, #3
     884:	4b16      	ldr	r3, [pc, #88]	; (8e0 <usbCClkGet+0x64>)
     886:	0018      	movs	r0, r3
     888:	f000 f924 	bl	ad4 <CMU_ClockSelectGet>
     88c:	0003      	movs	r3, r0
     88e:	7023      	strb	r3, [r4, #0]

  switch (clk) {
     890:	466b      	mov	r3, sp
     892:	3303      	adds	r3, #3
     894:	781b      	ldrb	r3, [r3, #0]
     896:	2b03      	cmp	r3, #3
     898:	d00d      	beq.n	8b6 <usbCClkGet+0x3a>
     89a:	dc02      	bgt.n	8a2 <usbCClkGet+0x26>
     89c:	2b02      	cmp	r3, #2
     89e:	d005      	beq.n	8ac <usbCClkGet+0x30>
     8a0:	e017      	b.n	8d2 <usbCClkGet+0x56>
     8a2:	2b09      	cmp	r3, #9
     8a4:	d010      	beq.n	8c8 <usbCClkGet+0x4c>
     8a6:	2b0a      	cmp	r3, #10
     8a8:	d00a      	beq.n	8c0 <usbCClkGet+0x44>
     8aa:	e012      	b.n	8d2 <usbCClkGet+0x56>
    case cmuSelect_LFXO:
      ret = SystemLFXOClockGet();
     8ac:	f7ff feb4 	bl	618 <SystemLFXOClockGet>
     8b0:	0003      	movs	r3, r0
     8b2:	9301      	str	r3, [sp, #4]
      break;
     8b4:	e010      	b.n	8d8 <usbCClkGet+0x5c>
    case cmuSelect_LFRCO:
      ret = SystemLFRCOClockGet();
     8b6:	f7ff fea7 	bl	608 <SystemLFRCOClockGet>
     8ba:	0003      	movs	r3, r0
     8bc:	9301      	str	r3, [sp, #4]
      break;
     8be:	e00b      	b.n	8d8 <usbCClkGet+0x5c>
#if defined (_CMU_USHFRCOCTRL_MASK)
    case cmuSelect_USHFRCO:
      ret = ushfrcoFreq;
     8c0:	4b08      	ldr	r3, [pc, #32]	; (8e4 <usbCClkGet+0x68>)
     8c2:	681b      	ldr	r3, [r3, #0]
     8c4:	9301      	str	r3, [sp, #4]
      break;
     8c6:	e007      	b.n	8d8 <usbCClkGet+0x5c>
#endif
    case cmuSelect_HFCLK:
      ret = SystemHFClockGet();
     8c8:	f7ff fe20 	bl	50c <SystemHFClockGet>
     8cc:	0003      	movs	r3, r0
     8ce:	9301      	str	r3, [sp, #4]
      break;
     8d0:	e002      	b.n	8d8 <usbCClkGet+0x5c>
    default:
      /* Clock is not enabled */
      ret = 0;
     8d2:	2300      	movs	r3, #0
     8d4:	9301      	str	r3, [sp, #4]
      break;
     8d6:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
     8d8:	9b01      	ldr	r3, [sp, #4]
}
     8da:	0018      	movs	r0, r3
     8dc:	b002      	add	sp, #8
     8de:	bd10      	pop	{r4, pc}
     8e0:	00223307 	.word	0x00223307
     8e4:	2000000c 	.word	0x2000000c

000008e8 <CMU_ClockEnable>:
 * @param[in] enable
 *   @li true - enable specified clock.
 *   @li false - disable specified clock.
 ******************************************************************************/
void CMU_ClockEnable(CMU_Clock_TypeDef clock, bool enable)
{
     8e8:	b500      	push	{lr}
     8ea:	b087      	sub	sp, #28
     8ec:	9001      	str	r0, [sp, #4]
     8ee:	000a      	movs	r2, r1
     8f0:	466b      	mov	r3, sp
     8f2:	3303      	adds	r3, #3
     8f4:	701a      	strb	r2, [r3, #0]
  volatile uint32_t *reg;
  uint32_t          bit;
  uint32_t          sync = 0;
     8f6:	2300      	movs	r3, #0
     8f8:	9304      	str	r3, [sp, #16]

  /* Identify enable register */
  switch ((clock >> CMU_EN_REG_POS) & CMU_EN_REG_MASK) {
     8fa:	9b01      	ldr	r3, [sp, #4]
     8fc:	0a1b      	lsrs	r3, r3, #8
     8fe:	220f      	movs	r2, #15
     900:	4013      	ands	r3, r2
     902:	2b0a      	cmp	r3, #10
     904:	d835      	bhi.n	972 <CMU_ClockEnable+0x8a>
     906:	009a      	lsls	r2, r3, #2
     908:	4b1b      	ldr	r3, [pc, #108]	; (978 <CMU_ClockEnable+0x90>)
     90a:	18d3      	adds	r3, r2, r3
     90c:	681b      	ldr	r3, [r3, #0]
     90e:	469f      	mov	pc, r3
      break;
#endif

#if defined(_CMU_HFCORECLKEN0_MASK)
    case CMU_HFCORECLKEN0_EN_REG:
      reg = &CMU->HFCORECLKEN0;
     910:	4b1a      	ldr	r3, [pc, #104]	; (97c <CMU_ClockEnable+0x94>)
     912:	9305      	str	r3, [sp, #20]
#if defined(CMU_MAX_FREQ_HFLE)
      setHfLeConfig(CMU_ClockFreqGet(cmuClock_HFLE));
#endif
      break;
     914:	e018      	b.n	948 <CMU_ClockEnable+0x60>
      break;
#endif

#if defined(_CMU_HFPERCLKDIV_MASK)
    case CMU_HFPERCLKDIV_EN_REG:
      reg = &CMU->HFPERCLKDIV;
     916:	4b1a      	ldr	r3, [pc, #104]	; (980 <CMU_ClockEnable+0x98>)
     918:	9305      	str	r3, [sp, #20]
      break;
     91a:	e015      	b.n	948 <CMU_ClockEnable+0x60>
#endif

    case CMU_HFPERCLKEN0_EN_REG:
      reg = &CMU->HFPERCLKEN0;
     91c:	4b19      	ldr	r3, [pc, #100]	; (984 <CMU_ClockEnable+0x9c>)
     91e:	9305      	str	r3, [sp, #20]
      break;
     920:	e012      	b.n	948 <CMU_ClockEnable+0x60>
      reg = &CMU->HFPERCLKEN1;
      break;
#endif

    case CMU_LFACLKEN0_EN_REG:
      reg  = &CMU->LFACLKEN0;
     922:	4b19      	ldr	r3, [pc, #100]	; (988 <CMU_ClockEnable+0xa0>)
     924:	9305      	str	r3, [sp, #20]
      sync = CMU_SYNCBUSY_LFACLKEN0;
     926:	2301      	movs	r3, #1
     928:	9304      	str	r3, [sp, #16]
      break;
     92a:	e00d      	b.n	948 <CMU_ClockEnable+0x60>

    case CMU_LFBCLKEN0_EN_REG:
      reg  = &CMU->LFBCLKEN0;
     92c:	4b17      	ldr	r3, [pc, #92]	; (98c <CMU_ClockEnable+0xa4>)
     92e:	9305      	str	r3, [sp, #20]
      sync = CMU_SYNCBUSY_LFBCLKEN0;
     930:	2310      	movs	r3, #16
     932:	9304      	str	r3, [sp, #16]
      break;
     934:	e008      	b.n	948 <CMU_ClockEnable+0x60>

#if defined(_CMU_LFCCLKEN0_MASK)
    case CMU_LFCCLKEN0_EN_REG:
      reg = &CMU->LFCCLKEN0;
     936:	4b16      	ldr	r3, [pc, #88]	; (990 <CMU_ClockEnable+0xa8>)
     938:	9305      	str	r3, [sp, #20]
      sync = CMU_SYNCBUSY_LFCCLKEN0;
     93a:	2380      	movs	r3, #128	; 0x80
     93c:	005b      	lsls	r3, r3, #1
     93e:	9304      	str	r3, [sp, #16]
      break;
     940:	e002      	b.n	948 <CMU_ClockEnable+0x60>
      reg = &CMU->USBCTRL;
      break;
#endif

    case CMU_PCNT_EN_REG:
      reg = &CMU->PCNTCTRL;
     942:	4b14      	ldr	r3, [pc, #80]	; (994 <CMU_ClockEnable+0xac>)
     944:	9305      	str	r3, [sp, #20]
      break;
     946:	46c0      	nop			; (mov r8, r8)
      EFM_ASSERT(0);
      return;
  }

  /* Get bit position used to enable/disable */
  bit = (clock >> CMU_EN_BIT_POS) & CMU_EN_BIT_MASK;
     948:	9b01      	ldr	r3, [sp, #4]
     94a:	0b1b      	lsrs	r3, r3, #12
     94c:	221f      	movs	r2, #31
     94e:	4013      	ands	r3, r2
     950:	9303      	str	r3, [sp, #12]

  /* LF synchronization required? */
  if (sync) {
     952:	9b04      	ldr	r3, [sp, #16]
     954:	2b00      	cmp	r3, #0
     956:	d003      	beq.n	960 <CMU_ClockEnable+0x78>
    syncReg(sync);
     958:	9b04      	ldr	r3, [sp, #16]
     95a:	0018      	movs	r0, r3
     95c:	f7ff ff7a 	bl	854 <syncReg>
  }

  /* Set/clear bit as requested */
  BUS_RegBitWrite(reg, bit, enable);
     960:	466b      	mov	r3, sp
     962:	3303      	adds	r3, #3
     964:	781a      	ldrb	r2, [r3, #0]
     966:	9903      	ldr	r1, [sp, #12]
     968:	9b05      	ldr	r3, [sp, #20]
     96a:	0018      	movs	r0, r3
     96c:	f7ff fe5a 	bl	624 <BUS_RegBitWrite>
     970:	e000      	b.n	974 <CMU_ClockEnable+0x8c>
      return;
     972:	46c0      	nop			; (mov r8, r8)
}
     974:	b007      	add	sp, #28
     976:	bd00      	pop	{pc}
     978:	00002cd8 	.word	0x00002cd8
     97c:	400c8040 	.word	0x400c8040
     980:	400c8008 	.word	0x400c8008
     984:	400c8044 	.word	0x400c8044
     988:	400c8058 	.word	0x400c8058
     98c:	400c8060 	.word	0x400c8060
     990:	400c8064 	.word	0x400c8064
     994:	400c8078 	.word	0x400c8078

00000998 <CMU_ClockFreqGet>:
 *
 * @return
 *   The current frequency in Hz.
 ******************************************************************************/
uint32_t CMU_ClockFreqGet(CMU_Clock_TypeDef clock)
{
     998:	b500      	push	{lr}
     99a:	b085      	sub	sp, #20
     99c:	9001      	str	r0, [sp, #4]
  uint32_t ret;

  switch (clock & (CMU_CLK_BRANCH_MASK << CMU_CLK_BRANCH_POS)) {
     99e:	9a01      	ldr	r2, [sp, #4]
     9a0:	23f8      	movs	r3, #248	; 0xf8
     9a2:	039b      	lsls	r3, r3, #14
     9a4:	4013      	ands	r3, r2
     9a6:	22e0      	movs	r2, #224	; 0xe0
     9a8:	0312      	lsls	r2, r2, #12
     9aa:	4293      	cmp	r3, r2
     9ac:	d100      	bne.n	9b0 <CMU_ClockFreqGet+0x18>
     9ae:	e079      	b.n	aa4 <CMU_ClockFreqGet+0x10c>
     9b0:	22e0      	movs	r2, #224	; 0xe0
     9b2:	0312      	lsls	r2, r2, #12
     9b4:	4293      	cmp	r3, r2
     9b6:	d813      	bhi.n	9e0 <CMU_ClockFreqGet+0x48>
     9b8:	2280      	movs	r2, #128	; 0x80
     9ba:	0292      	lsls	r2, r2, #10
     9bc:	4293      	cmp	r3, r2
     9be:	d03b      	beq.n	a38 <CMU_ClockFreqGet+0xa0>
     9c0:	2280      	movs	r2, #128	; 0x80
     9c2:	0292      	lsls	r2, r2, #10
     9c4:	4293      	cmp	r3, r2
     9c6:	d802      	bhi.n	9ce <CMU_ClockFreqGet+0x36>
     9c8:	2b00      	cmp	r3, #0
     9ca:	d023      	beq.n	a14 <CMU_ClockFreqGet+0x7c>
     9cc:	e074      	b.n	ab8 <CMU_ClockFreqGet+0x120>
     9ce:	2280      	movs	r2, #128	; 0x80
     9d0:	02d2      	lsls	r2, r2, #11
     9d2:	4293      	cmp	r3, r2
     9d4:	d023      	beq.n	a1e <CMU_ClockFreqGet+0x86>
     9d6:	22c0      	movs	r2, #192	; 0xc0
     9d8:	0312      	lsls	r2, r2, #12
     9da:	4293      	cmp	r3, r2
     9dc:	d05d      	beq.n	a9a <CMU_ClockFreqGet+0x102>
     9de:	e06b      	b.n	ab8 <CMU_ClockFreqGet+0x120>
     9e0:	22d0      	movs	r2, #208	; 0xd0
     9e2:	0352      	lsls	r2, r2, #13
     9e4:	4293      	cmp	r3, r2
     9e6:	d02c      	beq.n	a42 <CMU_ClockFreqGet+0xaa>
     9e8:	22d0      	movs	r2, #208	; 0xd0
     9ea:	0352      	lsls	r2, r2, #13
     9ec:	4293      	cmp	r3, r2
     9ee:	d808      	bhi.n	a02 <CMU_ClockFreqGet+0x6a>
     9f0:	2280      	movs	r2, #128	; 0x80
     9f2:	0352      	lsls	r2, r2, #13
     9f4:	4293      	cmp	r3, r2
     9f6:	d02b      	beq.n	a50 <CMU_ClockFreqGet+0xb8>
     9f8:	22b0      	movs	r2, #176	; 0xb0
     9fa:	0352      	lsls	r2, r2, #13
     9fc:	4293      	cmp	r3, r2
     9fe:	d03d      	beq.n	a7c <CMU_ClockFreqGet+0xe4>
     a00:	e05a      	b.n	ab8 <CMU_ClockFreqGet+0x120>
     a02:	22e0      	movs	r2, #224	; 0xe0
     a04:	0352      	lsls	r2, r2, #13
     a06:	4293      	cmp	r3, r2
     a08:	d031      	beq.n	a6e <CMU_ClockFreqGet+0xd6>
     a0a:	2288      	movs	r2, #136	; 0x88
     a0c:	0392      	lsls	r2, r2, #14
     a0e:	4293      	cmp	r3, r2
     a10:	d04d      	beq.n	aae <CMU_ClockFreqGet+0x116>
     a12:	e051      	b.n	ab8 <CMU_ClockFreqGet+0x120>
    case (CMU_HF_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = SystemHFClockGet();
     a14:	f7ff fd7a 	bl	50c <SystemHFClockGet>
     a18:	0003      	movs	r3, r0
     a1a:	9303      	str	r3, [sp, #12]
      break;
     a1c:	e04f      	b.n	abe <CMU_ClockFreqGet+0x126>

    case (CMU_HFPER_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = SystemHFClockGet();
     a1e:	f7ff fd75 	bl	50c <SystemHFClockGet>
     a22:	0003      	movs	r3, r0
     a24:	9303      	str	r3, [sp, #12]
      /* Calculate frequency after HFPER divider. */
#if defined(_CMU_HFPERCLKDIV_HFPERCLKDIV_MASK)
      ret >>= (CMU->HFPERCLKDIV & _CMU_HFPERCLKDIV_HFPERCLKDIV_MASK)
     a26:	4b28      	ldr	r3, [pc, #160]	; (ac8 <CMU_ClockFreqGet+0x130>)
     a28:	689b      	ldr	r3, [r3, #8]
              >> _CMU_HFPERCLKDIV_HFPERCLKDIV_SHIFT;
     a2a:	220f      	movs	r2, #15
     a2c:	4013      	ands	r3, r2
      ret >>= (CMU->HFPERCLKDIV & _CMU_HFPERCLKDIV_HFPERCLKDIV_MASK)
     a2e:	9a03      	ldr	r2, [sp, #12]
     a30:	40da      	lsrs	r2, r3
     a32:	0013      	movs	r3, r2
     a34:	9303      	str	r3, [sp, #12]
#endif
#if defined(_CMU_HFPERPRESC_PRESC_MASK)
      ret /= 1U + ((CMU->HFPERPRESC & _CMU_HFPERPRESC_PRESC_MASK)
                   >> _CMU_HFPERPRESC_PRESC_SHIFT);
#endif
      break;
     a36:	e042      	b.n	abe <CMU_ClockFreqGet+0x126>
      || defined(DMA_PRESENT) \
      || defined(EBI_PRESENT) \
      || defined(USB_PRESENT)
    case (CMU_HFCORE_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret = SystemCoreClockGet();
     a38:	f7ff fd4e 	bl	4d8 <SystemCoreClockGet>
     a3c:	0003      	movs	r3, r0
     a3e:	9303      	str	r3, [sp, #12]
    } break;
     a40:	e03d      	b.n	abe <CMU_ClockFreqGet+0x126>
#endif
#endif

    case (CMU_LFA_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
     a42:	4b22      	ldr	r3, [pc, #136]	; (acc <CMU_ClockFreqGet+0x134>)
     a44:	0018      	movs	r0, r3
     a46:	f7ff fe8b 	bl	760 <lfClkGet>
     a4a:	0003      	movs	r3, r0
     a4c:	9303      	str	r3, [sp, #12]
      break;
     a4e:	e036      	b.n	abe <CMU_ClockFreqGet+0x126>

#if defined(_CMU_LFACLKEN0_RTC_MASK)
    case (CMU_RTC_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
     a50:	4b1e      	ldr	r3, [pc, #120]	; (acc <CMU_ClockFreqGet+0x134>)
     a52:	0018      	movs	r0, r3
     a54:	f7ff fe84 	bl	760 <lfClkGet>
     a58:	0003      	movs	r3, r0
     a5a:	9303      	str	r3, [sp, #12]
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_RTC_MASK)
     a5c:	4b1a      	ldr	r3, [pc, #104]	; (ac8 <CMU_ClockFreqGet+0x130>)
     a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
              >> _CMU_LFAPRESC0_RTC_SHIFT;
     a60:	220f      	movs	r2, #15
     a62:	4013      	ands	r3, r2
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_RTC_MASK)
     a64:	9a03      	ldr	r2, [sp, #12]
     a66:	40da      	lsrs	r2, r3
     a68:	0013      	movs	r3, r2
     a6a:	9303      	str	r3, [sp, #12]
      break;
     a6c:	e027      	b.n	abe <CMU_ClockFreqGet+0x126>
              >> _CMU_LFAPRESC0_LESENSE_SHIFT;
      break;
#endif

    case (CMU_LFB_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFB);
     a6e:	4b18      	ldr	r3, [pc, #96]	; (ad0 <CMU_ClockFreqGet+0x138>)
     a70:	0018      	movs	r0, r3
     a72:	f7ff fe75 	bl	760 <lfClkGet>
     a76:	0003      	movs	r3, r0
     a78:	9303      	str	r3, [sp, #12]
      break;
     a7a:	e020      	b.n	abe <CMU_ClockFreqGet+0x126>

#if defined(_CMU_LFBCLKEN0_LEUART0_MASK)
    case (CMU_LEUART0_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFB);
     a7c:	4b14      	ldr	r3, [pc, #80]	; (ad0 <CMU_ClockFreqGet+0x138>)
     a7e:	0018      	movs	r0, r3
     a80:	f7ff fe6e 	bl	760 <lfClkGet>
     a84:	0003      	movs	r3, r0
     a86:	9303      	str	r3, [sp, #12]
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= (CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK)
     a88:	4b0f      	ldr	r3, [pc, #60]	; (ac8 <CMU_ClockFreqGet+0x130>)
     a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
              >> _CMU_LFBPRESC0_LEUART0_SHIFT;
     a8c:	2203      	movs	r2, #3
     a8e:	4013      	ands	r3, r2
      ret >>= (CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK)
     a90:	9a03      	ldr	r2, [sp, #12]
     a92:	40da      	lsrs	r2, r3
     a94:	0013      	movs	r3, r2
     a96:	9303      	str	r3, [sp, #12]
#else
      ret /= CMU_Log2ToDiv((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK)
                           >> _CMU_LFBPRESC0_LEUART0_SHIFT);
#endif
      break;
     a98:	e011      	b.n	abe <CMU_ClockFreqGet+0x126>
      ret = lfClkGet(cmuClock_LFE);
      break;
#endif

    case (CMU_DBG_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = dbgClkGet();
     a9a:	f7ff fe3d 	bl	718 <dbgClkGet>
     a9e:	0003      	movs	r3, r0
     aa0:	9303      	str	r3, [sp, #12]
      break;
     aa2:	e00c      	b.n	abe <CMU_ClockFreqGet+0x126>

    case (CMU_AUX_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = auxClkGet();
     aa4:	f7ff fde2 	bl	66c <auxClkGet>
     aa8:	0003      	movs	r3, r0
     aaa:	9303      	str	r3, [sp, #12]
      break;
     aac:	e007      	b.n	abe <CMU_ClockFreqGet+0x126>

#if defined(USBC_CLOCK_PRESENT)
    case (CMU_USBC_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = usbCClkGet();
     aae:	f7ff fee5 	bl	87c <usbCClkGet>
     ab2:	0003      	movs	r3, r0
     ab4:	9303      	str	r3, [sp, #12]
      break;
     ab6:	e002      	b.n	abe <CMU_ClockFreqGet+0x126>
      break;
#endif

    default:
      EFM_ASSERT(0);
      ret = 0;
     ab8:	2300      	movs	r3, #0
     aba:	9303      	str	r3, [sp, #12]
      break;
     abc:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
     abe:	9b03      	ldr	r3, [sp, #12]
}
     ac0:	0018      	movs	r0, r3
     ac2:	b005      	add	sp, #20
     ac4:	bd00      	pop	{pc}
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	400c8000 	.word	0x400c8000
     acc:	001a0002 	.word	0x001a0002
     ad0:	001c0003 	.word	0x001c0003

00000ad4 <CMU_ClockSelectGet>:
 * @return
 *   Reference clock used for clocking selected branch, #cmuSelect_Error if
 *   invalid @p clock provided.
 ******************************************************************************/
CMU_Select_TypeDef CMU_ClockSelectGet(CMU_Clock_TypeDef clock)
{
     ad4:	b084      	sub	sp, #16
     ad6:	9001      	str	r0, [sp, #4]
  CMU_Select_TypeDef ret = cmuSelect_Disabled;
     ad8:	230f      	movs	r3, #15
     ada:	446b      	add	r3, sp
     adc:	2201      	movs	r2, #1
     ade:	701a      	strb	r2, [r3, #0]
  uint32_t selReg;

  selReg = (clock >> CMU_SEL_REG_POS) & CMU_SEL_REG_MASK;
     ae0:	9b01      	ldr	r3, [sp, #4]
     ae2:	220f      	movs	r2, #15
     ae4:	4013      	ands	r3, r2
     ae6:	9302      	str	r3, [sp, #8]

  switch (selReg) {
     ae8:	9b02      	ldr	r3, [sp, #8]
     aea:	2b07      	cmp	r3, #7
     aec:	d900      	bls.n	af0 <CMU_ClockSelectGet+0x1c>
     aee:	e0ca      	b.n	c86 <CMU_ClockSelectGet+0x1b2>
     af0:	9b02      	ldr	r3, [sp, #8]
     af2:	009a      	lsls	r2, r3, #2
     af4:	4b69      	ldr	r3, [pc, #420]	; (c9c <CMU_ClockSelectGet+0x1c8>)
     af6:	18d3      	adds	r3, r2, r3
     af8:	681b      	ldr	r3, [r3, #0]
     afa:	469f      	mov	pc, r3
        default:
          ret = cmuSelect_HFRCO;
          break;
      }
#else
      switch (CMU->STATUS
     afc:	4b68      	ldr	r3, [pc, #416]	; (ca0 <CMU_ClockSelectGet+0x1cc>)
     afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              & (CMU_STATUS_HFRCOSEL
     b00:	4a68      	ldr	r2, [pc, #416]	; (ca4 <CMU_ClockSelectGet+0x1d0>)
     b02:	4013      	ands	r3, r2
      switch (CMU->STATUS
     b04:	2280      	movs	r2, #128	; 0x80
     b06:	0152      	lsls	r2, r2, #5
     b08:	4293      	cmp	r3, r2
     b0a:	d016      	beq.n	b3a <CMU_ClockSelectGet+0x66>
     b0c:	2280      	movs	r2, #128	; 0x80
     b0e:	0152      	lsls	r2, r2, #5
     b10:	4293      	cmp	r3, r2
     b12:	d804      	bhi.n	b1e <CMU_ClockSelectGet+0x4a>
     b14:	2280      	movs	r2, #128	; 0x80
     b16:	0112      	lsls	r2, r2, #4
     b18:	4293      	cmp	r3, r2
     b1a:	d013      	beq.n	b44 <CMU_ClockSelectGet+0x70>
     b1c:	e01c      	b.n	b58 <CMU_ClockSelectGet+0x84>
     b1e:	2280      	movs	r2, #128	; 0x80
     b20:	0192      	lsls	r2, r2, #6
     b22:	4293      	cmp	r3, r2
     b24:	d004      	beq.n	b30 <CMU_ClockSelectGet+0x5c>
     b26:	2280      	movs	r2, #128	; 0x80
     b28:	04d2      	lsls	r2, r2, #19
     b2a:	4293      	cmp	r3, r2
     b2c:	d00f      	beq.n	b4e <CMU_ClockSelectGet+0x7a>
     b2e:	e013      	b.n	b58 <CMU_ClockSelectGet+0x84>
#if defined(CMU_STATUS_USHFRCODIV2SEL)
                 | CMU_STATUS_USHFRCODIV2SEL
#endif
                 | CMU_STATUS_LFXOSEL)) {
        case CMU_STATUS_LFXOSEL:
          ret = cmuSelect_LFXO;
     b30:	230f      	movs	r3, #15
     b32:	446b      	add	r3, sp
     b34:	2202      	movs	r2, #2
     b36:	701a      	strb	r2, [r3, #0]
          break;
     b38:	e013      	b.n	b62 <CMU_ClockSelectGet+0x8e>

        case CMU_STATUS_LFRCOSEL:
          ret = cmuSelect_LFRCO;
     b3a:	230f      	movs	r3, #15
     b3c:	446b      	add	r3, sp
     b3e:	2203      	movs	r2, #3
     b40:	701a      	strb	r2, [r3, #0]
          break;
     b42:	e00e      	b.n	b62 <CMU_ClockSelectGet+0x8e>

        case CMU_STATUS_HFXOSEL:
          ret = cmuSelect_HFXO;
     b44:	230f      	movs	r3, #15
     b46:	446b      	add	r3, sp
     b48:	2204      	movs	r2, #4
     b4a:	701a      	strb	r2, [r3, #0]
          break;
     b4c:	e009      	b.n	b62 <CMU_ClockSelectGet+0x8e>

#if defined(CMU_STATUS_USHFRCODIV2SEL)
        case CMU_STATUS_USHFRCODIV2SEL:
          ret = cmuSelect_USHFRCODIV2;
     b4e:	230f      	movs	r3, #15
     b50:	446b      	add	r3, sp
     b52:	220b      	movs	r2, #11
     b54:	701a      	strb	r2, [r3, #0]
          break;
     b56:	e004      	b.n	b62 <CMU_ClockSelectGet+0x8e>
#endif

        default:
          ret = cmuSelect_HFRCO;
     b58:	230f      	movs	r3, #15
     b5a:	446b      	add	r3, sp
     b5c:	2205      	movs	r2, #5
     b5e:	701a      	strb	r2, [r3, #0]
          break;
     b60:	46c0      	nop			; (mov r8, r8)
      }
#endif
      break;
     b62:	e095      	b.n	c90 <CMU_ClockSelectGet+0x1bc>

#if defined(_CMU_LFCLKSEL_MASK) || defined(_CMU_LFACLKSEL_MASK)
    case CMU_LFACLKSEL_REG:
#if defined(_CMU_LFCLKSEL_MASK)
      switch (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFA_MASK) {
     b64:	4b4e      	ldr	r3, [pc, #312]	; (ca0 <CMU_ClockSelectGet+0x1cc>)
     b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b68:	2203      	movs	r2, #3
     b6a:	4013      	ands	r3, r2
     b6c:	2b02      	cmp	r3, #2
     b6e:	d008      	beq.n	b82 <CMU_ClockSelectGet+0xae>
     b70:	2b03      	cmp	r3, #3
     b72:	d00b      	beq.n	b8c <CMU_ClockSelectGet+0xb8>
     b74:	2b01      	cmp	r3, #1
     b76:	d10e      	bne.n	b96 <CMU_ClockSelectGet+0xc2>
        case CMU_LFCLKSEL_LFA_LFRCO:
          ret = cmuSelect_LFRCO;
     b78:	230f      	movs	r3, #15
     b7a:	446b      	add	r3, sp
     b7c:	2203      	movs	r2, #3
     b7e:	701a      	strb	r2, [r3, #0]
          break;
     b80:	e015      	b.n	bae <CMU_ClockSelectGet+0xda>

        case CMU_LFCLKSEL_LFA_LFXO:
          ret = cmuSelect_LFXO;
     b82:	230f      	movs	r3, #15
     b84:	446b      	add	r3, sp
     b86:	2202      	movs	r2, #2
     b88:	701a      	strb	r2, [r3, #0]
          break;
     b8a:	e010      	b.n	bae <CMU_ClockSelectGet+0xda>

#if defined(CMU_LFCLKSEL_LFA_HFCORECLKLEDIV2)
        case CMU_LFCLKSEL_LFA_HFCORECLKLEDIV2:
          ret = cmuSelect_HFCLKLE;
     b8c:	230f      	movs	r3, #15
     b8e:	446b      	add	r3, sp
     b90:	2206      	movs	r2, #6
     b92:	701a      	strb	r2, [r3, #0]
          break;
     b94:	e00b      	b.n	bae <CMU_ClockSelectGet+0xda>
#endif

        default:
#if defined(CMU_LFCLKSEL_LFAE)
          if (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFAE_MASK) {
     b96:	4b42      	ldr	r3, [pc, #264]	; (ca0 <CMU_ClockSelectGet+0x1cc>)
     b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     b9a:	2380      	movs	r3, #128	; 0x80
     b9c:	025b      	lsls	r3, r3, #9
     b9e:	4013      	ands	r3, r2
     ba0:	d004      	beq.n	bac <CMU_ClockSelectGet+0xd8>
            ret = cmuSelect_ULFRCO;
     ba2:	230f      	movs	r3, #15
     ba4:	446b      	add	r3, sp
     ba6:	220c      	movs	r2, #12
     ba8:	701a      	strb	r2, [r3, #0]
            break;
     baa:	e000      	b.n	bae <CMU_ClockSelectGet+0xda>
          }
#else
          ret = cmuSelect_Disabled;
#endif
          break;
     bac:	46c0      	nop			; (mov r8, r8)
        default:
          ret = cmuSelect_Disabled;
          break;
      }
#endif
      break;
     bae:	e06f      	b.n	c90 <CMU_ClockSelectGet+0x1bc>
#endif /* _CMU_LFCLKSEL_MASK || _CMU_LFACLKSEL_MASK */

#if defined(_CMU_LFCLKSEL_MASK) || defined(_CMU_LFBCLKSEL_MASK)
    case CMU_LFBCLKSEL_REG:
#if defined(_CMU_LFCLKSEL_MASK)
      switch (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFB_MASK) {
     bb0:	4b3b      	ldr	r3, [pc, #236]	; (ca0 <CMU_ClockSelectGet+0x1cc>)
     bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     bb4:	220c      	movs	r2, #12
     bb6:	4013      	ands	r3, r2
     bb8:	2b08      	cmp	r3, #8
     bba:	d008      	beq.n	bce <CMU_ClockSelectGet+0xfa>
     bbc:	2b0c      	cmp	r3, #12
     bbe:	d00b      	beq.n	bd8 <CMU_ClockSelectGet+0x104>
     bc0:	2b04      	cmp	r3, #4
     bc2:	d10e      	bne.n	be2 <CMU_ClockSelectGet+0x10e>
        case CMU_LFCLKSEL_LFB_LFRCO:
          ret = cmuSelect_LFRCO;
     bc4:	230f      	movs	r3, #15
     bc6:	446b      	add	r3, sp
     bc8:	2203      	movs	r2, #3
     bca:	701a      	strb	r2, [r3, #0]
          break;
     bcc:	e015      	b.n	bfa <CMU_ClockSelectGet+0x126>

        case CMU_LFCLKSEL_LFB_LFXO:
          ret = cmuSelect_LFXO;
     bce:	230f      	movs	r3, #15
     bd0:	446b      	add	r3, sp
     bd2:	2202      	movs	r2, #2
     bd4:	701a      	strb	r2, [r3, #0]
          break;
     bd6:	e010      	b.n	bfa <CMU_ClockSelectGet+0x126>

#if defined(CMU_LFCLKSEL_LFB_HFCORECLKLEDIV2)
        case CMU_LFCLKSEL_LFB_HFCORECLKLEDIV2:
          ret = cmuSelect_HFCLKLE;
     bd8:	230f      	movs	r3, #15
     bda:	446b      	add	r3, sp
     bdc:	2206      	movs	r2, #6
     bde:	701a      	strb	r2, [r3, #0]
          break;
     be0:	e00b      	b.n	bfa <CMU_ClockSelectGet+0x126>
          break;
#endif

        default:
#if defined(CMU_LFCLKSEL_LFBE)
          if (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFBE_MASK) {
     be2:	4b2f      	ldr	r3, [pc, #188]	; (ca0 <CMU_ClockSelectGet+0x1cc>)
     be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     be6:	2380      	movs	r3, #128	; 0x80
     be8:	035b      	lsls	r3, r3, #13
     bea:	4013      	ands	r3, r2
     bec:	d004      	beq.n	bf8 <CMU_ClockSelectGet+0x124>
            ret = cmuSelect_ULFRCO;
     bee:	230f      	movs	r3, #15
     bf0:	446b      	add	r3, sp
     bf2:	220c      	movs	r2, #12
     bf4:	701a      	strb	r2, [r3, #0]
            break;
     bf6:	e000      	b.n	bfa <CMU_ClockSelectGet+0x126>
          }
#else
          ret = cmuSelect_Disabled;
#endif
          break;
     bf8:	46c0      	nop			; (mov r8, r8)
        default:
          ret = cmuSelect_Disabled;
          break;
      }
#endif
      break;
     bfa:	e049      	b.n	c90 <CMU_ClockSelectGet+0x1bc>
#endif /* _CMU_LFCLKSEL_MASK || _CMU_LFBCLKSEL_MASK */

#if defined(_CMU_LFCLKSEL_LFC_MASK)
    case CMU_LFCCLKSEL_REG:
      switch (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFC_MASK) {
     bfc:	4b28      	ldr	r3, [pc, #160]	; (ca0 <CMU_ClockSelectGet+0x1cc>)
     bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     c00:	2230      	movs	r2, #48	; 0x30
     c02:	4013      	ands	r3, r2
     c04:	2b10      	cmp	r3, #16
     c06:	d002      	beq.n	c0e <CMU_ClockSelectGet+0x13a>
     c08:	2b20      	cmp	r3, #32
     c0a:	d005      	beq.n	c18 <CMU_ClockSelectGet+0x144>
     c0c:	e009      	b.n	c22 <CMU_ClockSelectGet+0x14e>
        case CMU_LFCLKSEL_LFC_LFRCO:
          ret = cmuSelect_LFRCO;
     c0e:	230f      	movs	r3, #15
     c10:	446b      	add	r3, sp
     c12:	2203      	movs	r2, #3
     c14:	701a      	strb	r2, [r3, #0]
          break;
     c16:	e009      	b.n	c2c <CMU_ClockSelectGet+0x158>

        case CMU_LFCLKSEL_LFC_LFXO:
          ret = cmuSelect_LFXO;
     c18:	230f      	movs	r3, #15
     c1a:	446b      	add	r3, sp
     c1c:	2202      	movs	r2, #2
     c1e:	701a      	strb	r2, [r3, #0]
          break;
     c20:	e004      	b.n	c2c <CMU_ClockSelectGet+0x158>

        default:
          ret = cmuSelect_Disabled;
     c22:	230f      	movs	r3, #15
     c24:	446b      	add	r3, sp
     c26:	2201      	movs	r2, #1
     c28:	701a      	strb	r2, [r3, #0]
          break;
     c2a:	46c0      	nop			; (mov r8, r8)
      }
      break;
     c2c:	e030      	b.n	c90 <CMU_ClockSelectGet+0x1bc>
        case CMU_CTRL_DBGCLK_HFCLK:
          ret = cmuSelect_HFCLK;
          break;
      }
#else
      ret = cmuSelect_AUXHFRCO;
     c2e:	230f      	movs	r3, #15
     c30:	446b      	add	r3, sp
     c32:	2207      	movs	r2, #7
     c34:	701a      	strb	r2, [r3, #0]
#endif
      break;
     c36:	e02b      	b.n	c90 <CMU_ClockSelectGet+0x1bc>

#if defined(USBC_CLOCK_PRESENT)
    case CMU_USBCCLKSEL_REG:
      switch (CMU->STATUS
     c38:	4b19      	ldr	r3, [pc, #100]	; (ca0 <CMU_ClockSelectGet+0x1cc>)
     c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
              & (CMU_STATUS_USBCLFXOSEL
     c3c:	23e0      	movs	r3, #224	; 0xe0
     c3e:	02db      	lsls	r3, r3, #11
     c40:	4013      	ands	r3, r2
      switch (CMU->STATUS
     c42:	2280      	movs	r2, #128	; 0x80
     c44:	0292      	lsls	r2, r2, #10
     c46:	4293      	cmp	r3, r2
     c48:	d012      	beq.n	c70 <CMU_ClockSelectGet+0x19c>
     c4a:	2280      	movs	r2, #128	; 0x80
     c4c:	02d2      	lsls	r2, r2, #11
     c4e:	4293      	cmp	r3, r2
     c50:	d004      	beq.n	c5c <CMU_ClockSelectGet+0x188>
     c52:	2280      	movs	r2, #128	; 0x80
     c54:	0252      	lsls	r2, r2, #9
     c56:	4293      	cmp	r3, r2
     c58:	d005      	beq.n	c66 <CMU_ClockSelectGet+0x192>
     c5a:	e00e      	b.n	c7a <CMU_ClockSelectGet+0x1a6>
          break;
#endif

#if defined(_CMU_STATUS_USBCUSHFRCOSEL_MASK)
        case CMU_STATUS_USBCUSHFRCOSEL:
          ret = cmuSelect_USHFRCO;
     c5c:	230f      	movs	r3, #15
     c5e:	446b      	add	r3, sp
     c60:	220a      	movs	r2, #10
     c62:	701a      	strb	r2, [r3, #0]
          break;
     c64:	e00e      	b.n	c84 <CMU_ClockSelectGet+0x1b0>
#endif

        case CMU_STATUS_USBCLFXOSEL:
          ret = cmuSelect_LFXO;
     c66:	230f      	movs	r3, #15
     c68:	446b      	add	r3, sp
     c6a:	2202      	movs	r2, #2
     c6c:	701a      	strb	r2, [r3, #0]
          break;
     c6e:	e009      	b.n	c84 <CMU_ClockSelectGet+0x1b0>

        case CMU_STATUS_USBCLFRCOSEL:
          ret = cmuSelect_LFRCO;
     c70:	230f      	movs	r3, #15
     c72:	446b      	add	r3, sp
     c74:	2203      	movs	r2, #3
     c76:	701a      	strb	r2, [r3, #0]
          break;
     c78:	e004      	b.n	c84 <CMU_ClockSelectGet+0x1b0>

        default:
          ret = cmuSelect_Disabled;
     c7a:	230f      	movs	r3, #15
     c7c:	446b      	add	r3, sp
     c7e:	2201      	movs	r2, #1
     c80:	701a      	strb	r2, [r3, #0]
          break;
     c82:	46c0      	nop			; (mov r8, r8)
      }
      break;
     c84:	e004      	b.n	c90 <CMU_ClockSelectGet+0x1bc>
      break;
#endif

    default:
      EFM_ASSERT(0);
      ret = cmuSelect_Error;
     c86:	230f      	movs	r3, #15
     c88:	446b      	add	r3, sp
     c8a:	2200      	movs	r2, #0
     c8c:	701a      	strb	r2, [r3, #0]
      break;
     c8e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
     c90:	230f      	movs	r3, #15
     c92:	446b      	add	r3, sp
     c94:	781b      	ldrb	r3, [r3, #0]
}
     c96:	0018      	movs	r0, r3
     c98:	b004      	add	sp, #16
     c9a:	4770      	bx	lr
     c9c:	00002d04 	.word	0x00002d04
     ca0:	400c8000 	.word	0x400c8000
     ca4:	04003c00 	.word	0x04003c00

00000ca8 <GPIO_PinOutClear>:
{
     ca8:	b082      	sub	sp, #8
     caa:	0002      	movs	r2, r0
     cac:	9100      	str	r1, [sp, #0]
     cae:	466b      	mov	r3, sp
     cb0:	3307      	adds	r3, #7
     cb2:	701a      	strb	r2, [r3, #0]
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
     cb4:	466b      	mov	r3, sp
     cb6:	3307      	adds	r3, #7
     cb8:	781b      	ldrb	r3, [r3, #0]
     cba:	2b00      	cmp	r3, #0
     cbc:	d011      	beq.n	ce2 <GPIO_PinOutClear+0x3a>
     cbe:	466b      	mov	r3, sp
     cc0:	3307      	adds	r3, #7
     cc2:	781b      	ldrb	r3, [r3, #0]
     cc4:	2b01      	cmp	r3, #1
     cc6:	d00c      	beq.n	ce2 <GPIO_PinOutClear+0x3a>
     cc8:	466b      	mov	r3, sp
     cca:	3307      	adds	r3, #7
     ccc:	781b      	ldrb	r3, [r3, #0]
     cce:	2b02      	cmp	r3, #2
     cd0:	d007      	beq.n	ce2 <GPIO_PinOutClear+0x3a>
     cd2:	466b      	mov	r3, sp
     cd4:	3307      	adds	r3, #7
     cd6:	781b      	ldrb	r3, [r3, #0]
     cd8:	2b03      	cmp	r3, #3
     cda:	d002      	beq.n	ce2 <GPIO_PinOutClear+0x3a>
     cdc:	466b      	mov	r3, sp
     cde:	3307      	adds	r3, #7
     ce0:	781b      	ldrb	r3, [r3, #0]
  GPIO->P[port].DOUTCLR = 1 << pin;
     ce2:	4909      	ldr	r1, [pc, #36]	; (d08 <GPIO_PinOutClear+0x60>)
     ce4:	466b      	mov	r3, sp
     ce6:	3307      	adds	r3, #7
     ce8:	781a      	ldrb	r2, [r3, #0]
     cea:	2001      	movs	r0, #1
     cec:	9b00      	ldr	r3, [sp, #0]
     cee:	4098      	lsls	r0, r3
     cf0:	0003      	movs	r3, r0
     cf2:	0018      	movs	r0, r3
     cf4:	0013      	movs	r3, r2
     cf6:	00db      	lsls	r3, r3, #3
     cf8:	189b      	adds	r3, r3, r2
     cfa:	009b      	lsls	r3, r3, #2
     cfc:	18cb      	adds	r3, r1, r3
     cfe:	3314      	adds	r3, #20
     d00:	6018      	str	r0, [r3, #0]
}
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	b002      	add	sp, #8
     d06:	4770      	bx	lr
     d08:	40006000 	.word	0x40006000

00000d0c <GPIO_PinOutSet>:
{
     d0c:	b082      	sub	sp, #8
     d0e:	0002      	movs	r2, r0
     d10:	9100      	str	r1, [sp, #0]
     d12:	466b      	mov	r3, sp
     d14:	3307      	adds	r3, #7
     d16:	701a      	strb	r2, [r3, #0]
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
     d18:	466b      	mov	r3, sp
     d1a:	3307      	adds	r3, #7
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	2b00      	cmp	r3, #0
     d20:	d011      	beq.n	d46 <GPIO_PinOutSet+0x3a>
     d22:	466b      	mov	r3, sp
     d24:	3307      	adds	r3, #7
     d26:	781b      	ldrb	r3, [r3, #0]
     d28:	2b01      	cmp	r3, #1
     d2a:	d00c      	beq.n	d46 <GPIO_PinOutSet+0x3a>
     d2c:	466b      	mov	r3, sp
     d2e:	3307      	adds	r3, #7
     d30:	781b      	ldrb	r3, [r3, #0]
     d32:	2b02      	cmp	r3, #2
     d34:	d007      	beq.n	d46 <GPIO_PinOutSet+0x3a>
     d36:	466b      	mov	r3, sp
     d38:	3307      	adds	r3, #7
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	2b03      	cmp	r3, #3
     d3e:	d002      	beq.n	d46 <GPIO_PinOutSet+0x3a>
     d40:	466b      	mov	r3, sp
     d42:	3307      	adds	r3, #7
     d44:	781b      	ldrb	r3, [r3, #0]
  GPIO->P[port].DOUTSET = 1 << pin;
     d46:	4909      	ldr	r1, [pc, #36]	; (d6c <GPIO_PinOutSet+0x60>)
     d48:	466b      	mov	r3, sp
     d4a:	3307      	adds	r3, #7
     d4c:	781a      	ldrb	r2, [r3, #0]
     d4e:	2001      	movs	r0, #1
     d50:	9b00      	ldr	r3, [sp, #0]
     d52:	4098      	lsls	r0, r3
     d54:	0003      	movs	r3, r0
     d56:	0018      	movs	r0, r3
     d58:	0013      	movs	r3, r2
     d5a:	00db      	lsls	r3, r3, #3
     d5c:	189b      	adds	r3, r3, r2
     d5e:	009b      	lsls	r3, r3, #2
     d60:	18cb      	adds	r3, r1, r3
     d62:	3310      	adds	r3, #16
     d64:	6018      	str	r0, [r3, #0]
}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	b002      	add	sp, #8
     d6a:	4770      	bx	lr
     d6c:	40006000 	.word	0x40006000

00000d70 <GPIO_PinModeSet>:
 ******************************************************************************/
void GPIO_PinModeSet(GPIO_Port_TypeDef port,
                     unsigned int pin,
                     GPIO_Mode_TypeDef mode,
                     unsigned int out)
{
     d70:	b530      	push	{r4, r5, lr}
     d72:	b085      	sub	sp, #20
     d74:	9102      	str	r1, [sp, #8]
     d76:	0011      	movs	r1, r2
     d78:	9301      	str	r3, [sp, #4]
     d7a:	230f      	movs	r3, #15
     d7c:	446b      	add	r3, sp
     d7e:	1c02      	adds	r2, r0, #0
     d80:	701a      	strb	r2, [r3, #0]
     d82:	230e      	movs	r3, #14
     d84:	446b      	add	r3, sp
     d86:	1c0a      	adds	r2, r1, #0
     d88:	701a      	strb	r2, [r3, #0]
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
     d8a:	230f      	movs	r3, #15
     d8c:	446b      	add	r3, sp
     d8e:	781b      	ldrb	r3, [r3, #0]
     d90:	2b00      	cmp	r3, #0
     d92:	d011      	beq.n	db8 <GPIO_PinModeSet+0x48>
     d94:	230f      	movs	r3, #15
     d96:	446b      	add	r3, sp
     d98:	781b      	ldrb	r3, [r3, #0]
     d9a:	2b01      	cmp	r3, #1
     d9c:	d00c      	beq.n	db8 <GPIO_PinModeSet+0x48>
     d9e:	230f      	movs	r3, #15
     da0:	446b      	add	r3, sp
     da2:	781b      	ldrb	r3, [r3, #0]
     da4:	2b02      	cmp	r3, #2
     da6:	d007      	beq.n	db8 <GPIO_PinModeSet+0x48>
     da8:	230f      	movs	r3, #15
     daa:	446b      	add	r3, sp
     dac:	781b      	ldrb	r3, [r3, #0]
     dae:	2b03      	cmp	r3, #3
     db0:	d002      	beq.n	db8 <GPIO_PinModeSet+0x48>
     db2:	230f      	movs	r3, #15
     db4:	446b      	add	r3, sp
     db6:	781b      	ldrb	r3, [r3, #0]

  /* If disabling pin, do not modify DOUT in order to reduce chance for */
  /* glitch/spike (may not be sufficient precaution in all use cases) */
  if (mode != gpioModeDisabled) {
     db8:	230e      	movs	r3, #14
     dba:	446b      	add	r3, sp
     dbc:	781b      	ldrb	r3, [r3, #0]
     dbe:	2b00      	cmp	r3, #0
     dc0:	d013      	beq.n	dea <GPIO_PinModeSet+0x7a>
    if (out) {
     dc2:	9b01      	ldr	r3, [sp, #4]
     dc4:	2b00      	cmp	r3, #0
     dc6:	d008      	beq.n	dda <GPIO_PinModeSet+0x6a>
      GPIO_PinOutSet(port, pin);
     dc8:	9a02      	ldr	r2, [sp, #8]
     dca:	230f      	movs	r3, #15
     dcc:	446b      	add	r3, sp
     dce:	781b      	ldrb	r3, [r3, #0]
     dd0:	0011      	movs	r1, r2
     dd2:	0018      	movs	r0, r3
     dd4:	f7ff ff9a 	bl	d0c <GPIO_PinOutSet>
     dd8:	e007      	b.n	dea <GPIO_PinModeSet+0x7a>
    } else {
      GPIO_PinOutClear(port, pin);
     dda:	9a02      	ldr	r2, [sp, #8]
     ddc:	230f      	movs	r3, #15
     dde:	446b      	add	r3, sp
     de0:	781b      	ldrb	r3, [r3, #0]
     de2:	0011      	movs	r1, r2
     de4:	0018      	movs	r0, r3
     de6:	f7ff ff5f 	bl	ca8 <GPIO_PinOutClear>
    }
  }

  /* There are two registers controlling the pins for each port. The MODEL
   * register controls pins 0-7 and MODEH controls pins 8-15. */
  if (pin < 8) {
     dea:	9b02      	ldr	r3, [sp, #8]
     dec:	2b07      	cmp	r3, #7
     dee:	d825      	bhi.n	e3c <GPIO_PinModeSet+0xcc>
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xFu << (pin * 4)))
     df0:	4c36      	ldr	r4, [pc, #216]	; (ecc <GPIO_PinModeSet+0x15c>)
     df2:	230f      	movs	r3, #15
     df4:	446b      	add	r3, sp
     df6:	781a      	ldrb	r2, [r3, #0]
     df8:	4834      	ldr	r0, [pc, #208]	; (ecc <GPIO_PinModeSet+0x15c>)
     dfa:	230f      	movs	r3, #15
     dfc:	446b      	add	r3, sp
     dfe:	7819      	ldrb	r1, [r3, #0]
     e00:	000b      	movs	r3, r1
     e02:	00db      	lsls	r3, r3, #3
     e04:	185b      	adds	r3, r3, r1
     e06:	009b      	lsls	r3, r3, #2
     e08:	18c3      	adds	r3, r0, r3
     e0a:	3304      	adds	r3, #4
     e0c:	681b      	ldr	r3, [r3, #0]
     e0e:	9902      	ldr	r1, [sp, #8]
     e10:	0089      	lsls	r1, r1, #2
     e12:	200f      	movs	r0, #15
     e14:	4088      	lsls	r0, r1
     e16:	0001      	movs	r1, r0
     e18:	43c9      	mvns	r1, r1
     e1a:	400b      	ands	r3, r1
                          | (mode << (pin * 4));
     e1c:	210e      	movs	r1, #14
     e1e:	4469      	add	r1, sp
     e20:	7808      	ldrb	r0, [r1, #0]
     e22:	9902      	ldr	r1, [sp, #8]
     e24:	0089      	lsls	r1, r1, #2
     e26:	4088      	lsls	r0, r1
     e28:	0001      	movs	r1, r0
     e2a:	4319      	orrs	r1, r3
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xFu << (pin * 4)))
     e2c:	0013      	movs	r3, r2
     e2e:	00db      	lsls	r3, r3, #3
     e30:	189b      	adds	r3, r3, r2
     e32:	009b      	lsls	r3, r3, #2
     e34:	18e3      	adds	r3, r4, r3
     e36:	3304      	adds	r3, #4
     e38:	6019      	str	r1, [r3, #0]
     e3a:	e02a      	b.n	e92 <GPIO_PinModeSet+0x122>
  } else {
    GPIO->P[port].MODEH = (GPIO->P[port].MODEH & ~(0xFu << ((pin - 8) * 4)))
     e3c:	4c23      	ldr	r4, [pc, #140]	; (ecc <GPIO_PinModeSet+0x15c>)
     e3e:	230f      	movs	r3, #15
     e40:	446b      	add	r3, sp
     e42:	781a      	ldrb	r2, [r3, #0]
     e44:	4821      	ldr	r0, [pc, #132]	; (ecc <GPIO_PinModeSet+0x15c>)
     e46:	230f      	movs	r3, #15
     e48:	446b      	add	r3, sp
     e4a:	7819      	ldrb	r1, [r3, #0]
     e4c:	000b      	movs	r3, r1
     e4e:	00db      	lsls	r3, r3, #3
     e50:	185b      	adds	r3, r3, r1
     e52:	009b      	lsls	r3, r3, #2
     e54:	18c3      	adds	r3, r0, r3
     e56:	3308      	adds	r3, #8
     e58:	681b      	ldr	r3, [r3, #0]
     e5a:	9902      	ldr	r1, [sp, #8]
     e5c:	481c      	ldr	r0, [pc, #112]	; (ed0 <GPIO_PinModeSet+0x160>)
     e5e:	4684      	mov	ip, r0
     e60:	4461      	add	r1, ip
     e62:	0089      	lsls	r1, r1, #2
     e64:	200f      	movs	r0, #15
     e66:	4088      	lsls	r0, r1
     e68:	0001      	movs	r1, r0
     e6a:	43c9      	mvns	r1, r1
     e6c:	400b      	ands	r3, r1
                          | (mode << ((pin - 8) * 4));
     e6e:	210e      	movs	r1, #14
     e70:	4469      	add	r1, sp
     e72:	7808      	ldrb	r0, [r1, #0]
     e74:	9902      	ldr	r1, [sp, #8]
     e76:	4d16      	ldr	r5, [pc, #88]	; (ed0 <GPIO_PinModeSet+0x160>)
     e78:	46ac      	mov	ip, r5
     e7a:	4461      	add	r1, ip
     e7c:	0089      	lsls	r1, r1, #2
     e7e:	4088      	lsls	r0, r1
     e80:	0001      	movs	r1, r0
     e82:	4319      	orrs	r1, r3
    GPIO->P[port].MODEH = (GPIO->P[port].MODEH & ~(0xFu << ((pin - 8) * 4)))
     e84:	0013      	movs	r3, r2
     e86:	00db      	lsls	r3, r3, #3
     e88:	189b      	adds	r3, r3, r2
     e8a:	009b      	lsls	r3, r3, #2
     e8c:	18e3      	adds	r3, r4, r3
     e8e:	3308      	adds	r3, #8
     e90:	6019      	str	r1, [r3, #0]
  }

  if (mode == gpioModeDisabled) {
     e92:	230e      	movs	r3, #14
     e94:	446b      	add	r3, sp
     e96:	781b      	ldrb	r3, [r3, #0]
     e98:	2b00      	cmp	r3, #0
     e9a:	d113      	bne.n	ec4 <GPIO_PinModeSet+0x154>
    if (out) {
     e9c:	9b01      	ldr	r3, [sp, #4]
     e9e:	2b00      	cmp	r3, #0
     ea0:	d008      	beq.n	eb4 <GPIO_PinModeSet+0x144>
      GPIO_PinOutSet(port, pin);
     ea2:	9a02      	ldr	r2, [sp, #8]
     ea4:	230f      	movs	r3, #15
     ea6:	446b      	add	r3, sp
     ea8:	781b      	ldrb	r3, [r3, #0]
     eaa:	0011      	movs	r1, r2
     eac:	0018      	movs	r0, r3
     eae:	f7ff ff2d 	bl	d0c <GPIO_PinOutSet>
    } else {
      GPIO_PinOutClear(port, pin);
    }
  }
}
     eb2:	e007      	b.n	ec4 <GPIO_PinModeSet+0x154>
      GPIO_PinOutClear(port, pin);
     eb4:	9a02      	ldr	r2, [sp, #8]
     eb6:	230f      	movs	r3, #15
     eb8:	446b      	add	r3, sp
     eba:	781b      	ldrb	r3, [r3, #0]
     ebc:	0011      	movs	r1, r2
     ebe:	0018      	movs	r0, r3
     ec0:	f7ff fef2 	bl	ca8 <GPIO_PinOutClear>
}
     ec4:	46c0      	nop			; (mov r8, r8)
     ec6:	b005      	add	sp, #20
     ec8:	bd30      	pop	{r4, r5, pc}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	40006000 	.word	0x40006000
     ed0:	3ffffff8 	.word	0x3ffffff8

00000ed4 <__udivsi3>:
     ed4:	2200      	movs	r2, #0
     ed6:	0843      	lsrs	r3, r0, #1
     ed8:	428b      	cmp	r3, r1
     eda:	d374      	bcc.n	fc6 <__udivsi3+0xf2>
     edc:	0903      	lsrs	r3, r0, #4
     ede:	428b      	cmp	r3, r1
     ee0:	d35f      	bcc.n	fa2 <__udivsi3+0xce>
     ee2:	0a03      	lsrs	r3, r0, #8
     ee4:	428b      	cmp	r3, r1
     ee6:	d344      	bcc.n	f72 <__udivsi3+0x9e>
     ee8:	0b03      	lsrs	r3, r0, #12
     eea:	428b      	cmp	r3, r1
     eec:	d328      	bcc.n	f40 <__udivsi3+0x6c>
     eee:	0c03      	lsrs	r3, r0, #16
     ef0:	428b      	cmp	r3, r1
     ef2:	d30d      	bcc.n	f10 <__udivsi3+0x3c>
     ef4:	22ff      	movs	r2, #255	; 0xff
     ef6:	0209      	lsls	r1, r1, #8
     ef8:	ba12      	rev	r2, r2
     efa:	0c03      	lsrs	r3, r0, #16
     efc:	428b      	cmp	r3, r1
     efe:	d302      	bcc.n	f06 <__udivsi3+0x32>
     f00:	1212      	asrs	r2, r2, #8
     f02:	0209      	lsls	r1, r1, #8
     f04:	d065      	beq.n	fd2 <__udivsi3+0xfe>
     f06:	0b03      	lsrs	r3, r0, #12
     f08:	428b      	cmp	r3, r1
     f0a:	d319      	bcc.n	f40 <__udivsi3+0x6c>
     f0c:	e000      	b.n	f10 <__udivsi3+0x3c>
     f0e:	0a09      	lsrs	r1, r1, #8
     f10:	0bc3      	lsrs	r3, r0, #15
     f12:	428b      	cmp	r3, r1
     f14:	d301      	bcc.n	f1a <__udivsi3+0x46>
     f16:	03cb      	lsls	r3, r1, #15
     f18:	1ac0      	subs	r0, r0, r3
     f1a:	4152      	adcs	r2, r2
     f1c:	0b83      	lsrs	r3, r0, #14
     f1e:	428b      	cmp	r3, r1
     f20:	d301      	bcc.n	f26 <__udivsi3+0x52>
     f22:	038b      	lsls	r3, r1, #14
     f24:	1ac0      	subs	r0, r0, r3
     f26:	4152      	adcs	r2, r2
     f28:	0b43      	lsrs	r3, r0, #13
     f2a:	428b      	cmp	r3, r1
     f2c:	d301      	bcc.n	f32 <__udivsi3+0x5e>
     f2e:	034b      	lsls	r3, r1, #13
     f30:	1ac0      	subs	r0, r0, r3
     f32:	4152      	adcs	r2, r2
     f34:	0b03      	lsrs	r3, r0, #12
     f36:	428b      	cmp	r3, r1
     f38:	d301      	bcc.n	f3e <__udivsi3+0x6a>
     f3a:	030b      	lsls	r3, r1, #12
     f3c:	1ac0      	subs	r0, r0, r3
     f3e:	4152      	adcs	r2, r2
     f40:	0ac3      	lsrs	r3, r0, #11
     f42:	428b      	cmp	r3, r1
     f44:	d301      	bcc.n	f4a <__udivsi3+0x76>
     f46:	02cb      	lsls	r3, r1, #11
     f48:	1ac0      	subs	r0, r0, r3
     f4a:	4152      	adcs	r2, r2
     f4c:	0a83      	lsrs	r3, r0, #10
     f4e:	428b      	cmp	r3, r1
     f50:	d301      	bcc.n	f56 <__udivsi3+0x82>
     f52:	028b      	lsls	r3, r1, #10
     f54:	1ac0      	subs	r0, r0, r3
     f56:	4152      	adcs	r2, r2
     f58:	0a43      	lsrs	r3, r0, #9
     f5a:	428b      	cmp	r3, r1
     f5c:	d301      	bcc.n	f62 <__udivsi3+0x8e>
     f5e:	024b      	lsls	r3, r1, #9
     f60:	1ac0      	subs	r0, r0, r3
     f62:	4152      	adcs	r2, r2
     f64:	0a03      	lsrs	r3, r0, #8
     f66:	428b      	cmp	r3, r1
     f68:	d301      	bcc.n	f6e <__udivsi3+0x9a>
     f6a:	020b      	lsls	r3, r1, #8
     f6c:	1ac0      	subs	r0, r0, r3
     f6e:	4152      	adcs	r2, r2
     f70:	d2cd      	bcs.n	f0e <__udivsi3+0x3a>
     f72:	09c3      	lsrs	r3, r0, #7
     f74:	428b      	cmp	r3, r1
     f76:	d301      	bcc.n	f7c <__udivsi3+0xa8>
     f78:	01cb      	lsls	r3, r1, #7
     f7a:	1ac0      	subs	r0, r0, r3
     f7c:	4152      	adcs	r2, r2
     f7e:	0983      	lsrs	r3, r0, #6
     f80:	428b      	cmp	r3, r1
     f82:	d301      	bcc.n	f88 <__udivsi3+0xb4>
     f84:	018b      	lsls	r3, r1, #6
     f86:	1ac0      	subs	r0, r0, r3
     f88:	4152      	adcs	r2, r2
     f8a:	0943      	lsrs	r3, r0, #5
     f8c:	428b      	cmp	r3, r1
     f8e:	d301      	bcc.n	f94 <__udivsi3+0xc0>
     f90:	014b      	lsls	r3, r1, #5
     f92:	1ac0      	subs	r0, r0, r3
     f94:	4152      	adcs	r2, r2
     f96:	0903      	lsrs	r3, r0, #4
     f98:	428b      	cmp	r3, r1
     f9a:	d301      	bcc.n	fa0 <__udivsi3+0xcc>
     f9c:	010b      	lsls	r3, r1, #4
     f9e:	1ac0      	subs	r0, r0, r3
     fa0:	4152      	adcs	r2, r2
     fa2:	08c3      	lsrs	r3, r0, #3
     fa4:	428b      	cmp	r3, r1
     fa6:	d301      	bcc.n	fac <__udivsi3+0xd8>
     fa8:	00cb      	lsls	r3, r1, #3
     faa:	1ac0      	subs	r0, r0, r3
     fac:	4152      	adcs	r2, r2
     fae:	0883      	lsrs	r3, r0, #2
     fb0:	428b      	cmp	r3, r1
     fb2:	d301      	bcc.n	fb8 <__udivsi3+0xe4>
     fb4:	008b      	lsls	r3, r1, #2
     fb6:	1ac0      	subs	r0, r0, r3
     fb8:	4152      	adcs	r2, r2
     fba:	0843      	lsrs	r3, r0, #1
     fbc:	428b      	cmp	r3, r1
     fbe:	d301      	bcc.n	fc4 <__udivsi3+0xf0>
     fc0:	004b      	lsls	r3, r1, #1
     fc2:	1ac0      	subs	r0, r0, r3
     fc4:	4152      	adcs	r2, r2
     fc6:	1a41      	subs	r1, r0, r1
     fc8:	d200      	bcs.n	fcc <__udivsi3+0xf8>
     fca:	4601      	mov	r1, r0
     fcc:	4152      	adcs	r2, r2
     fce:	4610      	mov	r0, r2
     fd0:	4770      	bx	lr
     fd2:	e7ff      	b.n	fd4 <__udivsi3+0x100>
     fd4:	b501      	push	{r0, lr}
     fd6:	2000      	movs	r0, #0
     fd8:	f000 f806 	bl	fe8 <__aeabi_idiv0>
     fdc:	bd02      	pop	{r1, pc}
     fde:	46c0      	nop			; (mov r8, r8)

00000fe0 <__aeabi_uidivmod>:
     fe0:	2900      	cmp	r1, #0
     fe2:	d0f7      	beq.n	fd4 <__udivsi3+0x100>
     fe4:	e776      	b.n	ed4 <__udivsi3>
     fe6:	4770      	bx	lr

00000fe8 <__aeabi_idiv0>:
     fe8:	4770      	bx	lr
     fea:	46c0      	nop			; (mov r8, r8)

00000fec <atexit>:
     fec:	b510      	push	{r4, lr}
     fee:	0001      	movs	r1, r0
     ff0:	2300      	movs	r3, #0
     ff2:	2200      	movs	r2, #0
     ff4:	2000      	movs	r0, #0
     ff6:	f000 f8d7 	bl	11a8 <__register_exitproc>
     ffa:	bd10      	pop	{r4, pc}

00000ffc <exit>:
     ffc:	4b08      	ldr	r3, [pc, #32]	; (1020 <exit+0x24>)
     ffe:	b510      	push	{r4, lr}
    1000:	0004      	movs	r4, r0
    1002:	2b00      	cmp	r3, #0
    1004:	d002      	beq.n	100c <exit+0x10>
    1006:	2100      	movs	r1, #0
    1008:	f000 f944 	bl	1294 <__call_exitprocs>
    100c:	4b05      	ldr	r3, [pc, #20]	; (1024 <exit+0x28>)
    100e:	6818      	ldr	r0, [r3, #0]
    1010:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1012:	2b00      	cmp	r3, #0
    1014:	d000      	beq.n	1018 <exit+0x1c>
    1016:	4798      	blx	r3
    1018:	0020      	movs	r0, r4
    101a:	f001 fd61 	bl	2ae0 <_exit>
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	00001295 	.word	0x00001295
    1024:	00002d24 	.word	0x00002d24

00001028 <__libc_fini_array>:
    1028:	b570      	push	{r4, r5, r6, lr}
    102a:	4b09      	ldr	r3, [pc, #36]	; (1050 <__libc_fini_array+0x28>)
    102c:	4c09      	ldr	r4, [pc, #36]	; (1054 <__libc_fini_array+0x2c>)
    102e:	1ae4      	subs	r4, r4, r3
    1030:	10a4      	asrs	r4, r4, #2
    1032:	d009      	beq.n	1048 <__libc_fini_array+0x20>
    1034:	4a08      	ldr	r2, [pc, #32]	; (1058 <__libc_fini_array+0x30>)
    1036:	18a5      	adds	r5, r4, r2
    1038:	00ad      	lsls	r5, r5, #2
    103a:	18ed      	adds	r5, r5, r3
    103c:	682b      	ldr	r3, [r5, #0]
    103e:	3c01      	subs	r4, #1
    1040:	4798      	blx	r3
    1042:	3d04      	subs	r5, #4
    1044:	2c00      	cmp	r4, #0
    1046:	d1f9      	bne.n	103c <__libc_fini_array+0x14>
    1048:	f001 fe3c 	bl	2cc4 <_fini>
    104c:	bd70      	pop	{r4, r5, r6, pc}
    104e:	46c0      	nop			; (mov r8, r8)
    1050:	20000078 	.word	0x20000078
    1054:	2000007c 	.word	0x2000007c
    1058:	3fffffff 	.word	0x3fffffff

0000105c <__libc_init_array>:
    105c:	b570      	push	{r4, r5, r6, lr}
    105e:	4e0d      	ldr	r6, [pc, #52]	; (1094 <__libc_init_array+0x38>)
    1060:	4d0d      	ldr	r5, [pc, #52]	; (1098 <__libc_init_array+0x3c>)
    1062:	1bad      	subs	r5, r5, r6
    1064:	10ad      	asrs	r5, r5, #2
    1066:	d006      	beq.n	1076 <__libc_init_array+0x1a>
    1068:	2400      	movs	r4, #0
    106a:	00a3      	lsls	r3, r4, #2
    106c:	58f3      	ldr	r3, [r6, r3]
    106e:	3401      	adds	r4, #1
    1070:	4798      	blx	r3
    1072:	42a5      	cmp	r5, r4
    1074:	d1f9      	bne.n	106a <__libc_init_array+0xe>
    1076:	f001 fe1f 	bl	2cb8 <_init>
    107a:	4e08      	ldr	r6, [pc, #32]	; (109c <__libc_init_array+0x40>)
    107c:	4d08      	ldr	r5, [pc, #32]	; (10a0 <__libc_init_array+0x44>)
    107e:	1bad      	subs	r5, r5, r6
    1080:	10ad      	asrs	r5, r5, #2
    1082:	d006      	beq.n	1092 <__libc_init_array+0x36>
    1084:	2400      	movs	r4, #0
    1086:	00a3      	lsls	r3, r4, #2
    1088:	58f3      	ldr	r3, [r6, r3]
    108a:	3401      	adds	r4, #1
    108c:	4798      	blx	r3
    108e:	42a5      	cmp	r5, r4
    1090:	d1f9      	bne.n	1086 <__libc_init_array+0x2a>
    1092:	bd70      	pop	{r4, r5, r6, pc}
    1094:	20000074 	.word	0x20000074
    1098:	20000074 	.word	0x20000074
    109c:	20000074 	.word	0x20000074
    10a0:	20000078 	.word	0x20000078

000010a4 <memset>:
    10a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10a6:	0783      	lsls	r3, r0, #30
    10a8:	d046      	beq.n	1138 <memset+0x94>
    10aa:	1e54      	subs	r4, r2, #1
    10ac:	2a00      	cmp	r2, #0
    10ae:	d042      	beq.n	1136 <memset+0x92>
    10b0:	b2ce      	uxtb	r6, r1
    10b2:	0002      	movs	r2, r0
    10b4:	2503      	movs	r5, #3
    10b6:	e002      	b.n	10be <memset+0x1a>
    10b8:	001a      	movs	r2, r3
    10ba:	3c01      	subs	r4, #1
    10bc:	d33b      	bcc.n	1136 <memset+0x92>
    10be:	1c53      	adds	r3, r2, #1
    10c0:	7016      	strb	r6, [r2, #0]
    10c2:	422b      	tst	r3, r5
    10c4:	d1f8      	bne.n	10b8 <memset+0x14>
    10c6:	2c03      	cmp	r4, #3
    10c8:	d92d      	bls.n	1126 <memset+0x82>
    10ca:	22ff      	movs	r2, #255	; 0xff
    10cc:	400a      	ands	r2, r1
    10ce:	0215      	lsls	r5, r2, #8
    10d0:	4315      	orrs	r5, r2
    10d2:	042a      	lsls	r2, r5, #16
    10d4:	4315      	orrs	r5, r2
    10d6:	2c0f      	cmp	r4, #15
    10d8:	d916      	bls.n	1108 <memset+0x64>
    10da:	0027      	movs	r7, r4
    10dc:	3f10      	subs	r7, #16
    10de:	093f      	lsrs	r7, r7, #4
    10e0:	013e      	lsls	r6, r7, #4
    10e2:	46b4      	mov	ip, r6
    10e4:	001e      	movs	r6, r3
    10e6:	001a      	movs	r2, r3
    10e8:	3610      	adds	r6, #16
    10ea:	4466      	add	r6, ip
    10ec:	6015      	str	r5, [r2, #0]
    10ee:	6055      	str	r5, [r2, #4]
    10f0:	6095      	str	r5, [r2, #8]
    10f2:	60d5      	str	r5, [r2, #12]
    10f4:	3210      	adds	r2, #16
    10f6:	42b2      	cmp	r2, r6
    10f8:	d1f8      	bne.n	10ec <memset+0x48>
    10fa:	220f      	movs	r2, #15
    10fc:	3701      	adds	r7, #1
    10fe:	013f      	lsls	r7, r7, #4
    1100:	19db      	adds	r3, r3, r7
    1102:	4014      	ands	r4, r2
    1104:	2c03      	cmp	r4, #3
    1106:	d90e      	bls.n	1126 <memset+0x82>
    1108:	1f26      	subs	r6, r4, #4
    110a:	08b6      	lsrs	r6, r6, #2
    110c:	00b7      	lsls	r7, r6, #2
    110e:	46bc      	mov	ip, r7
    1110:	001a      	movs	r2, r3
    1112:	1d1f      	adds	r7, r3, #4
    1114:	4467      	add	r7, ip
    1116:	c220      	stmia	r2!, {r5}
    1118:	42ba      	cmp	r2, r7
    111a:	d1fc      	bne.n	1116 <memset+0x72>
    111c:	2203      	movs	r2, #3
    111e:	3601      	adds	r6, #1
    1120:	00b6      	lsls	r6, r6, #2
    1122:	199b      	adds	r3, r3, r6
    1124:	4014      	ands	r4, r2
    1126:	2c00      	cmp	r4, #0
    1128:	d005      	beq.n	1136 <memset+0x92>
    112a:	b2c9      	uxtb	r1, r1
    112c:	191c      	adds	r4, r3, r4
    112e:	7019      	strb	r1, [r3, #0]
    1130:	3301      	adds	r3, #1
    1132:	429c      	cmp	r4, r3
    1134:	d1fb      	bne.n	112e <memset+0x8a>
    1136:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1138:	0014      	movs	r4, r2
    113a:	0003      	movs	r3, r0
    113c:	e7c3      	b.n	10c6 <memset+0x22>
    113e:	46c0      	nop			; (mov r8, r8)

00001140 <_iprintf_r>:
    1140:	b40e      	push	{r1, r2, r3}
    1142:	b510      	push	{r4, lr}
    1144:	0004      	movs	r4, r0
    1146:	b083      	sub	sp, #12
    1148:	2800      	cmp	r0, #0
    114a:	d002      	beq.n	1152 <_iprintf_r+0x12>
    114c:	6983      	ldr	r3, [r0, #24]
    114e:	2b00      	cmp	r3, #0
    1150:	d00b      	beq.n	116a <_iprintf_r+0x2a>
    1152:	ab06      	add	r3, sp, #24
    1154:	9a05      	ldr	r2, [sp, #20]
    1156:	68a1      	ldr	r1, [r4, #8]
    1158:	0020      	movs	r0, r4
    115a:	9301      	str	r3, [sp, #4]
    115c:	f000 fb2e 	bl	17bc <_vfiprintf_r>
    1160:	b003      	add	sp, #12
    1162:	bc10      	pop	{r4}
    1164:	bc08      	pop	{r3}
    1166:	b003      	add	sp, #12
    1168:	4718      	bx	r3
    116a:	f000 fa19 	bl	15a0 <__sinit>
    116e:	e7f0      	b.n	1152 <_iprintf_r+0x12>

00001170 <iprintf>:
    1170:	b40f      	push	{r0, r1, r2, r3}
    1172:	b510      	push	{r4, lr}
    1174:	4b0b      	ldr	r3, [pc, #44]	; (11a4 <iprintf+0x34>)
    1176:	b082      	sub	sp, #8
    1178:	681c      	ldr	r4, [r3, #0]
    117a:	2c00      	cmp	r4, #0
    117c:	d002      	beq.n	1184 <iprintf+0x14>
    117e:	69a3      	ldr	r3, [r4, #24]
    1180:	2b00      	cmp	r3, #0
    1182:	d00b      	beq.n	119c <iprintf+0x2c>
    1184:	ab05      	add	r3, sp, #20
    1186:	9a04      	ldr	r2, [sp, #16]
    1188:	68a1      	ldr	r1, [r4, #8]
    118a:	0020      	movs	r0, r4
    118c:	9301      	str	r3, [sp, #4]
    118e:	f000 fb15 	bl	17bc <_vfiprintf_r>
    1192:	b002      	add	sp, #8
    1194:	bc10      	pop	{r4}
    1196:	bc08      	pop	{r3}
    1198:	b004      	add	sp, #16
    119a:	4718      	bx	r3
    119c:	0020      	movs	r0, r4
    119e:	f000 f9ff 	bl	15a0 <__sinit>
    11a2:	e7ef      	b.n	1184 <iprintf+0x14>
    11a4:	20000010 	.word	0x20000010

000011a8 <__register_exitproc>:
    11a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11aa:	4647      	mov	r7, r8
    11ac:	46ce      	mov	lr, r9
    11ae:	b580      	push	{r7, lr}
    11b0:	4d34      	ldr	r5, [pc, #208]	; (1284 <__register_exitproc+0xdc>)
    11b2:	b083      	sub	sp, #12
    11b4:	682c      	ldr	r4, [r5, #0]
    11b6:	0006      	movs	r6, r0
    11b8:	000f      	movs	r7, r1
    11ba:	4691      	mov	r9, r2
    11bc:	4698      	mov	r8, r3
    11be:	2c00      	cmp	r4, #0
    11c0:	d03e      	beq.n	1240 <__register_exitproc+0x98>
    11c2:	6863      	ldr	r3, [r4, #4]
    11c4:	2b1f      	cmp	r3, #31
    11c6:	dd1b      	ble.n	1200 <__register_exitproc+0x58>
    11c8:	4b2f      	ldr	r3, [pc, #188]	; (1288 <__register_exitproc+0xe0>)
    11ca:	2b00      	cmp	r3, #0
    11cc:	d046      	beq.n	125c <__register_exitproc+0xb4>
    11ce:	208c      	movs	r0, #140	; 0x8c
    11d0:	e000      	b.n	11d4 <__register_exitproc+0x2c>
    11d2:	bf00      	nop
    11d4:	1e04      	subs	r4, r0, #0
    11d6:	d041      	beq.n	125c <__register_exitproc+0xb4>
    11d8:	682a      	ldr	r2, [r5, #0]
    11da:	2300      	movs	r3, #0
    11dc:	6002      	str	r2, [r0, #0]
    11de:	2288      	movs	r2, #136	; 0x88
    11e0:	6043      	str	r3, [r0, #4]
    11e2:	6028      	str	r0, [r5, #0]
    11e4:	5083      	str	r3, [r0, r2]
    11e6:	2e00      	cmp	r6, #0
    11e8:	d13b      	bne.n	1262 <__register_exitproc+0xba>
    11ea:	3a87      	subs	r2, #135	; 0x87
    11ec:	2000      	movs	r0, #0
    11ee:	3302      	adds	r3, #2
    11f0:	009b      	lsls	r3, r3, #2
    11f2:	6062      	str	r2, [r4, #4]
    11f4:	511f      	str	r7, [r3, r4]
    11f6:	b003      	add	sp, #12
    11f8:	bc0c      	pop	{r2, r3}
    11fa:	4690      	mov	r8, r2
    11fc:	4699      	mov	r9, r3
    11fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1200:	1c5a      	adds	r2, r3, #1
    1202:	2e00      	cmp	r6, #0
    1204:	d0f2      	beq.n	11ec <__register_exitproc+0x44>
    1206:	2288      	movs	r2, #136	; 0x88
    1208:	58a0      	ldr	r0, [r4, r2]
    120a:	2800      	cmp	r0, #0
    120c:	d023      	beq.n	1256 <__register_exitproc+0xae>
    120e:	3278      	adds	r2, #120	; 0x78
    1210:	5885      	ldr	r5, [r0, r2]
    1212:	4649      	mov	r1, r9
    1214:	009a      	lsls	r2, r3, #2
    1216:	1882      	adds	r2, r0, r2
    1218:	6011      	str	r1, [r2, #0]
    121a:	2101      	movs	r1, #1
    121c:	4099      	lsls	r1, r3
    121e:	430d      	orrs	r5, r1
    1220:	4689      	mov	r9, r1
    1222:	2180      	movs	r1, #128	; 0x80
    1224:	0049      	lsls	r1, r1, #1
    1226:	5045      	str	r5, [r0, r1]
    1228:	2580      	movs	r5, #128	; 0x80
    122a:	4641      	mov	r1, r8
    122c:	5151      	str	r1, [r2, r5]
    122e:	1c5a      	adds	r2, r3, #1
    1230:	2e02      	cmp	r6, #2
    1232:	d1db      	bne.n	11ec <__register_exitproc+0x44>
    1234:	464e      	mov	r6, r9
    1236:	3584      	adds	r5, #132	; 0x84
    1238:	5941      	ldr	r1, [r0, r5]
    123a:	430e      	orrs	r6, r1
    123c:	5146      	str	r6, [r0, r5]
    123e:	e7d5      	b.n	11ec <__register_exitproc+0x44>
    1240:	4c12      	ldr	r4, [pc, #72]	; (128c <__register_exitproc+0xe4>)
    1242:	4b13      	ldr	r3, [pc, #76]	; (1290 <__register_exitproc+0xe8>)
    1244:	602c      	str	r4, [r5, #0]
    1246:	2b00      	cmp	r3, #0
    1248:	d0bb      	beq.n	11c2 <__register_exitproc+0x1a>
    124a:	681b      	ldr	r3, [r3, #0]
    124c:	9301      	str	r3, [sp, #4]
    124e:	2388      	movs	r3, #136	; 0x88
    1250:	9a01      	ldr	r2, [sp, #4]
    1252:	50e2      	str	r2, [r4, r3]
    1254:	e7b5      	b.n	11c2 <__register_exitproc+0x1a>
    1256:	4b0c      	ldr	r3, [pc, #48]	; (1288 <__register_exitproc+0xe0>)
    1258:	2b00      	cmp	r3, #0
    125a:	d102      	bne.n	1262 <__register_exitproc+0xba>
    125c:	2001      	movs	r0, #1
    125e:	4240      	negs	r0, r0
    1260:	e7c9      	b.n	11f6 <__register_exitproc+0x4e>
    1262:	2084      	movs	r0, #132	; 0x84
    1264:	0040      	lsls	r0, r0, #1
    1266:	e000      	b.n	126a <__register_exitproc+0xc2>
    1268:	bf00      	nop
    126a:	2800      	cmp	r0, #0
    126c:	d0f6      	beq.n	125c <__register_exitproc+0xb4>
    126e:	2280      	movs	r2, #128	; 0x80
    1270:	2300      	movs	r3, #0
    1272:	0052      	lsls	r2, r2, #1
    1274:	5083      	str	r3, [r0, r2]
    1276:	3204      	adds	r2, #4
    1278:	5083      	str	r3, [r0, r2]
    127a:	3388      	adds	r3, #136	; 0x88
    127c:	50e0      	str	r0, [r4, r3]
    127e:	2500      	movs	r5, #0
    1280:	6863      	ldr	r3, [r4, #4]
    1282:	e7c6      	b.n	1212 <__register_exitproc+0x6a>
    1284:	20000128 	.word	0x20000128
    1288:	00000000 	.word	0x00000000
    128c:	2000009c 	.word	0x2000009c
    1290:	00000000 	.word	0x00000000

00001294 <__call_exitprocs>:
    1294:	b5f0      	push	{r4, r5, r6, r7, lr}
    1296:	46de      	mov	lr, fp
    1298:	4657      	mov	r7, sl
    129a:	464e      	mov	r6, r9
    129c:	4645      	mov	r5, r8
    129e:	b5e0      	push	{r5, r6, r7, lr}
    12a0:	4b41      	ldr	r3, [pc, #260]	; (13a8 <__call_exitprocs+0x114>)
    12a2:	b085      	sub	sp, #20
    12a4:	681f      	ldr	r7, [r3, #0]
    12a6:	9003      	str	r0, [sp, #12]
    12a8:	468b      	mov	fp, r1
    12aa:	2f00      	cmp	r7, #0
    12ac:	d039      	beq.n	1322 <__call_exitprocs+0x8e>
    12ae:	469a      	mov	sl, r3
    12b0:	2388      	movs	r3, #136	; 0x88
    12b2:	58fe      	ldr	r6, [r7, r3]
    12b4:	687b      	ldr	r3, [r7, #4]
    12b6:	1e5c      	subs	r4, r3, #1
    12b8:	d456      	bmi.n	1368 <__call_exitprocs+0xd4>
    12ba:	009b      	lsls	r3, r3, #2
    12bc:	4698      	mov	r8, r3
    12be:	0033      	movs	r3, r6
    12c0:	4443      	add	r3, r8
    12c2:	46b1      	mov	r9, r6
    12c4:	9301      	str	r3, [sp, #4]
    12c6:	2500      	movs	r5, #0
    12c8:	465e      	mov	r6, fp
    12ca:	e00a      	b.n	12e2 <__call_exitprocs+0x4e>
    12cc:	464b      	mov	r3, r9
    12ce:	2b00      	cmp	r3, #0
    12d0:	d004      	beq.n	12dc <__call_exitprocs+0x48>
    12d2:	9b01      	ldr	r3, [sp, #4]
    12d4:	195b      	adds	r3, r3, r5
    12d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    12d8:	42b3      	cmp	r3, r6
    12da:	d004      	beq.n	12e6 <__call_exitprocs+0x52>
    12dc:	3d04      	subs	r5, #4
    12de:	3c01      	subs	r4, #1
    12e0:	d340      	bcc.n	1364 <__call_exitprocs+0xd0>
    12e2:	2e00      	cmp	r6, #0
    12e4:	d1f2      	bne.n	12cc <__call_exitprocs+0x38>
    12e6:	4643      	mov	r3, r8
    12e8:	6879      	ldr	r1, [r7, #4]
    12ea:	18eb      	adds	r3, r5, r3
    12ec:	18fb      	adds	r3, r7, r3
    12ee:	3901      	subs	r1, #1
    12f0:	685a      	ldr	r2, [r3, #4]
    12f2:	42a1      	cmp	r1, r4
    12f4:	d034      	beq.n	1360 <__call_exitprocs+0xcc>
    12f6:	2100      	movs	r1, #0
    12f8:	6059      	str	r1, [r3, #4]
    12fa:	2a00      	cmp	r2, #0
    12fc:	d0ee      	beq.n	12dc <__call_exitprocs+0x48>
    12fe:	687b      	ldr	r3, [r7, #4]
    1300:	469b      	mov	fp, r3
    1302:	464b      	mov	r3, r9
    1304:	2b00      	cmp	r3, #0
    1306:	d113      	bne.n	1330 <__call_exitprocs+0x9c>
    1308:	4790      	blx	r2
    130a:	687b      	ldr	r3, [r7, #4]
    130c:	455b      	cmp	r3, fp
    130e:	d103      	bne.n	1318 <__call_exitprocs+0x84>
    1310:	4653      	mov	r3, sl
    1312:	681b      	ldr	r3, [r3, #0]
    1314:	42bb      	cmp	r3, r7
    1316:	d0e1      	beq.n	12dc <__call_exitprocs+0x48>
    1318:	4b23      	ldr	r3, [pc, #140]	; (13a8 <__call_exitprocs+0x114>)
    131a:	46b3      	mov	fp, r6
    131c:	681f      	ldr	r7, [r3, #0]
    131e:	2f00      	cmp	r7, #0
    1320:	d1c5      	bne.n	12ae <__call_exitprocs+0x1a>
    1322:	b005      	add	sp, #20
    1324:	bc3c      	pop	{r2, r3, r4, r5}
    1326:	4690      	mov	r8, r2
    1328:	4699      	mov	r9, r3
    132a:	46a2      	mov	sl, r4
    132c:	46ab      	mov	fp, r5
    132e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1330:	2301      	movs	r3, #1
    1332:	2080      	movs	r0, #128	; 0x80
    1334:	4649      	mov	r1, r9
    1336:	40a3      	lsls	r3, r4
    1338:	0040      	lsls	r0, r0, #1
    133a:	5809      	ldr	r1, [r1, r0]
    133c:	9102      	str	r1, [sp, #8]
    133e:	4219      	tst	r1, r3
    1340:	d0e2      	beq.n	1308 <__call_exitprocs+0x74>
    1342:	9801      	ldr	r0, [sp, #4]
    1344:	1f29      	subs	r1, r5, #4
    1346:	5841      	ldr	r1, [r0, r1]
    1348:	4648      	mov	r0, r9
    134a:	468c      	mov	ip, r1
    134c:	2182      	movs	r1, #130	; 0x82
    134e:	0049      	lsls	r1, r1, #1
    1350:	5841      	ldr	r1, [r0, r1]
    1352:	9102      	str	r1, [sp, #8]
    1354:	4219      	tst	r1, r3
    1356:	d123      	bne.n	13a0 <__call_exitprocs+0x10c>
    1358:	4661      	mov	r1, ip
    135a:	9803      	ldr	r0, [sp, #12]
    135c:	4790      	blx	r2
    135e:	e7d4      	b.n	130a <__call_exitprocs+0x76>
    1360:	607c      	str	r4, [r7, #4]
    1362:	e7ca      	b.n	12fa <__call_exitprocs+0x66>
    1364:	46b3      	mov	fp, r6
    1366:	464e      	mov	r6, r9
    1368:	4b10      	ldr	r3, [pc, #64]	; (13ac <__call_exitprocs+0x118>)
    136a:	2b00      	cmp	r3, #0
    136c:	d0d9      	beq.n	1322 <__call_exitprocs+0x8e>
    136e:	687a      	ldr	r2, [r7, #4]
    1370:	683b      	ldr	r3, [r7, #0]
    1372:	2a00      	cmp	r2, #0
    1374:	d111      	bne.n	139a <__call_exitprocs+0x106>
    1376:	2b00      	cmp	r3, #0
    1378:	d00f      	beq.n	139a <__call_exitprocs+0x106>
    137a:	4652      	mov	r2, sl
    137c:	6013      	str	r3, [r2, #0]
    137e:	2e00      	cmp	r6, #0
    1380:	d002      	beq.n	1388 <__call_exitprocs+0xf4>
    1382:	0030      	movs	r0, r6
    1384:	e000      	b.n	1388 <__call_exitprocs+0xf4>
    1386:	bf00      	nop
    1388:	0038      	movs	r0, r7
    138a:	e000      	b.n	138e <__call_exitprocs+0xfa>
    138c:	bf00      	nop
    138e:	4653      	mov	r3, sl
    1390:	681f      	ldr	r7, [r3, #0]
    1392:	2f00      	cmp	r7, #0
    1394:	d000      	beq.n	1398 <__call_exitprocs+0x104>
    1396:	e78b      	b.n	12b0 <__call_exitprocs+0x1c>
    1398:	e7c3      	b.n	1322 <__call_exitprocs+0x8e>
    139a:	46ba      	mov	sl, r7
    139c:	001f      	movs	r7, r3
    139e:	e7f8      	b.n	1392 <__call_exitprocs+0xfe>
    13a0:	4660      	mov	r0, ip
    13a2:	4790      	blx	r2
    13a4:	e7b1      	b.n	130a <__call_exitprocs+0x76>
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	20000128 	.word	0x20000128
    13ac:	00000000 	.word	0x00000000

000013b0 <__fp_lock>:
    13b0:	2000      	movs	r0, #0
    13b2:	4770      	bx	lr

000013b4 <_cleanup_r>:
    13b4:	b510      	push	{r4, lr}
    13b6:	4902      	ldr	r1, [pc, #8]	; (13c0 <_cleanup_r+0xc>)
    13b8:	f000 f93c 	bl	1634 <_fwalk_reent>
    13bc:	bd10      	pop	{r4, pc}
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	000022a9 	.word	0x000022a9

000013c4 <__fp_unlock>:
    13c4:	2000      	movs	r0, #0
    13c6:	4770      	bx	lr

000013c8 <__sfmoreglue>:
    13c8:	b570      	push	{r4, r5, r6, lr}
    13ca:	2468      	movs	r4, #104	; 0x68
    13cc:	1e4a      	subs	r2, r1, #1
    13ce:	4354      	muls	r4, r2
    13d0:	000e      	movs	r6, r1
    13d2:	0021      	movs	r1, r4
    13d4:	3174      	adds	r1, #116	; 0x74
    13d6:	f000 f953 	bl	1680 <_malloc_r>
    13da:	1e05      	subs	r5, r0, #0
    13dc:	d009      	beq.n	13f2 <__sfmoreglue+0x2a>
    13de:	2300      	movs	r3, #0
    13e0:	0022      	movs	r2, r4
    13e2:	6003      	str	r3, [r0, #0]
    13e4:	6046      	str	r6, [r0, #4]
    13e6:	300c      	adds	r0, #12
    13e8:	60a8      	str	r0, [r5, #8]
    13ea:	3268      	adds	r2, #104	; 0x68
    13ec:	2100      	movs	r1, #0
    13ee:	f7ff fe59 	bl	10a4 <memset>
    13f2:	0028      	movs	r0, r5
    13f4:	bd70      	pop	{r4, r5, r6, pc}
    13f6:	46c0      	nop			; (mov r8, r8)

000013f8 <__sfp>:
    13f8:	4b1e      	ldr	r3, [pc, #120]	; (1474 <__sfp+0x7c>)
    13fa:	b570      	push	{r4, r5, r6, lr}
    13fc:	681d      	ldr	r5, [r3, #0]
    13fe:	0006      	movs	r6, r0
    1400:	69ab      	ldr	r3, [r5, #24]
    1402:	2b00      	cmp	r3, #0
    1404:	d027      	beq.n	1456 <__sfp+0x5e>
    1406:	3548      	adds	r5, #72	; 0x48
    1408:	686b      	ldr	r3, [r5, #4]
    140a:	68ac      	ldr	r4, [r5, #8]
    140c:	3b01      	subs	r3, #1
    140e:	d503      	bpl.n	1418 <__sfp+0x20>
    1410:	e01c      	b.n	144c <__sfp+0x54>
    1412:	3468      	adds	r4, #104	; 0x68
    1414:	3b01      	subs	r3, #1
    1416:	d319      	bcc.n	144c <__sfp+0x54>
    1418:	210c      	movs	r1, #12
    141a:	5e62      	ldrsh	r2, [r4, r1]
    141c:	2a00      	cmp	r2, #0
    141e:	d1f8      	bne.n	1412 <__sfp+0x1a>
    1420:	2500      	movs	r5, #0
    1422:	0020      	movs	r0, r4
    1424:	4b14      	ldr	r3, [pc, #80]	; (1478 <__sfp+0x80>)
    1426:	6665      	str	r5, [r4, #100]	; 0x64
    1428:	6025      	str	r5, [r4, #0]
    142a:	6065      	str	r5, [r4, #4]
    142c:	60a5      	str	r5, [r4, #8]
    142e:	60e3      	str	r3, [r4, #12]
    1430:	6125      	str	r5, [r4, #16]
    1432:	6165      	str	r5, [r4, #20]
    1434:	61a5      	str	r5, [r4, #24]
    1436:	2208      	movs	r2, #8
    1438:	2100      	movs	r1, #0
    143a:	305c      	adds	r0, #92	; 0x5c
    143c:	f7ff fe32 	bl	10a4 <memset>
    1440:	6365      	str	r5, [r4, #52]	; 0x34
    1442:	63a5      	str	r5, [r4, #56]	; 0x38
    1444:	64a5      	str	r5, [r4, #72]	; 0x48
    1446:	64e5      	str	r5, [r4, #76]	; 0x4c
    1448:	0020      	movs	r0, r4
    144a:	bd70      	pop	{r4, r5, r6, pc}
    144c:	6828      	ldr	r0, [r5, #0]
    144e:	2800      	cmp	r0, #0
    1450:	d005      	beq.n	145e <__sfp+0x66>
    1452:	0005      	movs	r5, r0
    1454:	e7d8      	b.n	1408 <__sfp+0x10>
    1456:	0028      	movs	r0, r5
    1458:	f000 f810 	bl	147c <__sinit.part.0>
    145c:	e7d3      	b.n	1406 <__sfp+0xe>
    145e:	2104      	movs	r1, #4
    1460:	0030      	movs	r0, r6
    1462:	f7ff ffb1 	bl	13c8 <__sfmoreglue>
    1466:	6028      	str	r0, [r5, #0]
    1468:	2800      	cmp	r0, #0
    146a:	d1f2      	bne.n	1452 <__sfp+0x5a>
    146c:	230c      	movs	r3, #12
    146e:	2400      	movs	r4, #0
    1470:	6033      	str	r3, [r6, #0]
    1472:	e7e9      	b.n	1448 <__sfp+0x50>
    1474:	00002d24 	.word	0x00002d24
    1478:	ffff0001 	.word	0xffff0001

0000147c <__sinit.part.0>:
    147c:	b5f0      	push	{r4, r5, r6, r7, lr}
    147e:	46d6      	mov	lr, sl
    1480:	464f      	mov	r7, r9
    1482:	4646      	mov	r6, r8
    1484:	4b38      	ldr	r3, [pc, #224]	; (1568 <__sinit.part.0+0xec>)
    1486:	b5c0      	push	{r6, r7, lr}
    1488:	6283      	str	r3, [r0, #40]	; 0x28
    148a:	2300      	movs	r3, #0
    148c:	6483      	str	r3, [r0, #72]	; 0x48
    148e:	64c3      	str	r3, [r0, #76]	; 0x4c
    1490:	6503      	str	r3, [r0, #80]	; 0x50
    1492:	4b36      	ldr	r3, [pc, #216]	; (156c <__sinit.part.0+0xf0>)
    1494:	b082      	sub	sp, #8
    1496:	681b      	ldr	r3, [r3, #0]
    1498:	0005      	movs	r5, r0
    149a:	9301      	str	r3, [sp, #4]
    149c:	4298      	cmp	r0, r3
    149e:	d060      	beq.n	1562 <__sinit.part.0+0xe6>
    14a0:	0028      	movs	r0, r5
    14a2:	f7ff ffa9 	bl	13f8 <__sfp>
    14a6:	6068      	str	r0, [r5, #4]
    14a8:	0028      	movs	r0, r5
    14aa:	f7ff ffa5 	bl	13f8 <__sfp>
    14ae:	60a8      	str	r0, [r5, #8]
    14b0:	0028      	movs	r0, r5
    14b2:	f7ff ffa1 	bl	13f8 <__sfp>
    14b6:	686e      	ldr	r6, [r5, #4]
    14b8:	2400      	movs	r4, #0
    14ba:	60e8      	str	r0, [r5, #12]
    14bc:	2304      	movs	r3, #4
    14be:	0030      	movs	r0, r6
    14c0:	6674      	str	r4, [r6, #100]	; 0x64
    14c2:	6034      	str	r4, [r6, #0]
    14c4:	6074      	str	r4, [r6, #4]
    14c6:	60b4      	str	r4, [r6, #8]
    14c8:	60f3      	str	r3, [r6, #12]
    14ca:	6134      	str	r4, [r6, #16]
    14cc:	6174      	str	r4, [r6, #20]
    14ce:	61b4      	str	r4, [r6, #24]
    14d0:	2208      	movs	r2, #8
    14d2:	2100      	movs	r1, #0
    14d4:	305c      	adds	r0, #92	; 0x5c
    14d6:	f7ff fde5 	bl	10a4 <memset>
    14da:	4b25      	ldr	r3, [pc, #148]	; (1570 <__sinit.part.0+0xf4>)
    14dc:	4f25      	ldr	r7, [pc, #148]	; (1574 <__sinit.part.0+0xf8>)
    14de:	469a      	mov	sl, r3
    14e0:	6273      	str	r3, [r6, #36]	; 0x24
    14e2:	4b25      	ldr	r3, [pc, #148]	; (1578 <__sinit.part.0+0xfc>)
    14e4:	6337      	str	r7, [r6, #48]	; 0x30
    14e6:	4699      	mov	r9, r3
    14e8:	62b3      	str	r3, [r6, #40]	; 0x28
    14ea:	4b24      	ldr	r3, [pc, #144]	; (157c <__sinit.part.0+0x100>)
    14ec:	6236      	str	r6, [r6, #32]
    14ee:	62f3      	str	r3, [r6, #44]	; 0x2c
    14f0:	68ae      	ldr	r6, [r5, #8]
    14f2:	4698      	mov	r8, r3
    14f4:	0030      	movs	r0, r6
    14f6:	4b22      	ldr	r3, [pc, #136]	; (1580 <__sinit.part.0+0x104>)
    14f8:	6674      	str	r4, [r6, #100]	; 0x64
    14fa:	6034      	str	r4, [r6, #0]
    14fc:	6074      	str	r4, [r6, #4]
    14fe:	60b4      	str	r4, [r6, #8]
    1500:	60f3      	str	r3, [r6, #12]
    1502:	6134      	str	r4, [r6, #16]
    1504:	6174      	str	r4, [r6, #20]
    1506:	61b4      	str	r4, [r6, #24]
    1508:	2208      	movs	r2, #8
    150a:	2100      	movs	r1, #0
    150c:	305c      	adds	r0, #92	; 0x5c
    150e:	f7ff fdc9 	bl	10a4 <memset>
    1512:	4653      	mov	r3, sl
    1514:	6273      	str	r3, [r6, #36]	; 0x24
    1516:	464b      	mov	r3, r9
    1518:	62b3      	str	r3, [r6, #40]	; 0x28
    151a:	4643      	mov	r3, r8
    151c:	6337      	str	r7, [r6, #48]	; 0x30
    151e:	62f3      	str	r3, [r6, #44]	; 0x2c
    1520:	6236      	str	r6, [r6, #32]
    1522:	68ee      	ldr	r6, [r5, #12]
    1524:	4b17      	ldr	r3, [pc, #92]	; (1584 <__sinit.part.0+0x108>)
    1526:	0030      	movs	r0, r6
    1528:	60f3      	str	r3, [r6, #12]
    152a:	6674      	str	r4, [r6, #100]	; 0x64
    152c:	6034      	str	r4, [r6, #0]
    152e:	6074      	str	r4, [r6, #4]
    1530:	60b4      	str	r4, [r6, #8]
    1532:	6134      	str	r4, [r6, #16]
    1534:	6174      	str	r4, [r6, #20]
    1536:	61b4      	str	r4, [r6, #24]
    1538:	2208      	movs	r2, #8
    153a:	2100      	movs	r1, #0
    153c:	305c      	adds	r0, #92	; 0x5c
    153e:	f7ff fdb1 	bl	10a4 <memset>
    1542:	4653      	mov	r3, sl
    1544:	6273      	str	r3, [r6, #36]	; 0x24
    1546:	464b      	mov	r3, r9
    1548:	62b3      	str	r3, [r6, #40]	; 0x28
    154a:	4643      	mov	r3, r8
    154c:	62f3      	str	r3, [r6, #44]	; 0x2c
    154e:	2301      	movs	r3, #1
    1550:	6236      	str	r6, [r6, #32]
    1552:	6337      	str	r7, [r6, #48]	; 0x30
    1554:	61ab      	str	r3, [r5, #24]
    1556:	b002      	add	sp, #8
    1558:	bc1c      	pop	{r2, r3, r4}
    155a:	4690      	mov	r8, r2
    155c:	4699      	mov	r9, r3
    155e:	46a2      	mov	sl, r4
    1560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1562:	2301      	movs	r3, #1
    1564:	6183      	str	r3, [r0, #24]
    1566:	e79b      	b.n	14a0 <__sinit.part.0+0x24>
    1568:	000013b5 	.word	0x000013b5
    156c:	00002d24 	.word	0x00002d24
    1570:	00001e89 	.word	0x00001e89
    1574:	00001f1d 	.word	0x00001f1d
    1578:	00001eb5 	.word	0x00001eb5
    157c:	00001ef1 	.word	0x00001ef1
    1580:	00010009 	.word	0x00010009
    1584:	00020012 	.word	0x00020012

00001588 <_cleanup>:
    1588:	b510      	push	{r4, lr}
    158a:	4b03      	ldr	r3, [pc, #12]	; (1598 <_cleanup+0x10>)
    158c:	4903      	ldr	r1, [pc, #12]	; (159c <_cleanup+0x14>)
    158e:	6818      	ldr	r0, [r3, #0]
    1590:	f000 f850 	bl	1634 <_fwalk_reent>
    1594:	bd10      	pop	{r4, pc}
    1596:	46c0      	nop			; (mov r8, r8)
    1598:	00002d24 	.word	0x00002d24
    159c:	000022a9 	.word	0x000022a9

000015a0 <__sinit>:
    15a0:	6983      	ldr	r3, [r0, #24]
    15a2:	b510      	push	{r4, lr}
    15a4:	2b00      	cmp	r3, #0
    15a6:	d101      	bne.n	15ac <__sinit+0xc>
    15a8:	f7ff ff68 	bl	147c <__sinit.part.0>
    15ac:	bd10      	pop	{r4, pc}
    15ae:	46c0      	nop			; (mov r8, r8)

000015b0 <__sfp_lock_acquire>:
    15b0:	4770      	bx	lr
    15b2:	46c0      	nop			; (mov r8, r8)

000015b4 <__sfp_lock_release>:
    15b4:	4770      	bx	lr
    15b6:	46c0      	nop			; (mov r8, r8)

000015b8 <__sinit_lock_acquire>:
    15b8:	4770      	bx	lr
    15ba:	46c0      	nop			; (mov r8, r8)

000015bc <__sinit_lock_release>:
    15bc:	4770      	bx	lr
    15be:	46c0      	nop			; (mov r8, r8)

000015c0 <__fp_lock_all>:
    15c0:	b510      	push	{r4, lr}
    15c2:	4b03      	ldr	r3, [pc, #12]	; (15d0 <__fp_lock_all+0x10>)
    15c4:	4903      	ldr	r1, [pc, #12]	; (15d4 <__fp_lock_all+0x14>)
    15c6:	6818      	ldr	r0, [r3, #0]
    15c8:	f000 f812 	bl	15f0 <_fwalk>
    15cc:	bd10      	pop	{r4, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	20000010 	.word	0x20000010
    15d4:	000013b1 	.word	0x000013b1

000015d8 <__fp_unlock_all>:
    15d8:	b510      	push	{r4, lr}
    15da:	4b03      	ldr	r3, [pc, #12]	; (15e8 <__fp_unlock_all+0x10>)
    15dc:	4903      	ldr	r1, [pc, #12]	; (15ec <__fp_unlock_all+0x14>)
    15de:	6818      	ldr	r0, [r3, #0]
    15e0:	f000 f806 	bl	15f0 <_fwalk>
    15e4:	bd10      	pop	{r4, pc}
    15e6:	46c0      	nop			; (mov r8, r8)
    15e8:	20000010 	.word	0x20000010
    15ec:	000013c5 	.word	0x000013c5

000015f0 <_fwalk>:
    15f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15f2:	46c6      	mov	lr, r8
    15f4:	3048      	adds	r0, #72	; 0x48
    15f6:	b500      	push	{lr}
    15f8:	4688      	mov	r8, r1
    15fa:	0007      	movs	r7, r0
    15fc:	2600      	movs	r6, #0
    15fe:	2800      	cmp	r0, #0
    1600:	d013      	beq.n	162a <_fwalk+0x3a>
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	68bc      	ldr	r4, [r7, #8]
    1606:	1e5d      	subs	r5, r3, #1
    1608:	d40c      	bmi.n	1624 <_fwalk+0x34>
    160a:	89a3      	ldrh	r3, [r4, #12]
    160c:	2b01      	cmp	r3, #1
    160e:	d906      	bls.n	161e <_fwalk+0x2e>
    1610:	220e      	movs	r2, #14
    1612:	5ea3      	ldrsh	r3, [r4, r2]
    1614:	3301      	adds	r3, #1
    1616:	d002      	beq.n	161e <_fwalk+0x2e>
    1618:	0020      	movs	r0, r4
    161a:	47c0      	blx	r8
    161c:	4306      	orrs	r6, r0
    161e:	3468      	adds	r4, #104	; 0x68
    1620:	3d01      	subs	r5, #1
    1622:	d2f2      	bcs.n	160a <_fwalk+0x1a>
    1624:	683f      	ldr	r7, [r7, #0]
    1626:	2f00      	cmp	r7, #0
    1628:	d1eb      	bne.n	1602 <_fwalk+0x12>
    162a:	0030      	movs	r0, r6
    162c:	bc04      	pop	{r2}
    162e:	4690      	mov	r8, r2
    1630:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1632:	46c0      	nop			; (mov r8, r8)

00001634 <_fwalk_reent>:
    1634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1636:	4647      	mov	r7, r8
    1638:	46ce      	mov	lr, r9
    163a:	b580      	push	{r7, lr}
    163c:	0007      	movs	r7, r0
    163e:	3748      	adds	r7, #72	; 0x48
    1640:	4680      	mov	r8, r0
    1642:	4689      	mov	r9, r1
    1644:	2600      	movs	r6, #0
    1646:	2f00      	cmp	r7, #0
    1648:	d014      	beq.n	1674 <_fwalk_reent+0x40>
    164a:	687b      	ldr	r3, [r7, #4]
    164c:	68bc      	ldr	r4, [r7, #8]
    164e:	1e5d      	subs	r5, r3, #1
    1650:	d40d      	bmi.n	166e <_fwalk_reent+0x3a>
    1652:	89a3      	ldrh	r3, [r4, #12]
    1654:	2b01      	cmp	r3, #1
    1656:	d907      	bls.n	1668 <_fwalk_reent+0x34>
    1658:	220e      	movs	r2, #14
    165a:	5ea3      	ldrsh	r3, [r4, r2]
    165c:	3301      	adds	r3, #1
    165e:	d003      	beq.n	1668 <_fwalk_reent+0x34>
    1660:	0021      	movs	r1, r4
    1662:	4640      	mov	r0, r8
    1664:	47c8      	blx	r9
    1666:	4306      	orrs	r6, r0
    1668:	3468      	adds	r4, #104	; 0x68
    166a:	3d01      	subs	r5, #1
    166c:	d2f1      	bcs.n	1652 <_fwalk_reent+0x1e>
    166e:	683f      	ldr	r7, [r7, #0]
    1670:	2f00      	cmp	r7, #0
    1672:	d1ea      	bne.n	164a <_fwalk_reent+0x16>
    1674:	0030      	movs	r0, r6
    1676:	bc0c      	pop	{r2, r3}
    1678:	4690      	mov	r8, r2
    167a:	4699      	mov	r9, r3
    167c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    167e:	46c0      	nop			; (mov r8, r8)

00001680 <_malloc_r>:
    1680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1682:	2303      	movs	r3, #3
    1684:	1ccd      	adds	r5, r1, #3
    1686:	439d      	bics	r5, r3
    1688:	3508      	adds	r5, #8
    168a:	0006      	movs	r6, r0
    168c:	2d0c      	cmp	r5, #12
    168e:	d22a      	bcs.n	16e6 <_malloc_r+0x66>
    1690:	250c      	movs	r5, #12
    1692:	42a9      	cmp	r1, r5
    1694:	d829      	bhi.n	16ea <_malloc_r+0x6a>
    1696:	0030      	movs	r0, r6
    1698:	f001 f91e 	bl	28d8 <__malloc_lock>
    169c:	4f2a      	ldr	r7, [pc, #168]	; (1748 <_malloc_r+0xc8>)
    169e:	683a      	ldr	r2, [r7, #0]
    16a0:	2a00      	cmp	r2, #0
    16a2:	d00a      	beq.n	16ba <_malloc_r+0x3a>
    16a4:	6813      	ldr	r3, [r2, #0]
    16a6:	1b5b      	subs	r3, r3, r5
    16a8:	d404      	bmi.n	16b4 <_malloc_r+0x34>
    16aa:	e040      	b.n	172e <_malloc_r+0xae>
    16ac:	6823      	ldr	r3, [r4, #0]
    16ae:	1b5b      	subs	r3, r3, r5
    16b0:	d51f      	bpl.n	16f2 <_malloc_r+0x72>
    16b2:	0022      	movs	r2, r4
    16b4:	6854      	ldr	r4, [r2, #4]
    16b6:	2c00      	cmp	r4, #0
    16b8:	d1f8      	bne.n	16ac <_malloc_r+0x2c>
    16ba:	687b      	ldr	r3, [r7, #4]
    16bc:	2b00      	cmp	r3, #0
    16be:	d03d      	beq.n	173c <_malloc_r+0xbc>
    16c0:	0029      	movs	r1, r5
    16c2:	0030      	movs	r0, r6
    16c4:	f000 fbce 	bl	1e64 <_sbrk_r>
    16c8:	1c43      	adds	r3, r0, #1
    16ca:	d029      	beq.n	1720 <_malloc_r+0xa0>
    16cc:	2303      	movs	r3, #3
    16ce:	1cc4      	adds	r4, r0, #3
    16d0:	439c      	bics	r4, r3
    16d2:	42a0      	cmp	r0, r4
    16d4:	d005      	beq.n	16e2 <_malloc_r+0x62>
    16d6:	1a21      	subs	r1, r4, r0
    16d8:	0030      	movs	r0, r6
    16da:	f000 fbc3 	bl	1e64 <_sbrk_r>
    16de:	1c43      	adds	r3, r0, #1
    16e0:	d01e      	beq.n	1720 <_malloc_r+0xa0>
    16e2:	6025      	str	r5, [r4, #0]
    16e4:	e00a      	b.n	16fc <_malloc_r+0x7c>
    16e6:	2d00      	cmp	r5, #0
    16e8:	dad3      	bge.n	1692 <_malloc_r+0x12>
    16ea:	230c      	movs	r3, #12
    16ec:	2000      	movs	r0, #0
    16ee:	6033      	str	r3, [r6, #0]
    16f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16f2:	2b0b      	cmp	r3, #11
    16f4:	d90f      	bls.n	1716 <_malloc_r+0x96>
    16f6:	6023      	str	r3, [r4, #0]
    16f8:	18e4      	adds	r4, r4, r3
    16fa:	6025      	str	r5, [r4, #0]
    16fc:	0030      	movs	r0, r6
    16fe:	f001 f8ed 	bl	28dc <__malloc_unlock>
    1702:	0020      	movs	r0, r4
    1704:	2207      	movs	r2, #7
    1706:	300b      	adds	r0, #11
    1708:	1d23      	adds	r3, r4, #4
    170a:	4390      	bics	r0, r2
    170c:	1ac3      	subs	r3, r0, r3
    170e:	d0ef      	beq.n	16f0 <_malloc_r+0x70>
    1710:	425a      	negs	r2, r3
    1712:	50e2      	str	r2, [r4, r3]
    1714:	e7ec      	b.n	16f0 <_malloc_r+0x70>
    1716:	42a2      	cmp	r2, r4
    1718:	d00d      	beq.n	1736 <_malloc_r+0xb6>
    171a:	6863      	ldr	r3, [r4, #4]
    171c:	6053      	str	r3, [r2, #4]
    171e:	e7ed      	b.n	16fc <_malloc_r+0x7c>
    1720:	230c      	movs	r3, #12
    1722:	0030      	movs	r0, r6
    1724:	6033      	str	r3, [r6, #0]
    1726:	f001 f8d9 	bl	28dc <__malloc_unlock>
    172a:	2000      	movs	r0, #0
    172c:	e7e0      	b.n	16f0 <_malloc_r+0x70>
    172e:	0014      	movs	r4, r2
    1730:	2b0b      	cmp	r3, #11
    1732:	d8e0      	bhi.n	16f6 <_malloc_r+0x76>
    1734:	6854      	ldr	r4, [r2, #4]
    1736:	603c      	str	r4, [r7, #0]
    1738:	0014      	movs	r4, r2
    173a:	e7df      	b.n	16fc <_malloc_r+0x7c>
    173c:	2100      	movs	r1, #0
    173e:	0030      	movs	r0, r6
    1740:	f000 fb90 	bl	1e64 <_sbrk_r>
    1744:	6078      	str	r0, [r7, #4]
    1746:	e7bb      	b.n	16c0 <_malloc_r+0x40>
    1748:	2000012c 	.word	0x2000012c

0000174c <__sfputc_r>:
    174c:	6893      	ldr	r3, [r2, #8]
    174e:	b510      	push	{r4, lr}
    1750:	3b01      	subs	r3, #1
    1752:	6093      	str	r3, [r2, #8]
    1754:	2b00      	cmp	r3, #0
    1756:	db05      	blt.n	1764 <__sfputc_r+0x18>
    1758:	6813      	ldr	r3, [r2, #0]
    175a:	1c58      	adds	r0, r3, #1
    175c:	6010      	str	r0, [r2, #0]
    175e:	0008      	movs	r0, r1
    1760:	7019      	strb	r1, [r3, #0]
    1762:	bd10      	pop	{r4, pc}
    1764:	6994      	ldr	r4, [r2, #24]
    1766:	42a3      	cmp	r3, r4
    1768:	db01      	blt.n	176e <__sfputc_r+0x22>
    176a:	290a      	cmp	r1, #10
    176c:	d1f4      	bne.n	1758 <__sfputc_r+0xc>
    176e:	f000 fbdb 	bl	1f28 <__swbuf_r>
    1772:	e7f6      	b.n	1762 <__sfputc_r+0x16>

00001774 <__sfputs_r>:
    1774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1776:	0006      	movs	r6, r0
    1778:	000f      	movs	r7, r1
    177a:	2b00      	cmp	r3, #0
    177c:	d00d      	beq.n	179a <__sfputs_r+0x26>
    177e:	0014      	movs	r4, r2
    1780:	18d5      	adds	r5, r2, r3
    1782:	e002      	b.n	178a <__sfputs_r+0x16>
    1784:	3401      	adds	r4, #1
    1786:	42ac      	cmp	r4, r5
    1788:	d007      	beq.n	179a <__sfputs_r+0x26>
    178a:	7821      	ldrb	r1, [r4, #0]
    178c:	003a      	movs	r2, r7
    178e:	0030      	movs	r0, r6
    1790:	f7ff ffdc 	bl	174c <__sfputc_r>
    1794:	1c43      	adds	r3, r0, #1
    1796:	d1f5      	bne.n	1784 <__sfputs_r+0x10>
    1798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    179a:	2000      	movs	r0, #0
    179c:	e7fc      	b.n	1798 <__sfputs_r+0x24>
    179e:	46c0      	nop			; (mov r8, r8)

000017a0 <__sprint_r>:
    17a0:	6893      	ldr	r3, [r2, #8]
    17a2:	b510      	push	{r4, lr}
    17a4:	0014      	movs	r4, r2
    17a6:	2b00      	cmp	r3, #0
    17a8:	d102      	bne.n	17b0 <__sprint_r+0x10>
    17aa:	2000      	movs	r0, #0
    17ac:	6053      	str	r3, [r2, #4]
    17ae:	bd10      	pop	{r4, pc}
    17b0:	f000 fdbc 	bl	232c <__sfvwrite_r>
    17b4:	2300      	movs	r3, #0
    17b6:	60a3      	str	r3, [r4, #8]
    17b8:	6063      	str	r3, [r4, #4]
    17ba:	e7f8      	b.n	17ae <__sprint_r+0xe>

000017bc <_vfiprintf_r>:
    17bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17be:	46de      	mov	lr, fp
    17c0:	4645      	mov	r5, r8
    17c2:	4657      	mov	r7, sl
    17c4:	464e      	mov	r6, r9
    17c6:	b5e0      	push	{r5, r6, r7, lr}
    17c8:	b09f      	sub	sp, #124	; 0x7c
    17ca:	9002      	str	r0, [sp, #8]
    17cc:	468b      	mov	fp, r1
    17ce:	0014      	movs	r4, r2
    17d0:	001d      	movs	r5, r3
    17d2:	2800      	cmp	r0, #0
    17d4:	d004      	beq.n	17e0 <_vfiprintf_r+0x24>
    17d6:	6983      	ldr	r3, [r0, #24]
    17d8:	9303      	str	r3, [sp, #12]
    17da:	2b00      	cmp	r3, #0
    17dc:	d100      	bne.n	17e0 <_vfiprintf_r+0x24>
    17de:	e0bd      	b.n	195c <_vfiprintf_r+0x1a0>
    17e0:	4b9f      	ldr	r3, [pc, #636]	; (1a60 <_vfiprintf_r+0x2a4>)
    17e2:	459b      	cmp	fp, r3
    17e4:	d100      	bne.n	17e8 <_vfiprintf_r+0x2c>
    17e6:	e0bf      	b.n	1968 <_vfiprintf_r+0x1ac>
    17e8:	4b9e      	ldr	r3, [pc, #632]	; (1a64 <_vfiprintf_r+0x2a8>)
    17ea:	459b      	cmp	fp, r3
    17ec:	d100      	bne.n	17f0 <_vfiprintf_r+0x34>
    17ee:	e0cd      	b.n	198c <_vfiprintf_r+0x1d0>
    17f0:	4b9d      	ldr	r3, [pc, #628]	; (1a68 <_vfiprintf_r+0x2ac>)
    17f2:	459b      	cmp	fp, r3
    17f4:	d100      	bne.n	17f8 <_vfiprintf_r+0x3c>
    17f6:	e12f      	b.n	1a58 <_vfiprintf_r+0x29c>
    17f8:	465b      	mov	r3, fp
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	071b      	lsls	r3, r3, #28
    17fe:	d400      	bmi.n	1802 <_vfiprintf_r+0x46>
    1800:	e0ba      	b.n	1978 <_vfiprintf_r+0x1bc>
    1802:	465b      	mov	r3, fp
    1804:	691b      	ldr	r3, [r3, #16]
    1806:	2b00      	cmp	r3, #0
    1808:	d100      	bne.n	180c <_vfiprintf_r+0x50>
    180a:	e0b5      	b.n	1978 <_vfiprintf_r+0x1bc>
    180c:	2300      	movs	r3, #0
    180e:	ae06      	add	r6, sp, #24
    1810:	6173      	str	r3, [r6, #20]
    1812:	3320      	adds	r3, #32
    1814:	7673      	strb	r3, [r6, #25]
    1816:	3310      	adds	r3, #16
    1818:	76b3      	strb	r3, [r6, #26]
    181a:	4b94      	ldr	r3, [pc, #592]	; (1a6c <_vfiprintf_r+0x2b0>)
    181c:	9505      	str	r5, [sp, #20]
    181e:	4698      	mov	r8, r3
    1820:	2301      	movs	r3, #1
    1822:	4699      	mov	r9, r3
    1824:	7823      	ldrb	r3, [r4, #0]
    1826:	2b00      	cmp	r3, #0
    1828:	d100      	bne.n	182c <_vfiprintf_r+0x70>
    182a:	e08b      	b.n	1944 <_vfiprintf_r+0x188>
    182c:	0025      	movs	r5, r4
    182e:	2b25      	cmp	r3, #37	; 0x25
    1830:	d103      	bne.n	183a <_vfiprintf_r+0x7e>
    1832:	e017      	b.n	1864 <_vfiprintf_r+0xa8>
    1834:	2b25      	cmp	r3, #37	; 0x25
    1836:	d100      	bne.n	183a <_vfiprintf_r+0x7e>
    1838:	e0e4      	b.n	1a04 <_vfiprintf_r+0x248>
    183a:	3501      	adds	r5, #1
    183c:	782b      	ldrb	r3, [r5, #0]
    183e:	2b00      	cmp	r3, #0
    1840:	d1f8      	bne.n	1834 <_vfiprintf_r+0x78>
    1842:	1b2f      	subs	r7, r5, r4
    1844:	d07e      	beq.n	1944 <_vfiprintf_r+0x188>
    1846:	003b      	movs	r3, r7
    1848:	0022      	movs	r2, r4
    184a:	4659      	mov	r1, fp
    184c:	9802      	ldr	r0, [sp, #8]
    184e:	f7ff ff91 	bl	1774 <__sfputs_r>
    1852:	1c43      	adds	r3, r0, #1
    1854:	d076      	beq.n	1944 <_vfiprintf_r+0x188>
    1856:	6973      	ldr	r3, [r6, #20]
    1858:	469c      	mov	ip, r3
    185a:	782b      	ldrb	r3, [r5, #0]
    185c:	4467      	add	r7, ip
    185e:	6177      	str	r7, [r6, #20]
    1860:	2b00      	cmp	r3, #0
    1862:	d06f      	beq.n	1944 <_vfiprintf_r+0x188>
    1864:	2201      	movs	r2, #1
    1866:	2300      	movs	r3, #0
    1868:	4252      	negs	r2, r2
    186a:	6072      	str	r2, [r6, #4]
    186c:	3244      	adds	r2, #68	; 0x44
    186e:	1c6c      	adds	r4, r5, #1
    1870:	6033      	str	r3, [r6, #0]
    1872:	60f3      	str	r3, [r6, #12]
    1874:	60b3      	str	r3, [r6, #8]
    1876:	54b3      	strb	r3, [r6, r2]
    1878:	65b3      	str	r3, [r6, #88]	; 0x58
    187a:	e007      	b.n	188c <_vfiprintf_r+0xd0>
    187c:	4643      	mov	r3, r8
    187e:	1ac0      	subs	r0, r0, r3
    1880:	464b      	mov	r3, r9
    1882:	4083      	lsls	r3, r0
    1884:	002c      	movs	r4, r5
    1886:	6832      	ldr	r2, [r6, #0]
    1888:	4313      	orrs	r3, r2
    188a:	6033      	str	r3, [r6, #0]
    188c:	7821      	ldrb	r1, [r4, #0]
    188e:	2205      	movs	r2, #5
    1890:	4640      	mov	r0, r8
    1892:	f000 ff4f 	bl	2734 <memchr>
    1896:	1c65      	adds	r5, r4, #1
    1898:	002f      	movs	r7, r5
    189a:	2800      	cmp	r0, #0
    189c:	d1ee      	bne.n	187c <_vfiprintf_r+0xc0>
    189e:	6833      	ldr	r3, [r6, #0]
    18a0:	06da      	lsls	r2, r3, #27
    18a2:	d502      	bpl.n	18aa <_vfiprintf_r+0xee>
    18a4:	2243      	movs	r2, #67	; 0x43
    18a6:	2120      	movs	r1, #32
    18a8:	54b1      	strb	r1, [r6, r2]
    18aa:	071a      	lsls	r2, r3, #28
    18ac:	d502      	bpl.n	18b4 <_vfiprintf_r+0xf8>
    18ae:	2243      	movs	r2, #67	; 0x43
    18b0:	212b      	movs	r1, #43	; 0x2b
    18b2:	54b1      	strb	r1, [r6, r2]
    18b4:	7821      	ldrb	r1, [r4, #0]
    18b6:	292a      	cmp	r1, #42	; 0x2a
    18b8:	d06c      	beq.n	1994 <_vfiprintf_r+0x1d8>
    18ba:	000a      	movs	r2, r1
    18bc:	3a30      	subs	r2, #48	; 0x30
    18be:	0027      	movs	r7, r4
    18c0:	2a09      	cmp	r2, #9
    18c2:	d80f      	bhi.n	18e4 <_vfiprintf_r+0x128>
    18c4:	68f0      	ldr	r0, [r6, #12]
    18c6:	e001      	b.n	18cc <_vfiprintf_r+0x110>
    18c8:	002c      	movs	r4, r5
    18ca:	3501      	adds	r5, #1
    18cc:	0083      	lsls	r3, r0, #2
    18ce:	181b      	adds	r3, r3, r0
    18d0:	7829      	ldrb	r1, [r5, #0]
    18d2:	005b      	lsls	r3, r3, #1
    18d4:	1898      	adds	r0, r3, r2
    18d6:	000a      	movs	r2, r1
    18d8:	3a30      	subs	r2, #48	; 0x30
    18da:	002f      	movs	r7, r5
    18dc:	2a09      	cmp	r2, #9
    18de:	d9f3      	bls.n	18c8 <_vfiprintf_r+0x10c>
    18e0:	1ca5      	adds	r5, r4, #2
    18e2:	60f0      	str	r0, [r6, #12]
    18e4:	292e      	cmp	r1, #46	; 0x2e
    18e6:	d060      	beq.n	19aa <_vfiprintf_r+0x1ee>
    18e8:	4c61      	ldr	r4, [pc, #388]	; (1a70 <_vfiprintf_r+0x2b4>)
    18ea:	2203      	movs	r2, #3
    18ec:	0020      	movs	r0, r4
    18ee:	f000 ff21 	bl	2734 <memchr>
    18f2:	2800      	cmp	r0, #0
    18f4:	d100      	bne.n	18f8 <_vfiprintf_r+0x13c>
    18f6:	e071      	b.n	19dc <_vfiprintf_r+0x220>
    18f8:	2340      	movs	r3, #64	; 0x40
    18fa:	1b00      	subs	r0, r0, r4
    18fc:	4083      	lsls	r3, r0
    18fe:	6832      	ldr	r2, [r6, #0]
    1900:	7829      	ldrb	r1, [r5, #0]
    1902:	4313      	orrs	r3, r2
    1904:	485b      	ldr	r0, [pc, #364]	; (1a74 <_vfiprintf_r+0x2b8>)
    1906:	2206      	movs	r2, #6
    1908:	6033      	str	r3, [r6, #0]
    190a:	1c6c      	adds	r4, r5, #1
    190c:	7631      	strb	r1, [r6, #24]
    190e:	f000 ff11 	bl	2734 <memchr>
    1912:	2800      	cmp	r0, #0
    1914:	d06c      	beq.n	19f0 <_vfiprintf_r+0x234>
    1916:	4b58      	ldr	r3, [pc, #352]	; (1a78 <_vfiprintf_r+0x2bc>)
    1918:	2b00      	cmp	r3, #0
    191a:	d100      	bne.n	191e <_vfiprintf_r+0x162>
    191c:	e076      	b.n	1a0c <_vfiprintf_r+0x250>
    191e:	ab05      	add	r3, sp, #20
    1920:	9300      	str	r3, [sp, #0]
    1922:	465a      	mov	r2, fp
    1924:	4b55      	ldr	r3, [pc, #340]	; (1a7c <_vfiprintf_r+0x2c0>)
    1926:	0031      	movs	r1, r6
    1928:	9802      	ldr	r0, [sp, #8]
    192a:	e000      	b.n	192e <_vfiprintf_r+0x172>
    192c:	bf00      	nop
    192e:	4682      	mov	sl, r0
    1930:	4653      	mov	r3, sl
    1932:	3301      	adds	r3, #1
    1934:	d006      	beq.n	1944 <_vfiprintf_r+0x188>
    1936:	6973      	ldr	r3, [r6, #20]
    1938:	4453      	add	r3, sl
    193a:	6173      	str	r3, [r6, #20]
    193c:	7823      	ldrb	r3, [r4, #0]
    193e:	2b00      	cmp	r3, #0
    1940:	d000      	beq.n	1944 <_vfiprintf_r+0x188>
    1942:	e773      	b.n	182c <_vfiprintf_r+0x70>
    1944:	465b      	mov	r3, fp
    1946:	899b      	ldrh	r3, [r3, #12]
    1948:	065b      	lsls	r3, r3, #25
    194a:	d41c      	bmi.n	1986 <_vfiprintf_r+0x1ca>
    194c:	6970      	ldr	r0, [r6, #20]
    194e:	b01f      	add	sp, #124	; 0x7c
    1950:	bc3c      	pop	{r2, r3, r4, r5}
    1952:	4690      	mov	r8, r2
    1954:	4699      	mov	r9, r3
    1956:	46a2      	mov	sl, r4
    1958:	46ab      	mov	fp, r5
    195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    195c:	f7ff fe20 	bl	15a0 <__sinit>
    1960:	4b3f      	ldr	r3, [pc, #252]	; (1a60 <_vfiprintf_r+0x2a4>)
    1962:	459b      	cmp	fp, r3
    1964:	d000      	beq.n	1968 <_vfiprintf_r+0x1ac>
    1966:	e73f      	b.n	17e8 <_vfiprintf_r+0x2c>
    1968:	9b02      	ldr	r3, [sp, #8]
    196a:	685b      	ldr	r3, [r3, #4]
    196c:	469b      	mov	fp, r3
    196e:	465b      	mov	r3, fp
    1970:	899b      	ldrh	r3, [r3, #12]
    1972:	071b      	lsls	r3, r3, #28
    1974:	d500      	bpl.n	1978 <_vfiprintf_r+0x1bc>
    1976:	e744      	b.n	1802 <_vfiprintf_r+0x46>
    1978:	4659      	mov	r1, fp
    197a:	9802      	ldr	r0, [sp, #8]
    197c:	f000 fb5e 	bl	203c <__swsetup_r>
    1980:	2800      	cmp	r0, #0
    1982:	d100      	bne.n	1986 <_vfiprintf_r+0x1ca>
    1984:	e742      	b.n	180c <_vfiprintf_r+0x50>
    1986:	2001      	movs	r0, #1
    1988:	4240      	negs	r0, r0
    198a:	e7e0      	b.n	194e <_vfiprintf_r+0x192>
    198c:	9b02      	ldr	r3, [sp, #8]
    198e:	689b      	ldr	r3, [r3, #8]
    1990:	469b      	mov	fp, r3
    1992:	e731      	b.n	17f8 <_vfiprintf_r+0x3c>
    1994:	9a05      	ldr	r2, [sp, #20]
    1996:	1d11      	adds	r1, r2, #4
    1998:	6812      	ldr	r2, [r2, #0]
    199a:	9105      	str	r1, [sp, #20]
    199c:	2a00      	cmp	r2, #0
    199e:	db3c      	blt.n	1a1a <_vfiprintf_r+0x25e>
    19a0:	60f2      	str	r2, [r6, #12]
    19a2:	7861      	ldrb	r1, [r4, #1]
    19a4:	1ca5      	adds	r5, r4, #2
    19a6:	292e      	cmp	r1, #46	; 0x2e
    19a8:	d19e      	bne.n	18e8 <_vfiprintf_r+0x12c>
    19aa:	7879      	ldrb	r1, [r7, #1]
    19ac:	292a      	cmp	r1, #42	; 0x2a
    19ae:	d13a      	bne.n	1a26 <_vfiprintf_r+0x26a>
    19b0:	9b05      	ldr	r3, [sp, #20]
    19b2:	78b9      	ldrb	r1, [r7, #2]
    19b4:	1d1a      	adds	r2, r3, #4
    19b6:	681b      	ldr	r3, [r3, #0]
    19b8:	1cfd      	adds	r5, r7, #3
    19ba:	9205      	str	r2, [sp, #20]
    19bc:	6073      	str	r3, [r6, #4]
    19be:	3702      	adds	r7, #2
    19c0:	2b00      	cmp	r3, #0
    19c2:	db00      	blt.n	19c6 <_vfiprintf_r+0x20a>
    19c4:	e790      	b.n	18e8 <_vfiprintf_r+0x12c>
    19c6:	2301      	movs	r3, #1
    19c8:	4c29      	ldr	r4, [pc, #164]	; (1a70 <_vfiprintf_r+0x2b4>)
    19ca:	425b      	negs	r3, r3
    19cc:	2203      	movs	r2, #3
    19ce:	0020      	movs	r0, r4
    19d0:	6073      	str	r3, [r6, #4]
    19d2:	f000 feaf 	bl	2734 <memchr>
    19d6:	2800      	cmp	r0, #0
    19d8:	d000      	beq.n	19dc <_vfiprintf_r+0x220>
    19da:	e78d      	b.n	18f8 <_vfiprintf_r+0x13c>
    19dc:	002c      	movs	r4, r5
    19de:	003d      	movs	r5, r7
    19e0:	7829      	ldrb	r1, [r5, #0]
    19e2:	2206      	movs	r2, #6
    19e4:	4823      	ldr	r0, [pc, #140]	; (1a74 <_vfiprintf_r+0x2b8>)
    19e6:	7631      	strb	r1, [r6, #24]
    19e8:	f000 fea4 	bl	2734 <memchr>
    19ec:	2800      	cmp	r0, #0
    19ee:	d192      	bne.n	1916 <_vfiprintf_r+0x15a>
    19f0:	ab05      	add	r3, sp, #20
    19f2:	9300      	str	r3, [sp, #0]
    19f4:	465a      	mov	r2, fp
    19f6:	4b21      	ldr	r3, [pc, #132]	; (1a7c <_vfiprintf_r+0x2c0>)
    19f8:	0031      	movs	r1, r6
    19fa:	9802      	ldr	r0, [sp, #8]
    19fc:	f000 f8e0 	bl	1bc0 <_printf_i>
    1a00:	4682      	mov	sl, r0
    1a02:	e795      	b.n	1930 <_vfiprintf_r+0x174>
    1a04:	1b2f      	subs	r7, r5, r4
    1a06:	d100      	bne.n	1a0a <_vfiprintf_r+0x24e>
    1a08:	e72c      	b.n	1864 <_vfiprintf_r+0xa8>
    1a0a:	e71c      	b.n	1846 <_vfiprintf_r+0x8a>
    1a0c:	2207      	movs	r2, #7
    1a0e:	9b05      	ldr	r3, [sp, #20]
    1a10:	3307      	adds	r3, #7
    1a12:	4393      	bics	r3, r2
    1a14:	3308      	adds	r3, #8
    1a16:	9305      	str	r3, [sp, #20]
    1a18:	e78d      	b.n	1936 <_vfiprintf_r+0x17a>
    1a1a:	4252      	negs	r2, r2
    1a1c:	60f2      	str	r2, [r6, #12]
    1a1e:	2202      	movs	r2, #2
    1a20:	4313      	orrs	r3, r2
    1a22:	6033      	str	r3, [r6, #0]
    1a24:	e7bd      	b.n	19a2 <_vfiprintf_r+0x1e6>
    1a26:	000a      	movs	r2, r1
    1a28:	2300      	movs	r3, #0
    1a2a:	3a30      	subs	r2, #48	; 0x30
    1a2c:	6073      	str	r3, [r6, #4]
    1a2e:	2000      	movs	r0, #0
    1a30:	2a09      	cmp	r2, #9
    1a32:	d901      	bls.n	1a38 <_vfiprintf_r+0x27c>
    1a34:	e00d      	b.n	1a52 <_vfiprintf_r+0x296>
    1a36:	003d      	movs	r5, r7
    1a38:	0083      	lsls	r3, r0, #2
    1a3a:	181b      	adds	r3, r3, r0
    1a3c:	7869      	ldrb	r1, [r5, #1]
    1a3e:	005b      	lsls	r3, r3, #1
    1a40:	1898      	adds	r0, r3, r2
    1a42:	000a      	movs	r2, r1
    1a44:	3a30      	subs	r2, #48	; 0x30
    1a46:	1c6f      	adds	r7, r5, #1
    1a48:	2a09      	cmp	r2, #9
    1a4a:	d9f4      	bls.n	1a36 <_vfiprintf_r+0x27a>
    1a4c:	3502      	adds	r5, #2
    1a4e:	6070      	str	r0, [r6, #4]
    1a50:	e74a      	b.n	18e8 <_vfiprintf_r+0x12c>
    1a52:	002f      	movs	r7, r5
    1a54:	3501      	adds	r5, #1
    1a56:	e747      	b.n	18e8 <_vfiprintf_r+0x12c>
    1a58:	9b02      	ldr	r3, [sp, #8]
    1a5a:	68db      	ldr	r3, [r3, #12]
    1a5c:	469b      	mov	fp, r3
    1a5e:	e6cb      	b.n	17f8 <_vfiprintf_r+0x3c>
    1a60:	00002d68 	.word	0x00002d68
    1a64:	00002d48 	.word	0x00002d48
    1a68:	00002d28 	.word	0x00002d28
    1a6c:	00002d88 	.word	0x00002d88
    1a70:	00002d90 	.word	0x00002d90
    1a74:	00002d94 	.word	0x00002d94
    1a78:	00000000 	.word	0x00000000
    1a7c:	00001775 	.word	0x00001775

00001a80 <vfiprintf>:
    1a80:	b510      	push	{r4, lr}
    1a82:	0004      	movs	r4, r0
    1a84:	0013      	movs	r3, r2
    1a86:	4a03      	ldr	r2, [pc, #12]	; (1a94 <vfiprintf+0x14>)
    1a88:	6810      	ldr	r0, [r2, #0]
    1a8a:	000a      	movs	r2, r1
    1a8c:	0021      	movs	r1, r4
    1a8e:	f7ff fe95 	bl	17bc <_vfiprintf_r>
    1a92:	bd10      	pop	{r4, pc}
    1a94:	20000010 	.word	0x20000010

00001a98 <_printf_common>:
    1a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a9a:	464f      	mov	r7, r9
    1a9c:	4646      	mov	r6, r8
    1a9e:	46d6      	mov	lr, sl
    1aa0:	b5c0      	push	{r6, r7, lr}
    1aa2:	001f      	movs	r7, r3
    1aa4:	9b08      	ldr	r3, [sp, #32]
    1aa6:	4691      	mov	r9, r2
    1aa8:	4698      	mov	r8, r3
    1aaa:	688a      	ldr	r2, [r1, #8]
    1aac:	690b      	ldr	r3, [r1, #16]
    1aae:	0006      	movs	r6, r0
    1ab0:	000c      	movs	r4, r1
    1ab2:	4293      	cmp	r3, r2
    1ab4:	da00      	bge.n	1ab8 <_printf_common+0x20>
    1ab6:	0013      	movs	r3, r2
    1ab8:	464a      	mov	r2, r9
    1aba:	6013      	str	r3, [r2, #0]
    1abc:	2243      	movs	r2, #67	; 0x43
    1abe:	5ca2      	ldrb	r2, [r4, r2]
    1ac0:	2a00      	cmp	r2, #0
    1ac2:	d002      	beq.n	1aca <_printf_common+0x32>
    1ac4:	464a      	mov	r2, r9
    1ac6:	3301      	adds	r3, #1
    1ac8:	6013      	str	r3, [r2, #0]
    1aca:	6823      	ldr	r3, [r4, #0]
    1acc:	069a      	lsls	r2, r3, #26
    1ace:	d560      	bpl.n	1b92 <_printf_common+0xfa>
    1ad0:	464b      	mov	r3, r9
    1ad2:	681b      	ldr	r3, [r3, #0]
    1ad4:	2006      	movs	r0, #6
    1ad6:	1c9a      	adds	r2, r3, #2
    1ad8:	464b      	mov	r3, r9
    1ada:	601a      	str	r2, [r3, #0]
    1adc:	6823      	ldr	r3, [r4, #0]
    1ade:	0019      	movs	r1, r3
    1ae0:	4218      	tst	r0, r3
    1ae2:	d11f      	bne.n	1b24 <_printf_common+0x8c>
    1ae4:	68e1      	ldr	r1, [r4, #12]
    1ae6:	2500      	movs	r5, #0
    1ae8:	1a8a      	subs	r2, r1, r2
    1aea:	2119      	movs	r1, #25
    1aec:	468a      	mov	sl, r1
    1aee:	0019      	movs	r1, r3
    1af0:	44a2      	add	sl, r4
    1af2:	2a00      	cmp	r2, #0
    1af4:	dc07      	bgt.n	1b06 <_printf_common+0x6e>
    1af6:	e015      	b.n	1b24 <_printf_common+0x8c>
    1af8:	464b      	mov	r3, r9
    1afa:	68e2      	ldr	r2, [r4, #12]
    1afc:	681b      	ldr	r3, [r3, #0]
    1afe:	3501      	adds	r5, #1
    1b00:	1ad3      	subs	r3, r2, r3
    1b02:	42ab      	cmp	r3, r5
    1b04:	dd0d      	ble.n	1b22 <_printf_common+0x8a>
    1b06:	2301      	movs	r3, #1
    1b08:	4652      	mov	r2, sl
    1b0a:	0039      	movs	r1, r7
    1b0c:	0030      	movs	r0, r6
    1b0e:	47c0      	blx	r8
    1b10:	1c43      	adds	r3, r0, #1
    1b12:	d1f1      	bne.n	1af8 <_printf_common+0x60>
    1b14:	2001      	movs	r0, #1
    1b16:	4240      	negs	r0, r0
    1b18:	bc1c      	pop	{r2, r3, r4}
    1b1a:	4690      	mov	r8, r2
    1b1c:	4699      	mov	r9, r3
    1b1e:	46a2      	mov	sl, r4
    1b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b22:	6821      	ldr	r1, [r4, #0]
    1b24:	2343      	movs	r3, #67	; 0x43
    1b26:	5ce3      	ldrb	r3, [r4, r3]
    1b28:	1e5a      	subs	r2, r3, #1
    1b2a:	4193      	sbcs	r3, r2
    1b2c:	068a      	lsls	r2, r1, #26
    1b2e:	d50a      	bpl.n	1b46 <_printf_common+0xae>
    1b30:	2030      	movs	r0, #48	; 0x30
    1b32:	18e1      	adds	r1, r4, r3
    1b34:	3143      	adds	r1, #67	; 0x43
    1b36:	7008      	strb	r0, [r1, #0]
    1b38:	2145      	movs	r1, #69	; 0x45
    1b3a:	1c5a      	adds	r2, r3, #1
    1b3c:	5c61      	ldrb	r1, [r4, r1]
    1b3e:	18a2      	adds	r2, r4, r2
    1b40:	3243      	adds	r2, #67	; 0x43
    1b42:	3302      	adds	r3, #2
    1b44:	7011      	strb	r1, [r2, #0]
    1b46:	0022      	movs	r2, r4
    1b48:	0039      	movs	r1, r7
    1b4a:	3243      	adds	r2, #67	; 0x43
    1b4c:	0030      	movs	r0, r6
    1b4e:	47c0      	blx	r8
    1b50:	1c43      	adds	r3, r0, #1
    1b52:	d0df      	beq.n	1b14 <_printf_common+0x7c>
    1b54:	68e3      	ldr	r3, [r4, #12]
    1b56:	6821      	ldr	r1, [r4, #0]
    1b58:	469c      	mov	ip, r3
    1b5a:	464b      	mov	r3, r9
    1b5c:	681d      	ldr	r5, [r3, #0]
    1b5e:	2306      	movs	r3, #6
    1b60:	68a2      	ldr	r2, [r4, #8]
    1b62:	6920      	ldr	r0, [r4, #16]
    1b64:	400b      	ands	r3, r1
    1b66:	2b04      	cmp	r3, #4
    1b68:	d019      	beq.n	1b9e <_printf_common+0x106>
    1b6a:	4282      	cmp	r2, r0
    1b6c:	dd21      	ble.n	1bb2 <_printf_common+0x11a>
    1b6e:	2300      	movs	r3, #0
    1b70:	4699      	mov	r9, r3
    1b72:	1a12      	subs	r2, r2, r0
    1b74:	4491      	add	r9, r2
    1b76:	341a      	adds	r4, #26
    1b78:	2500      	movs	r5, #0
    1b7a:	e002      	b.n	1b82 <_printf_common+0xea>
    1b7c:	3501      	adds	r5, #1
    1b7e:	454d      	cmp	r5, r9
    1b80:	d017      	beq.n	1bb2 <_printf_common+0x11a>
    1b82:	2301      	movs	r3, #1
    1b84:	0022      	movs	r2, r4
    1b86:	0039      	movs	r1, r7
    1b88:	0030      	movs	r0, r6
    1b8a:	47c0      	blx	r8
    1b8c:	1c43      	adds	r3, r0, #1
    1b8e:	d1f5      	bne.n	1b7c <_printf_common+0xe4>
    1b90:	e7c0      	b.n	1b14 <_printf_common+0x7c>
    1b92:	2206      	movs	r2, #6
    1b94:	421a      	tst	r2, r3
    1b96:	d10e      	bne.n	1bb6 <_printf_common+0x11e>
    1b98:	464a      	mov	r2, r9
    1b9a:	6812      	ldr	r2, [r2, #0]
    1b9c:	e7a2      	b.n	1ae4 <_printf_common+0x4c>
    1b9e:	4663      	mov	r3, ip
    1ba0:	1b59      	subs	r1, r3, r5
    1ba2:	43cb      	mvns	r3, r1
    1ba4:	17db      	asrs	r3, r3, #31
    1ba6:	400b      	ands	r3, r1
    1ba8:	4699      	mov	r9, r3
    1baa:	4282      	cmp	r2, r0
    1bac:	dce1      	bgt.n	1b72 <_printf_common+0xda>
    1bae:	2900      	cmp	r1, #0
    1bb0:	dce1      	bgt.n	1b76 <_printf_common+0xde>
    1bb2:	2000      	movs	r0, #0
    1bb4:	e7b0      	b.n	1b18 <_printf_common+0x80>
    1bb6:	2343      	movs	r3, #67	; 0x43
    1bb8:	5ce3      	ldrb	r3, [r4, r3]
    1bba:	1e5a      	subs	r2, r3, #1
    1bbc:	4193      	sbcs	r3, r2
    1bbe:	e7c2      	b.n	1b46 <_printf_common+0xae>

00001bc0 <_printf_i>:
    1bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bc2:	4645      	mov	r5, r8
    1bc4:	4698      	mov	r8, r3
    1bc6:	2343      	movs	r3, #67	; 0x43
    1bc8:	4657      	mov	r7, sl
    1bca:	464e      	mov	r6, r9
    1bcc:	46de      	mov	lr, fp
    1bce:	469a      	mov	sl, r3
    1bd0:	b5e0      	push	{r5, r6, r7, lr}
    1bd2:	7e0b      	ldrb	r3, [r1, #24]
    1bd4:	b085      	sub	sp, #20
    1bd6:	0017      	movs	r7, r2
    1bd8:	0006      	movs	r6, r0
    1bda:	000c      	movs	r4, r1
    1bdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1bde:	448a      	add	sl, r1
    1be0:	2b6e      	cmp	r3, #110	; 0x6e
    1be2:	d052      	beq.n	1c8a <_printf_i+0xca>
    1be4:	d80f      	bhi.n	1c06 <_printf_i+0x46>
    1be6:	2b63      	cmp	r3, #99	; 0x63
    1be8:	d100      	bne.n	1bec <_printf_i+0x2c>
    1bea:	e0e3      	b.n	1db4 <_printf_i+0x1f4>
    1bec:	d900      	bls.n	1bf0 <_printf_i+0x30>
    1bee:	e0ca      	b.n	1d86 <_printf_i+0x1c6>
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d058      	beq.n	1ca6 <_printf_i+0xe6>
    1bf4:	2b58      	cmp	r3, #88	; 0x58
    1bf6:	d000      	beq.n	1bfa <_printf_i+0x3a>
    1bf8:	e0f9      	b.n	1dee <_printf_i+0x22e>
    1bfa:	2145      	movs	r1, #69	; 0x45
    1bfc:	5463      	strb	r3, [r4, r1]
    1bfe:	4997      	ldr	r1, [pc, #604]	; (1e5c <_printf_i+0x29c>)
    1c00:	6823      	ldr	r3, [r4, #0]
    1c02:	468b      	mov	fp, r1
    1c04:	e013      	b.n	1c2e <_printf_i+0x6e>
    1c06:	2b73      	cmp	r3, #115	; 0x73
    1c08:	d100      	bne.n	1c0c <_printf_i+0x4c>
    1c0a:	e0e1      	b.n	1dd0 <_printf_i+0x210>
    1c0c:	d900      	bls.n	1c10 <_printf_i+0x50>
    1c0e:	e085      	b.n	1d1c <_printf_i+0x15c>
    1c10:	2b6f      	cmp	r3, #111	; 0x6f
    1c12:	d100      	bne.n	1c16 <_printf_i+0x56>
    1c14:	e0f2      	b.n	1dfc <_printf_i+0x23c>
    1c16:	2b70      	cmp	r3, #112	; 0x70
    1c18:	d000      	beq.n	1c1c <_printf_i+0x5c>
    1c1a:	e0e8      	b.n	1dee <_printf_i+0x22e>
    1c1c:	2320      	movs	r3, #32
    1c1e:	6809      	ldr	r1, [r1, #0]
    1c20:	430b      	orrs	r3, r1
    1c22:	6023      	str	r3, [r4, #0]
    1c24:	2145      	movs	r1, #69	; 0x45
    1c26:	2078      	movs	r0, #120	; 0x78
    1c28:	5460      	strb	r0, [r4, r1]
    1c2a:	498d      	ldr	r1, [pc, #564]	; (1e60 <_printf_i+0x2a0>)
    1c2c:	468b      	mov	fp, r1
    1c2e:	6811      	ldr	r1, [r2, #0]
    1c30:	1d0d      	adds	r5, r1, #4
    1c32:	6808      	ldr	r0, [r1, #0]
    1c34:	6015      	str	r5, [r2, #0]
    1c36:	0619      	lsls	r1, r3, #24
    1c38:	d403      	bmi.n	1c42 <_printf_i+0x82>
    1c3a:	0659      	lsls	r1, r3, #25
    1c3c:	d501      	bpl.n	1c42 <_printf_i+0x82>
    1c3e:	0400      	lsls	r0, r0, #16
    1c40:	0c00      	lsrs	r0, r0, #16
    1c42:	07da      	lsls	r2, r3, #31
    1c44:	d502      	bpl.n	1c4c <_printf_i+0x8c>
    1c46:	2220      	movs	r2, #32
    1c48:	4313      	orrs	r3, r2
    1c4a:	6023      	str	r3, [r4, #0]
    1c4c:	2800      	cmp	r0, #0
    1c4e:	d000      	beq.n	1c52 <_printf_i+0x92>
    1c50:	e075      	b.n	1d3e <_printf_i+0x17e>
    1c52:	2320      	movs	r3, #32
    1c54:	6822      	ldr	r2, [r4, #0]
    1c56:	439a      	bics	r2, r3
    1c58:	6022      	str	r2, [r4, #0]
    1c5a:	0013      	movs	r3, r2
    1c5c:	2243      	movs	r2, #67	; 0x43
    1c5e:	54a0      	strb	r0, [r4, r2]
    1c60:	6862      	ldr	r2, [r4, #4]
    1c62:	60a2      	str	r2, [r4, #8]
    1c64:	2a00      	cmp	r2, #0
    1c66:	da00      	bge.n	1c6a <_printf_i+0xaa>
    1c68:	e084      	b.n	1d74 <_printf_i+0x1b4>
    1c6a:	2104      	movs	r1, #4
    1c6c:	438b      	bics	r3, r1
    1c6e:	6023      	str	r3, [r4, #0]
    1c70:	2310      	movs	r3, #16
    1c72:	4699      	mov	r9, r3
    1c74:	2a00      	cmp	r2, #0
    1c76:	d000      	beq.n	1c7a <_printf_i+0xba>
    1c78:	e07e      	b.n	1d78 <_printf_i+0x1b8>
    1c7a:	4655      	mov	r5, sl
    1c7c:	464b      	mov	r3, r9
    1c7e:	2b08      	cmp	r3, #8
    1c80:	d052      	beq.n	1d28 <_printf_i+0x168>
    1c82:	4653      	mov	r3, sl
    1c84:	1b5b      	subs	r3, r3, r5
    1c86:	6123      	str	r3, [r4, #16]
    1c88:	e010      	b.n	1cac <_printf_i+0xec>
    1c8a:	6963      	ldr	r3, [r4, #20]
    1c8c:	6809      	ldr	r1, [r1, #0]
    1c8e:	469c      	mov	ip, r3
    1c90:	6813      	ldr	r3, [r2, #0]
    1c92:	1d1d      	adds	r5, r3, #4
    1c94:	6015      	str	r5, [r2, #0]
    1c96:	681b      	ldr	r3, [r3, #0]
    1c98:	4662      	mov	r2, ip
    1c9a:	0608      	lsls	r0, r1, #24
    1c9c:	d402      	bmi.n	1ca4 <_printf_i+0xe4>
    1c9e:	0649      	lsls	r1, r1, #25
    1ca0:	d500      	bpl.n	1ca4 <_printf_i+0xe4>
    1ca2:	e0c1      	b.n	1e28 <_printf_i+0x268>
    1ca4:	601a      	str	r2, [r3, #0]
    1ca6:	2300      	movs	r3, #0
    1ca8:	4655      	mov	r5, sl
    1caa:	6123      	str	r3, [r4, #16]
    1cac:	4643      	mov	r3, r8
    1cae:	aa03      	add	r2, sp, #12
    1cb0:	9300      	str	r3, [sp, #0]
    1cb2:	0021      	movs	r1, r4
    1cb4:	003b      	movs	r3, r7
    1cb6:	0030      	movs	r0, r6
    1cb8:	f7ff feee 	bl	1a98 <_printf_common>
    1cbc:	1c43      	adds	r3, r0, #1
    1cbe:	d020      	beq.n	1d02 <_printf_i+0x142>
    1cc0:	6923      	ldr	r3, [r4, #16]
    1cc2:	002a      	movs	r2, r5
    1cc4:	0039      	movs	r1, r7
    1cc6:	0030      	movs	r0, r6
    1cc8:	47c0      	blx	r8
    1cca:	1c43      	adds	r3, r0, #1
    1ccc:	d019      	beq.n	1d02 <_printf_i+0x142>
    1cce:	6822      	ldr	r2, [r4, #0]
    1cd0:	9803      	ldr	r0, [sp, #12]
    1cd2:	68e3      	ldr	r3, [r4, #12]
    1cd4:	0792      	lsls	r2, r2, #30
    1cd6:	d51d      	bpl.n	1d14 <_printf_i+0x154>
    1cd8:	1a1a      	subs	r2, r3, r0
    1cda:	2a00      	cmp	r2, #0
    1cdc:	dd1a      	ble.n	1d14 <_printf_i+0x154>
    1cde:	2319      	movs	r3, #25
    1ce0:	4699      	mov	r9, r3
    1ce2:	2500      	movs	r5, #0
    1ce4:	44a1      	add	r9, r4
    1ce6:	e005      	b.n	1cf4 <_printf_i+0x134>
    1ce8:	68e3      	ldr	r3, [r4, #12]
    1cea:	9803      	ldr	r0, [sp, #12]
    1cec:	3501      	adds	r5, #1
    1cee:	1a1a      	subs	r2, r3, r0
    1cf0:	42aa      	cmp	r2, r5
    1cf2:	dd0f      	ble.n	1d14 <_printf_i+0x154>
    1cf4:	2301      	movs	r3, #1
    1cf6:	464a      	mov	r2, r9
    1cf8:	0039      	movs	r1, r7
    1cfa:	0030      	movs	r0, r6
    1cfc:	47c0      	blx	r8
    1cfe:	1c43      	adds	r3, r0, #1
    1d00:	d1f2      	bne.n	1ce8 <_printf_i+0x128>
    1d02:	2001      	movs	r0, #1
    1d04:	4240      	negs	r0, r0
    1d06:	b005      	add	sp, #20
    1d08:	bc3c      	pop	{r2, r3, r4, r5}
    1d0a:	4690      	mov	r8, r2
    1d0c:	4699      	mov	r9, r3
    1d0e:	46a2      	mov	sl, r4
    1d10:	46ab      	mov	fp, r5
    1d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d14:	4298      	cmp	r0, r3
    1d16:	daf6      	bge.n	1d06 <_printf_i+0x146>
    1d18:	0018      	movs	r0, r3
    1d1a:	e7f4      	b.n	1d06 <_printf_i+0x146>
    1d1c:	2b75      	cmp	r3, #117	; 0x75
    1d1e:	d06d      	beq.n	1dfc <_printf_i+0x23c>
    1d20:	2b78      	cmp	r3, #120	; 0x78
    1d22:	d164      	bne.n	1dee <_printf_i+0x22e>
    1d24:	680b      	ldr	r3, [r1, #0]
    1d26:	e77d      	b.n	1c24 <_printf_i+0x64>
    1d28:	6823      	ldr	r3, [r4, #0]
    1d2a:	07db      	lsls	r3, r3, #31
    1d2c:	d5a9      	bpl.n	1c82 <_printf_i+0xc2>
    1d2e:	6863      	ldr	r3, [r4, #4]
    1d30:	6922      	ldr	r2, [r4, #16]
    1d32:	4293      	cmp	r3, r2
    1d34:	dca5      	bgt.n	1c82 <_printf_i+0xc2>
    1d36:	2330      	movs	r3, #48	; 0x30
    1d38:	3d01      	subs	r5, #1
    1d3a:	702b      	strb	r3, [r5, #0]
    1d3c:	e7a1      	b.n	1c82 <_printf_i+0xc2>
    1d3e:	2310      	movs	r3, #16
    1d40:	4699      	mov	r9, r3
    1d42:	2343      	movs	r3, #67	; 0x43
    1d44:	2200      	movs	r2, #0
    1d46:	54e2      	strb	r2, [r4, r3]
    1d48:	6862      	ldr	r2, [r4, #4]
    1d4a:	60a2      	str	r2, [r4, #8]
    1d4c:	2a00      	cmp	r2, #0
    1d4e:	db2e      	blt.n	1dae <_printf_i+0x1ee>
    1d50:	6821      	ldr	r1, [r4, #0]
    1d52:	2304      	movs	r3, #4
    1d54:	4399      	bics	r1, r3
    1d56:	6021      	str	r1, [r4, #0]
    1d58:	2800      	cmp	r0, #0
    1d5a:	d100      	bne.n	1d5e <_printf_i+0x19e>
    1d5c:	e78a      	b.n	1c74 <_printf_i+0xb4>
    1d5e:	4655      	mov	r5, sl
    1d60:	4649      	mov	r1, r9
    1d62:	f7ff f93d 	bl	fe0 <__aeabi_uidivmod>
    1d66:	465b      	mov	r3, fp
    1d68:	5c5b      	ldrb	r3, [r3, r1]
    1d6a:	3d01      	subs	r5, #1
    1d6c:	702b      	strb	r3, [r5, #0]
    1d6e:	2800      	cmp	r0, #0
    1d70:	d1f6      	bne.n	1d60 <_printf_i+0x1a0>
    1d72:	e783      	b.n	1c7c <_printf_i+0xbc>
    1d74:	2310      	movs	r3, #16
    1d76:	4699      	mov	r9, r3
    1d78:	465b      	mov	r3, fp
    1d7a:	0025      	movs	r5, r4
    1d7c:	781a      	ldrb	r2, [r3, #0]
    1d7e:	2342      	movs	r3, #66	; 0x42
    1d80:	3542      	adds	r5, #66	; 0x42
    1d82:	54e2      	strb	r2, [r4, r3]
    1d84:	e77a      	b.n	1c7c <_printf_i+0xbc>
    1d86:	2b64      	cmp	r3, #100	; 0x64
    1d88:	d001      	beq.n	1d8e <_printf_i+0x1ce>
    1d8a:	2b69      	cmp	r3, #105	; 0x69
    1d8c:	d12f      	bne.n	1dee <_printf_i+0x22e>
    1d8e:	6813      	ldr	r3, [r2, #0]
    1d90:	6821      	ldr	r1, [r4, #0]
    1d92:	1d18      	adds	r0, r3, #4
    1d94:	6010      	str	r0, [r2, #0]
    1d96:	060d      	lsls	r5, r1, #24
    1d98:	d401      	bmi.n	1d9e <_printf_i+0x1de>
    1d9a:	064d      	lsls	r5, r1, #25
    1d9c:	d446      	bmi.n	1e2c <_printf_i+0x26c>
    1d9e:	6818      	ldr	r0, [r3, #0]
    1da0:	2800      	cmp	r0, #0
    1da2:	db46      	blt.n	1e32 <_printf_i+0x272>
    1da4:	4b2d      	ldr	r3, [pc, #180]	; (1e5c <_printf_i+0x29c>)
    1da6:	469b      	mov	fp, r3
    1da8:	230a      	movs	r3, #10
    1daa:	4699      	mov	r9, r3
    1dac:	e7cc      	b.n	1d48 <_printf_i+0x188>
    1dae:	2800      	cmp	r0, #0
    1db0:	d1d5      	bne.n	1d5e <_printf_i+0x19e>
    1db2:	e7e1      	b.n	1d78 <_printf_i+0x1b8>
    1db4:	6813      	ldr	r3, [r2, #0]
    1db6:	0025      	movs	r5, r4
    1db8:	1d19      	adds	r1, r3, #4
    1dba:	6011      	str	r1, [r2, #0]
    1dbc:	681a      	ldr	r2, [r3, #0]
    1dbe:	2342      	movs	r3, #66	; 0x42
    1dc0:	54e2      	strb	r2, [r4, r3]
    1dc2:	3b41      	subs	r3, #65	; 0x41
    1dc4:	3542      	adds	r5, #66	; 0x42
    1dc6:	6123      	str	r3, [r4, #16]
    1dc8:	2343      	movs	r3, #67	; 0x43
    1dca:	2200      	movs	r2, #0
    1dcc:	54e2      	strb	r2, [r4, r3]
    1dce:	e76d      	b.n	1cac <_printf_i+0xec>
    1dd0:	6813      	ldr	r3, [r2, #0]
    1dd2:	1d19      	adds	r1, r3, #4
    1dd4:	6011      	str	r1, [r2, #0]
    1dd6:	681d      	ldr	r5, [r3, #0]
    1dd8:	6862      	ldr	r2, [r4, #4]
    1dda:	2100      	movs	r1, #0
    1ddc:	0028      	movs	r0, r5
    1dde:	f000 fca9 	bl	2734 <memchr>
    1de2:	2800      	cmp	r0, #0
    1de4:	d037      	beq.n	1e56 <_printf_i+0x296>
    1de6:	1b40      	subs	r0, r0, r5
    1de8:	6060      	str	r0, [r4, #4]
    1dea:	6120      	str	r0, [r4, #16]
    1dec:	e7ec      	b.n	1dc8 <_printf_i+0x208>
    1dee:	2242      	movs	r2, #66	; 0x42
    1df0:	0025      	movs	r5, r4
    1df2:	54a3      	strb	r3, [r4, r2]
    1df4:	2301      	movs	r3, #1
    1df6:	3542      	adds	r5, #66	; 0x42
    1df8:	6123      	str	r3, [r4, #16]
    1dfa:	e7e5      	b.n	1dc8 <_printf_i+0x208>
    1dfc:	6810      	ldr	r0, [r2, #0]
    1dfe:	6821      	ldr	r1, [r4, #0]
    1e00:	1d05      	adds	r5, r0, #4
    1e02:	46ac      	mov	ip, r5
    1e04:	060d      	lsls	r5, r1, #24
    1e06:	d401      	bmi.n	1e0c <_printf_i+0x24c>
    1e08:	0649      	lsls	r1, r1, #25
    1e0a:	d409      	bmi.n	1e20 <_printf_i+0x260>
    1e0c:	4661      	mov	r1, ip
    1e0e:	6011      	str	r1, [r2, #0]
    1e10:	6800      	ldr	r0, [r0, #0]
    1e12:	2b6f      	cmp	r3, #111	; 0x6f
    1e14:	d01a      	beq.n	1e4c <_printf_i+0x28c>
    1e16:	4b11      	ldr	r3, [pc, #68]	; (1e5c <_printf_i+0x29c>)
    1e18:	469b      	mov	fp, r3
    1e1a:	230a      	movs	r3, #10
    1e1c:	4699      	mov	r9, r3
    1e1e:	e790      	b.n	1d42 <_printf_i+0x182>
    1e20:	4661      	mov	r1, ip
    1e22:	8800      	ldrh	r0, [r0, #0]
    1e24:	6011      	str	r1, [r2, #0]
    1e26:	e7f4      	b.n	1e12 <_printf_i+0x252>
    1e28:	801a      	strh	r2, [r3, #0]
    1e2a:	e73c      	b.n	1ca6 <_printf_i+0xe6>
    1e2c:	2000      	movs	r0, #0
    1e2e:	5e18      	ldrsh	r0, [r3, r0]
    1e30:	e7b6      	b.n	1da0 <_printf_i+0x1e0>
    1e32:	2343      	movs	r3, #67	; 0x43
    1e34:	222d      	movs	r2, #45	; 0x2d
    1e36:	54e2      	strb	r2, [r4, r3]
    1e38:	4b08      	ldr	r3, [pc, #32]	; (1e5c <_printf_i+0x29c>)
    1e3a:	6862      	ldr	r2, [r4, #4]
    1e3c:	469b      	mov	fp, r3
    1e3e:	230a      	movs	r3, #10
    1e40:	4240      	negs	r0, r0
    1e42:	60a2      	str	r2, [r4, #8]
    1e44:	4699      	mov	r9, r3
    1e46:	2a00      	cmp	r2, #0
    1e48:	da83      	bge.n	1d52 <_printf_i+0x192>
    1e4a:	e788      	b.n	1d5e <_printf_i+0x19e>
    1e4c:	4b03      	ldr	r3, [pc, #12]	; (1e5c <_printf_i+0x29c>)
    1e4e:	469b      	mov	fp, r3
    1e50:	2308      	movs	r3, #8
    1e52:	4699      	mov	r9, r3
    1e54:	e775      	b.n	1d42 <_printf_i+0x182>
    1e56:	6860      	ldr	r0, [r4, #4]
    1e58:	6120      	str	r0, [r4, #16]
    1e5a:	e7b5      	b.n	1dc8 <_printf_i+0x208>
    1e5c:	00002d9c 	.word	0x00002d9c
    1e60:	00002db0 	.word	0x00002db0

00001e64 <_sbrk_r>:
    1e64:	2300      	movs	r3, #0
    1e66:	b570      	push	{r4, r5, r6, lr}
    1e68:	4c06      	ldr	r4, [pc, #24]	; (1e84 <_sbrk_r+0x20>)
    1e6a:	0005      	movs	r5, r0
    1e6c:	0008      	movs	r0, r1
    1e6e:	6023      	str	r3, [r4, #0]
    1e70:	f000 fe20 	bl	2ab4 <_sbrk>
    1e74:	1c43      	adds	r3, r0, #1
    1e76:	d000      	beq.n	1e7a <_sbrk_r+0x16>
    1e78:	bd70      	pop	{r4, r5, r6, pc}
    1e7a:	6823      	ldr	r3, [r4, #0]
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d0fb      	beq.n	1e78 <_sbrk_r+0x14>
    1e80:	602b      	str	r3, [r5, #0]
    1e82:	e7f9      	b.n	1e78 <_sbrk_r+0x14>
    1e84:	2000013c 	.word	0x2000013c

00001e88 <__sread>:
    1e88:	b570      	push	{r4, r5, r6, lr}
    1e8a:	000c      	movs	r4, r1
    1e8c:	250e      	movs	r5, #14
    1e8e:	5f49      	ldrsh	r1, [r1, r5]
    1e90:	f000 fda4 	bl	29dc <_read_r>
    1e94:	2800      	cmp	r0, #0
    1e96:	db03      	blt.n	1ea0 <__sread+0x18>
    1e98:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1e9a:	181b      	adds	r3, r3, r0
    1e9c:	6563      	str	r3, [r4, #84]	; 0x54
    1e9e:	bd70      	pop	{r4, r5, r6, pc}
    1ea0:	89a3      	ldrh	r3, [r4, #12]
    1ea2:	4a02      	ldr	r2, [pc, #8]	; (1eac <__sread+0x24>)
    1ea4:	4013      	ands	r3, r2
    1ea6:	81a3      	strh	r3, [r4, #12]
    1ea8:	e7f9      	b.n	1e9e <__sread+0x16>
    1eaa:	46c0      	nop			; (mov r8, r8)
    1eac:	ffffefff 	.word	0xffffefff

00001eb0 <__seofread>:
    1eb0:	2000      	movs	r0, #0
    1eb2:	4770      	bx	lr

00001eb4 <__swrite>:
    1eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1eb6:	0016      	movs	r6, r2
    1eb8:	001f      	movs	r7, r3
    1eba:	220c      	movs	r2, #12
    1ebc:	5e8b      	ldrsh	r3, [r1, r2]
    1ebe:	000c      	movs	r4, r1
    1ec0:	0005      	movs	r5, r0
    1ec2:	220e      	movs	r2, #14
    1ec4:	5e89      	ldrsh	r1, [r1, r2]
    1ec6:	05da      	lsls	r2, r3, #23
    1ec8:	d507      	bpl.n	1eda <__swrite+0x26>
    1eca:	2200      	movs	r2, #0
    1ecc:	2302      	movs	r3, #2
    1ece:	f000 fbab 	bl	2628 <_lseek_r>
    1ed2:	220c      	movs	r2, #12
    1ed4:	5ea3      	ldrsh	r3, [r4, r2]
    1ed6:	220e      	movs	r2, #14
    1ed8:	5ea1      	ldrsh	r1, [r4, r2]
    1eda:	4a04      	ldr	r2, [pc, #16]	; (1eec <__swrite+0x38>)
    1edc:	0028      	movs	r0, r5
    1ede:	4013      	ands	r3, r2
    1ee0:	81a3      	strh	r3, [r4, #12]
    1ee2:	0032      	movs	r2, r6
    1ee4:	003b      	movs	r3, r7
    1ee6:	f000 f895 	bl	2014 <_write_r>
    1eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1eec:	ffffefff 	.word	0xffffefff

00001ef0 <__sseek>:
    1ef0:	b570      	push	{r4, r5, r6, lr}
    1ef2:	000c      	movs	r4, r1
    1ef4:	250e      	movs	r5, #14
    1ef6:	5f49      	ldrsh	r1, [r1, r5]
    1ef8:	f000 fb96 	bl	2628 <_lseek_r>
    1efc:	1c43      	adds	r3, r0, #1
    1efe:	d006      	beq.n	1f0e <__sseek+0x1e>
    1f00:	2380      	movs	r3, #128	; 0x80
    1f02:	89a2      	ldrh	r2, [r4, #12]
    1f04:	015b      	lsls	r3, r3, #5
    1f06:	4313      	orrs	r3, r2
    1f08:	81a3      	strh	r3, [r4, #12]
    1f0a:	6560      	str	r0, [r4, #84]	; 0x54
    1f0c:	bd70      	pop	{r4, r5, r6, pc}
    1f0e:	89a3      	ldrh	r3, [r4, #12]
    1f10:	4a01      	ldr	r2, [pc, #4]	; (1f18 <__sseek+0x28>)
    1f12:	4013      	ands	r3, r2
    1f14:	81a3      	strh	r3, [r4, #12]
    1f16:	e7f9      	b.n	1f0c <__sseek+0x1c>
    1f18:	ffffefff 	.word	0xffffefff

00001f1c <__sclose>:
    1f1c:	b510      	push	{r4, lr}
    1f1e:	230e      	movs	r3, #14
    1f20:	5ec9      	ldrsh	r1, [r1, r3]
    1f22:	f000 f911 	bl	2148 <_close_r>
    1f26:	bd10      	pop	{r4, pc}

00001f28 <__swbuf_r>:
    1f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f2a:	0005      	movs	r5, r0
    1f2c:	000e      	movs	r6, r1
    1f2e:	0014      	movs	r4, r2
    1f30:	2800      	cmp	r0, #0
    1f32:	d002      	beq.n	1f3a <__swbuf_r+0x12>
    1f34:	6983      	ldr	r3, [r0, #24]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d029      	beq.n	1f8e <__swbuf_r+0x66>
    1f3a:	4b2d      	ldr	r3, [pc, #180]	; (1ff0 <__swbuf_r+0xc8>)
    1f3c:	429c      	cmp	r4, r3
    1f3e:	d02b      	beq.n	1f98 <__swbuf_r+0x70>
    1f40:	4b2c      	ldr	r3, [pc, #176]	; (1ff4 <__swbuf_r+0xcc>)
    1f42:	429c      	cmp	r4, r3
    1f44:	d046      	beq.n	1fd4 <__swbuf_r+0xac>
    1f46:	4b2c      	ldr	r3, [pc, #176]	; (1ff8 <__swbuf_r+0xd0>)
    1f48:	429c      	cmp	r4, r3
    1f4a:	d04e      	beq.n	1fea <__swbuf_r+0xc2>
    1f4c:	69a3      	ldr	r3, [r4, #24]
    1f4e:	60a3      	str	r3, [r4, #8]
    1f50:	89a3      	ldrh	r3, [r4, #12]
    1f52:	071b      	lsls	r3, r3, #28
    1f54:	d526      	bpl.n	1fa4 <__swbuf_r+0x7c>
    1f56:	6923      	ldr	r3, [r4, #16]
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d023      	beq.n	1fa4 <__swbuf_r+0x7c>
    1f5c:	22ff      	movs	r2, #255	; 0xff
    1f5e:	b2f7      	uxtb	r7, r6
    1f60:	6961      	ldr	r1, [r4, #20]
    1f62:	4016      	ands	r6, r2
    1f64:	6822      	ldr	r2, [r4, #0]
    1f66:	1ad3      	subs	r3, r2, r3
    1f68:	4299      	cmp	r1, r3
    1f6a:	dd2a      	ble.n	1fc2 <__swbuf_r+0x9a>
    1f6c:	3301      	adds	r3, #1
    1f6e:	68a1      	ldr	r1, [r4, #8]
    1f70:	3901      	subs	r1, #1
    1f72:	60a1      	str	r1, [r4, #8]
    1f74:	1c51      	adds	r1, r2, #1
    1f76:	6021      	str	r1, [r4, #0]
    1f78:	7017      	strb	r7, [r2, #0]
    1f7a:	6962      	ldr	r2, [r4, #20]
    1f7c:	429a      	cmp	r2, r3
    1f7e:	d02b      	beq.n	1fd8 <__swbuf_r+0xb0>
    1f80:	89a3      	ldrh	r3, [r4, #12]
    1f82:	07db      	lsls	r3, r3, #31
    1f84:	d501      	bpl.n	1f8a <__swbuf_r+0x62>
    1f86:	2e0a      	cmp	r6, #10
    1f88:	d026      	beq.n	1fd8 <__swbuf_r+0xb0>
    1f8a:	0030      	movs	r0, r6
    1f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f8e:	f7ff fb07 	bl	15a0 <__sinit>
    1f92:	4b17      	ldr	r3, [pc, #92]	; (1ff0 <__swbuf_r+0xc8>)
    1f94:	429c      	cmp	r4, r3
    1f96:	d1d3      	bne.n	1f40 <__swbuf_r+0x18>
    1f98:	686c      	ldr	r4, [r5, #4]
    1f9a:	69a3      	ldr	r3, [r4, #24]
    1f9c:	60a3      	str	r3, [r4, #8]
    1f9e:	89a3      	ldrh	r3, [r4, #12]
    1fa0:	071b      	lsls	r3, r3, #28
    1fa2:	d4d8      	bmi.n	1f56 <__swbuf_r+0x2e>
    1fa4:	0021      	movs	r1, r4
    1fa6:	0028      	movs	r0, r5
    1fa8:	f000 f848 	bl	203c <__swsetup_r>
    1fac:	2800      	cmp	r0, #0
    1fae:	d119      	bne.n	1fe4 <__swbuf_r+0xbc>
    1fb0:	22ff      	movs	r2, #255	; 0xff
    1fb2:	6923      	ldr	r3, [r4, #16]
    1fb4:	b2f7      	uxtb	r7, r6
    1fb6:	6961      	ldr	r1, [r4, #20]
    1fb8:	4016      	ands	r6, r2
    1fba:	6822      	ldr	r2, [r4, #0]
    1fbc:	1ad3      	subs	r3, r2, r3
    1fbe:	4299      	cmp	r1, r3
    1fc0:	dcd4      	bgt.n	1f6c <__swbuf_r+0x44>
    1fc2:	0021      	movs	r1, r4
    1fc4:	0028      	movs	r0, r5
    1fc6:	f000 f96f 	bl	22a8 <_fflush_r>
    1fca:	2800      	cmp	r0, #0
    1fcc:	d10a      	bne.n	1fe4 <__swbuf_r+0xbc>
    1fce:	6822      	ldr	r2, [r4, #0]
    1fd0:	2301      	movs	r3, #1
    1fd2:	e7cc      	b.n	1f6e <__swbuf_r+0x46>
    1fd4:	68ac      	ldr	r4, [r5, #8]
    1fd6:	e7b9      	b.n	1f4c <__swbuf_r+0x24>
    1fd8:	0021      	movs	r1, r4
    1fda:	0028      	movs	r0, r5
    1fdc:	f000 f964 	bl	22a8 <_fflush_r>
    1fe0:	2800      	cmp	r0, #0
    1fe2:	d0d2      	beq.n	1f8a <__swbuf_r+0x62>
    1fe4:	2601      	movs	r6, #1
    1fe6:	4276      	negs	r6, r6
    1fe8:	e7cf      	b.n	1f8a <__swbuf_r+0x62>
    1fea:	68ec      	ldr	r4, [r5, #12]
    1fec:	e7ae      	b.n	1f4c <__swbuf_r+0x24>
    1fee:	46c0      	nop			; (mov r8, r8)
    1ff0:	00002d68 	.word	0x00002d68
    1ff4:	00002d48 	.word	0x00002d48
    1ff8:	00002d28 	.word	0x00002d28

00001ffc <__swbuf>:
    1ffc:	b510      	push	{r4, lr}
    1ffe:	4b04      	ldr	r3, [pc, #16]	; (2010 <__swbuf+0x14>)
    2000:	000a      	movs	r2, r1
    2002:	681b      	ldr	r3, [r3, #0]
    2004:	0001      	movs	r1, r0
    2006:	0018      	movs	r0, r3
    2008:	f7ff ff8e 	bl	1f28 <__swbuf_r>
    200c:	bd10      	pop	{r4, pc}
    200e:	46c0      	nop			; (mov r8, r8)
    2010:	20000010 	.word	0x20000010

00002014 <_write_r>:
    2014:	b570      	push	{r4, r5, r6, lr}
    2016:	0005      	movs	r5, r0
    2018:	0008      	movs	r0, r1
    201a:	0011      	movs	r1, r2
    201c:	2200      	movs	r2, #0
    201e:	4c06      	ldr	r4, [pc, #24]	; (2038 <_write_r+0x24>)
    2020:	6022      	str	r2, [r4, #0]
    2022:	001a      	movs	r2, r3
    2024:	f000 fd54 	bl	2ad0 <_write>
    2028:	1c43      	adds	r3, r0, #1
    202a:	d000      	beq.n	202e <_write_r+0x1a>
    202c:	bd70      	pop	{r4, r5, r6, pc}
    202e:	6823      	ldr	r3, [r4, #0]
    2030:	2b00      	cmp	r3, #0
    2032:	d0fb      	beq.n	202c <_write_r+0x18>
    2034:	602b      	str	r3, [r5, #0]
    2036:	e7f9      	b.n	202c <_write_r+0x18>
    2038:	2000013c 	.word	0x2000013c

0000203c <__swsetup_r>:
    203c:	4b3e      	ldr	r3, [pc, #248]	; (2138 <__swsetup_r+0xfc>)
    203e:	b570      	push	{r4, r5, r6, lr}
    2040:	681d      	ldr	r5, [r3, #0]
    2042:	0006      	movs	r6, r0
    2044:	000c      	movs	r4, r1
    2046:	2d00      	cmp	r5, #0
    2048:	d002      	beq.n	2050 <__swsetup_r+0x14>
    204a:	69ab      	ldr	r3, [r5, #24]
    204c:	2b00      	cmp	r3, #0
    204e:	d01b      	beq.n	2088 <__swsetup_r+0x4c>
    2050:	4b3a      	ldr	r3, [pc, #232]	; (213c <__swsetup_r+0x100>)
    2052:	429c      	cmp	r4, r3
    2054:	d01e      	beq.n	2094 <__swsetup_r+0x58>
    2056:	4b3a      	ldr	r3, [pc, #232]	; (2140 <__swsetup_r+0x104>)
    2058:	429c      	cmp	r4, r3
    205a:	d04c      	beq.n	20f6 <__swsetup_r+0xba>
    205c:	4b39      	ldr	r3, [pc, #228]	; (2144 <__swsetup_r+0x108>)
    205e:	429c      	cmp	r4, r3
    2060:	d060      	beq.n	2124 <__swsetup_r+0xe8>
    2062:	230c      	movs	r3, #12
    2064:	5ee2      	ldrsh	r2, [r4, r3]
    2066:	b293      	uxth	r3, r2
    2068:	0719      	lsls	r1, r3, #28
    206a:	d519      	bpl.n	20a0 <__swsetup_r+0x64>
    206c:	6921      	ldr	r1, [r4, #16]
    206e:	2900      	cmp	r1, #0
    2070:	d021      	beq.n	20b6 <__swsetup_r+0x7a>
    2072:	07da      	lsls	r2, r3, #31
    2074:	d52e      	bpl.n	20d4 <__swsetup_r+0x98>
    2076:	2300      	movs	r3, #0
    2078:	60a3      	str	r3, [r4, #8]
    207a:	6963      	ldr	r3, [r4, #20]
    207c:	2000      	movs	r0, #0
    207e:	425b      	negs	r3, r3
    2080:	61a3      	str	r3, [r4, #24]
    2082:	2900      	cmp	r1, #0
    2084:	d02e      	beq.n	20e4 <__swsetup_r+0xa8>
    2086:	bd70      	pop	{r4, r5, r6, pc}
    2088:	0028      	movs	r0, r5
    208a:	f7ff fa89 	bl	15a0 <__sinit>
    208e:	4b2b      	ldr	r3, [pc, #172]	; (213c <__swsetup_r+0x100>)
    2090:	429c      	cmp	r4, r3
    2092:	d1e0      	bne.n	2056 <__swsetup_r+0x1a>
    2094:	686c      	ldr	r4, [r5, #4]
    2096:	230c      	movs	r3, #12
    2098:	5ee2      	ldrsh	r2, [r4, r3]
    209a:	b293      	uxth	r3, r2
    209c:	0719      	lsls	r1, r3, #28
    209e:	d4e5      	bmi.n	206c <__swsetup_r+0x30>
    20a0:	06d9      	lsls	r1, r3, #27
    20a2:	d541      	bpl.n	2128 <__swsetup_r+0xec>
    20a4:	075b      	lsls	r3, r3, #29
    20a6:	d428      	bmi.n	20fa <__swsetup_r+0xbe>
    20a8:	6921      	ldr	r1, [r4, #16]
    20aa:	2308      	movs	r3, #8
    20ac:	4313      	orrs	r3, r2
    20ae:	81a3      	strh	r3, [r4, #12]
    20b0:	b29b      	uxth	r3, r3
    20b2:	2900      	cmp	r1, #0
    20b4:	d1dd      	bne.n	2072 <__swsetup_r+0x36>
    20b6:	22a0      	movs	r2, #160	; 0xa0
    20b8:	2080      	movs	r0, #128	; 0x80
    20ba:	0092      	lsls	r2, r2, #2
    20bc:	0080      	lsls	r0, r0, #2
    20be:	401a      	ands	r2, r3
    20c0:	4282      	cmp	r2, r0
    20c2:	d0d6      	beq.n	2072 <__swsetup_r+0x36>
    20c4:	0021      	movs	r1, r4
    20c6:	0030      	movs	r0, r6
    20c8:	f000 faec 	bl	26a4 <__smakebuf_r>
    20cc:	89a3      	ldrh	r3, [r4, #12]
    20ce:	6921      	ldr	r1, [r4, #16]
    20d0:	07da      	lsls	r2, r3, #31
    20d2:	d4d0      	bmi.n	2076 <__swsetup_r+0x3a>
    20d4:	2200      	movs	r2, #0
    20d6:	079b      	lsls	r3, r3, #30
    20d8:	d400      	bmi.n	20dc <__swsetup_r+0xa0>
    20da:	6962      	ldr	r2, [r4, #20]
    20dc:	60a2      	str	r2, [r4, #8]
    20de:	2000      	movs	r0, #0
    20e0:	2900      	cmp	r1, #0
    20e2:	d1d0      	bne.n	2086 <__swsetup_r+0x4a>
    20e4:	220c      	movs	r2, #12
    20e6:	5ea3      	ldrsh	r3, [r4, r2]
    20e8:	061a      	lsls	r2, r3, #24
    20ea:	d5cc      	bpl.n	2086 <__swsetup_r+0x4a>
    20ec:	2240      	movs	r2, #64	; 0x40
    20ee:	4313      	orrs	r3, r2
    20f0:	81a3      	strh	r3, [r4, #12]
    20f2:	3801      	subs	r0, #1
    20f4:	e7c7      	b.n	2086 <__swsetup_r+0x4a>
    20f6:	68ac      	ldr	r4, [r5, #8]
    20f8:	e7b3      	b.n	2062 <__swsetup_r+0x26>
    20fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    20fc:	2900      	cmp	r1, #0
    20fe:	d00a      	beq.n	2116 <__swsetup_r+0xda>
    2100:	0023      	movs	r3, r4
    2102:	3344      	adds	r3, #68	; 0x44
    2104:	4299      	cmp	r1, r3
    2106:	d004      	beq.n	2112 <__swsetup_r+0xd6>
    2108:	0030      	movs	r0, r6
    210a:	f000 fbe9 	bl	28e0 <_free_r>
    210e:	230c      	movs	r3, #12
    2110:	5ee2      	ldrsh	r2, [r4, r3]
    2112:	2300      	movs	r3, #0
    2114:	6363      	str	r3, [r4, #52]	; 0x34
    2116:	2324      	movs	r3, #36	; 0x24
    2118:	439a      	bics	r2, r3
    211a:	2300      	movs	r3, #0
    211c:	6921      	ldr	r1, [r4, #16]
    211e:	6063      	str	r3, [r4, #4]
    2120:	6021      	str	r1, [r4, #0]
    2122:	e7c2      	b.n	20aa <__swsetup_r+0x6e>
    2124:	68ec      	ldr	r4, [r5, #12]
    2126:	e79c      	b.n	2062 <__swsetup_r+0x26>
    2128:	2309      	movs	r3, #9
    212a:	6033      	str	r3, [r6, #0]
    212c:	2340      	movs	r3, #64	; 0x40
    212e:	2001      	movs	r0, #1
    2130:	431a      	orrs	r2, r3
    2132:	81a2      	strh	r2, [r4, #12]
    2134:	4240      	negs	r0, r0
    2136:	e7a6      	b.n	2086 <__swsetup_r+0x4a>
    2138:	20000010 	.word	0x20000010
    213c:	00002d68 	.word	0x00002d68
    2140:	00002d48 	.word	0x00002d48
    2144:	00002d28 	.word	0x00002d28

00002148 <_close_r>:
    2148:	2300      	movs	r3, #0
    214a:	b570      	push	{r4, r5, r6, lr}
    214c:	4c06      	ldr	r4, [pc, #24]	; (2168 <_close_r+0x20>)
    214e:	0005      	movs	r5, r0
    2150:	0008      	movs	r0, r1
    2152:	6023      	str	r3, [r4, #0]
    2154:	f000 fc86 	bl	2a64 <_close>
    2158:	1c43      	adds	r3, r0, #1
    215a:	d000      	beq.n	215e <_close_r+0x16>
    215c:	bd70      	pop	{r4, r5, r6, pc}
    215e:	6823      	ldr	r3, [r4, #0]
    2160:	2b00      	cmp	r3, #0
    2162:	d0fb      	beq.n	215c <_close_r+0x14>
    2164:	602b      	str	r3, [r5, #0]
    2166:	e7f9      	b.n	215c <_close_r+0x14>
    2168:	2000013c 	.word	0x2000013c

0000216c <__sflush_r>:
    216c:	b5f0      	push	{r4, r5, r6, r7, lr}
    216e:	46c6      	mov	lr, r8
    2170:	b500      	push	{lr}
    2172:	898b      	ldrh	r3, [r1, #12]
    2174:	4680      	mov	r8, r0
    2176:	000c      	movs	r4, r1
    2178:	071a      	lsls	r2, r3, #28
    217a:	d43d      	bmi.n	21f8 <__sflush_r+0x8c>
    217c:	684a      	ldr	r2, [r1, #4]
    217e:	2a00      	cmp	r2, #0
    2180:	dd5a      	ble.n	2238 <__sflush_r+0xcc>
    2182:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    2184:	2d00      	cmp	r5, #0
    2186:	d05a      	beq.n	223e <__sflush_r+0xd2>
    2188:	4642      	mov	r2, r8
    218a:	4641      	mov	r1, r8
    218c:	6816      	ldr	r6, [r2, #0]
    218e:	2200      	movs	r2, #0
    2190:	600a      	str	r2, [r1, #0]
    2192:	6a21      	ldr	r1, [r4, #32]
    2194:	04da      	lsls	r2, r3, #19
    2196:	d500      	bpl.n	219a <__sflush_r+0x2e>
    2198:	e07d      	b.n	2296 <__sflush_r+0x12a>
    219a:	2301      	movs	r3, #1
    219c:	2200      	movs	r2, #0
    219e:	4640      	mov	r0, r8
    21a0:	47a8      	blx	r5
    21a2:	1c43      	adds	r3, r0, #1
    21a4:	d051      	beq.n	224a <__sflush_r+0xde>
    21a6:	89a3      	ldrh	r3, [r4, #12]
    21a8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    21aa:	6a21      	ldr	r1, [r4, #32]
    21ac:	075b      	lsls	r3, r3, #29
    21ae:	d506      	bpl.n	21be <__sflush_r+0x52>
    21b0:	6863      	ldr	r3, [r4, #4]
    21b2:	1ac0      	subs	r0, r0, r3
    21b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    21b6:	2b00      	cmp	r3, #0
    21b8:	d001      	beq.n	21be <__sflush_r+0x52>
    21ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
    21bc:	1ac0      	subs	r0, r0, r3
    21be:	2300      	movs	r3, #0
    21c0:	0002      	movs	r2, r0
    21c2:	4640      	mov	r0, r8
    21c4:	47a8      	blx	r5
    21c6:	1c43      	adds	r3, r0, #1
    21c8:	d04b      	beq.n	2262 <__sflush_r+0xf6>
    21ca:	2300      	movs	r3, #0
    21cc:	6063      	str	r3, [r4, #4]
    21ce:	6923      	ldr	r3, [r4, #16]
    21d0:	6023      	str	r3, [r4, #0]
    21d2:	89a3      	ldrh	r3, [r4, #12]
    21d4:	04db      	lsls	r3, r3, #19
    21d6:	d456      	bmi.n	2286 <__sflush_r+0x11a>
    21d8:	4643      	mov	r3, r8
    21da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    21dc:	601e      	str	r6, [r3, #0]
    21de:	2900      	cmp	r1, #0
    21e0:	d02d      	beq.n	223e <__sflush_r+0xd2>
    21e2:	0023      	movs	r3, r4
    21e4:	3344      	adds	r3, #68	; 0x44
    21e6:	4299      	cmp	r1, r3
    21e8:	d002      	beq.n	21f0 <__sflush_r+0x84>
    21ea:	4640      	mov	r0, r8
    21ec:	f000 fb78 	bl	28e0 <_free_r>
    21f0:	2300      	movs	r3, #0
    21f2:	2000      	movs	r0, #0
    21f4:	6363      	str	r3, [r4, #52]	; 0x34
    21f6:	e023      	b.n	2240 <__sflush_r+0xd4>
    21f8:	690e      	ldr	r6, [r1, #16]
    21fa:	2e00      	cmp	r6, #0
    21fc:	d01f      	beq.n	223e <__sflush_r+0xd2>
    21fe:	680a      	ldr	r2, [r1, #0]
    2200:	600e      	str	r6, [r1, #0]
    2202:	1b95      	subs	r5, r2, r6
    2204:	2200      	movs	r2, #0
    2206:	079b      	lsls	r3, r3, #30
    2208:	d01d      	beq.n	2246 <__sflush_r+0xda>
    220a:	60a2      	str	r2, [r4, #8]
    220c:	2d00      	cmp	r5, #0
    220e:	dc04      	bgt.n	221a <__sflush_r+0xae>
    2210:	e015      	b.n	223e <__sflush_r+0xd2>
    2212:	1836      	adds	r6, r6, r0
    2214:	1a2d      	subs	r5, r5, r0
    2216:	2d00      	cmp	r5, #0
    2218:	dd11      	ble.n	223e <__sflush_r+0xd2>
    221a:	002b      	movs	r3, r5
    221c:	0032      	movs	r2, r6
    221e:	6a21      	ldr	r1, [r4, #32]
    2220:	4640      	mov	r0, r8
    2222:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    2224:	47b8      	blx	r7
    2226:	2800      	cmp	r0, #0
    2228:	dcf3      	bgt.n	2212 <__sflush_r+0xa6>
    222a:	2240      	movs	r2, #64	; 0x40
    222c:	2001      	movs	r0, #1
    222e:	89a3      	ldrh	r3, [r4, #12]
    2230:	4240      	negs	r0, r0
    2232:	4313      	orrs	r3, r2
    2234:	81a3      	strh	r3, [r4, #12]
    2236:	e003      	b.n	2240 <__sflush_r+0xd4>
    2238:	6c0a      	ldr	r2, [r1, #64]	; 0x40
    223a:	2a00      	cmp	r2, #0
    223c:	dca1      	bgt.n	2182 <__sflush_r+0x16>
    223e:	2000      	movs	r0, #0
    2240:	bc04      	pop	{r2}
    2242:	4690      	mov	r8, r2
    2244:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2246:	694a      	ldr	r2, [r1, #20]
    2248:	e7df      	b.n	220a <__sflush_r+0x9e>
    224a:	4643      	mov	r3, r8
    224c:	681b      	ldr	r3, [r3, #0]
    224e:	2b00      	cmp	r3, #0
    2250:	d0a9      	beq.n	21a6 <__sflush_r+0x3a>
    2252:	2b1d      	cmp	r3, #29
    2254:	d001      	beq.n	225a <__sflush_r+0xee>
    2256:	2b16      	cmp	r3, #22
    2258:	d11f      	bne.n	229a <__sflush_r+0x12e>
    225a:	4643      	mov	r3, r8
    225c:	2000      	movs	r0, #0
    225e:	601e      	str	r6, [r3, #0]
    2260:	e7ee      	b.n	2240 <__sflush_r+0xd4>
    2262:	4643      	mov	r3, r8
    2264:	6819      	ldr	r1, [r3, #0]
    2266:	230c      	movs	r3, #12
    2268:	5ee5      	ldrsh	r5, [r4, r3]
    226a:	291d      	cmp	r1, #29
    226c:	d80d      	bhi.n	228a <__sflush_r+0x11e>
    226e:	4a0d      	ldr	r2, [pc, #52]	; (22a4 <__sflush_r+0x138>)
    2270:	2301      	movs	r3, #1
    2272:	40ca      	lsrs	r2, r1
    2274:	4393      	bics	r3, r2
    2276:	d108      	bne.n	228a <__sflush_r+0x11e>
    2278:	6063      	str	r3, [r4, #4]
    227a:	6923      	ldr	r3, [r4, #16]
    227c:	6023      	str	r3, [r4, #0]
    227e:	04eb      	lsls	r3, r5, #19
    2280:	d5aa      	bpl.n	21d8 <__sflush_r+0x6c>
    2282:	2900      	cmp	r1, #0
    2284:	d1a8      	bne.n	21d8 <__sflush_r+0x6c>
    2286:	6560      	str	r0, [r4, #84]	; 0x54
    2288:	e7a6      	b.n	21d8 <__sflush_r+0x6c>
    228a:	2340      	movs	r3, #64	; 0x40
    228c:	2001      	movs	r0, #1
    228e:	431d      	orrs	r5, r3
    2290:	81a5      	strh	r5, [r4, #12]
    2292:	4240      	negs	r0, r0
    2294:	e7d4      	b.n	2240 <__sflush_r+0xd4>
    2296:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2298:	e788      	b.n	21ac <__sflush_r+0x40>
    229a:	2240      	movs	r2, #64	; 0x40
    229c:	89a3      	ldrh	r3, [r4, #12]
    229e:	4313      	orrs	r3, r2
    22a0:	81a3      	strh	r3, [r4, #12]
    22a2:	e7cd      	b.n	2240 <__sflush_r+0xd4>
    22a4:	20400001 	.word	0x20400001

000022a8 <_fflush_r>:
    22a8:	690b      	ldr	r3, [r1, #16]
    22aa:	b570      	push	{r4, r5, r6, lr}
    22ac:	0005      	movs	r5, r0
    22ae:	000c      	movs	r4, r1
    22b0:	2b00      	cmp	r3, #0
    22b2:	d016      	beq.n	22e2 <_fflush_r+0x3a>
    22b4:	2800      	cmp	r0, #0
    22b6:	d002      	beq.n	22be <_fflush_r+0x16>
    22b8:	6983      	ldr	r3, [r0, #24]
    22ba:	2b00      	cmp	r3, #0
    22bc:	d015      	beq.n	22ea <_fflush_r+0x42>
    22be:	4b0e      	ldr	r3, [pc, #56]	; (22f8 <_fflush_r+0x50>)
    22c0:	429c      	cmp	r4, r3
    22c2:	d010      	beq.n	22e6 <_fflush_r+0x3e>
    22c4:	4b0d      	ldr	r3, [pc, #52]	; (22fc <_fflush_r+0x54>)
    22c6:	429c      	cmp	r4, r3
    22c8:	d012      	beq.n	22f0 <_fflush_r+0x48>
    22ca:	4b0d      	ldr	r3, [pc, #52]	; (2300 <_fflush_r+0x58>)
    22cc:	429c      	cmp	r4, r3
    22ce:	d011      	beq.n	22f4 <_fflush_r+0x4c>
    22d0:	220c      	movs	r2, #12
    22d2:	5ea3      	ldrsh	r3, [r4, r2]
    22d4:	2b00      	cmp	r3, #0
    22d6:	d004      	beq.n	22e2 <_fflush_r+0x3a>
    22d8:	0021      	movs	r1, r4
    22da:	0028      	movs	r0, r5
    22dc:	f7ff ff46 	bl	216c <__sflush_r>
    22e0:	e000      	b.n	22e4 <_fflush_r+0x3c>
    22e2:	2000      	movs	r0, #0
    22e4:	bd70      	pop	{r4, r5, r6, pc}
    22e6:	686c      	ldr	r4, [r5, #4]
    22e8:	e7f2      	b.n	22d0 <_fflush_r+0x28>
    22ea:	f7ff f959 	bl	15a0 <__sinit>
    22ee:	e7e6      	b.n	22be <_fflush_r+0x16>
    22f0:	68ac      	ldr	r4, [r5, #8]
    22f2:	e7ed      	b.n	22d0 <_fflush_r+0x28>
    22f4:	68ec      	ldr	r4, [r5, #12]
    22f6:	e7eb      	b.n	22d0 <_fflush_r+0x28>
    22f8:	00002d68 	.word	0x00002d68
    22fc:	00002d48 	.word	0x00002d48
    2300:	00002d28 	.word	0x00002d28

00002304 <fflush>:
    2304:	b510      	push	{r4, lr}
    2306:	1e01      	subs	r1, r0, #0
    2308:	d004      	beq.n	2314 <fflush+0x10>
    230a:	4b05      	ldr	r3, [pc, #20]	; (2320 <fflush+0x1c>)
    230c:	6818      	ldr	r0, [r3, #0]
    230e:	f7ff ffcb 	bl	22a8 <_fflush_r>
    2312:	bd10      	pop	{r4, pc}
    2314:	4b03      	ldr	r3, [pc, #12]	; (2324 <fflush+0x20>)
    2316:	4904      	ldr	r1, [pc, #16]	; (2328 <fflush+0x24>)
    2318:	6818      	ldr	r0, [r3, #0]
    231a:	f7ff f98b 	bl	1634 <_fwalk_reent>
    231e:	e7f8      	b.n	2312 <fflush+0xe>
    2320:	20000010 	.word	0x20000010
    2324:	00002d24 	.word	0x00002d24
    2328:	000022a9 	.word	0x000022a9

0000232c <__sfvwrite_r>:
    232c:	b5f0      	push	{r4, r5, r6, r7, lr}
    232e:	4645      	mov	r5, r8
    2330:	46de      	mov	lr, fp
    2332:	4657      	mov	r7, sl
    2334:	464e      	mov	r6, r9
    2336:	b5e0      	push	{r5, r6, r7, lr}
    2338:	6893      	ldr	r3, [r2, #8]
    233a:	b083      	sub	sp, #12
    233c:	9000      	str	r0, [sp, #0]
    233e:	000d      	movs	r5, r1
    2340:	4690      	mov	r8, r2
    2342:	2b00      	cmp	r3, #0
    2344:	d02d      	beq.n	23a2 <__sfvwrite_r+0x76>
    2346:	898b      	ldrh	r3, [r1, #12]
    2348:	071a      	lsls	r2, r3, #28
    234a:	d532      	bpl.n	23b2 <__sfvwrite_r+0x86>
    234c:	690a      	ldr	r2, [r1, #16]
    234e:	2a00      	cmp	r2, #0
    2350:	d02f      	beq.n	23b2 <__sfvwrite_r+0x86>
    2352:	4642      	mov	r2, r8
    2354:	6816      	ldr	r6, [r2, #0]
    2356:	079a      	lsls	r2, r3, #30
    2358:	d537      	bpl.n	23ca <__sfvwrite_r+0x9e>
    235a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    235c:	2700      	movs	r7, #0
    235e:	469a      	mov	sl, r3
    2360:	4bad      	ldr	r3, [pc, #692]	; (2618 <__sfvwrite_r+0x2ec>)
    2362:	2400      	movs	r4, #0
    2364:	4699      	mov	r9, r3
    2366:	6a29      	ldr	r1, [r5, #32]
    2368:	2c00      	cmp	r4, #0
    236a:	d016      	beq.n	239a <__sfvwrite_r+0x6e>
    236c:	0023      	movs	r3, r4
    236e:	454c      	cmp	r4, r9
    2370:	d900      	bls.n	2374 <__sfvwrite_r+0x48>
    2372:	4ba9      	ldr	r3, [pc, #676]	; (2618 <__sfvwrite_r+0x2ec>)
    2374:	003a      	movs	r2, r7
    2376:	9800      	ldr	r0, [sp, #0]
    2378:	47d0      	blx	sl
    237a:	2800      	cmp	r0, #0
    237c:	dc00      	bgt.n	2380 <__sfvwrite_r+0x54>
    237e:	e08f      	b.n	24a0 <__sfvwrite_r+0x174>
    2380:	4643      	mov	r3, r8
    2382:	689b      	ldr	r3, [r3, #8]
    2384:	183f      	adds	r7, r7, r0
    2386:	1a24      	subs	r4, r4, r0
    2388:	1a18      	subs	r0, r3, r0
    238a:	4643      	mov	r3, r8
    238c:	6098      	str	r0, [r3, #8]
    238e:	d008      	beq.n	23a2 <__sfvwrite_r+0x76>
    2390:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2392:	6a29      	ldr	r1, [r5, #32]
    2394:	469a      	mov	sl, r3
    2396:	2c00      	cmp	r4, #0
    2398:	d1e8      	bne.n	236c <__sfvwrite_r+0x40>
    239a:	6837      	ldr	r7, [r6, #0]
    239c:	6874      	ldr	r4, [r6, #4]
    239e:	3608      	adds	r6, #8
    23a0:	e7e2      	b.n	2368 <__sfvwrite_r+0x3c>
    23a2:	2000      	movs	r0, #0
    23a4:	b003      	add	sp, #12
    23a6:	bc3c      	pop	{r2, r3, r4, r5}
    23a8:	4690      	mov	r8, r2
    23aa:	4699      	mov	r9, r3
    23ac:	46a2      	mov	sl, r4
    23ae:	46ab      	mov	fp, r5
    23b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23b2:	0029      	movs	r1, r5
    23b4:	9800      	ldr	r0, [sp, #0]
    23b6:	f7ff fe41 	bl	203c <__swsetup_r>
    23ba:	2800      	cmp	r0, #0
    23bc:	d000      	beq.n	23c0 <__sfvwrite_r+0x94>
    23be:	e128      	b.n	2612 <__sfvwrite_r+0x2e6>
    23c0:	4642      	mov	r2, r8
    23c2:	89ab      	ldrh	r3, [r5, #12]
    23c4:	6816      	ldr	r6, [r2, #0]
    23c6:	079a      	lsls	r2, r3, #30
    23c8:	d4c7      	bmi.n	235a <__sfvwrite_r+0x2e>
    23ca:	07da      	lsls	r2, r3, #31
    23cc:	d470      	bmi.n	24b0 <__sfvwrite_r+0x184>
    23ce:	2200      	movs	r2, #0
    23d0:	4691      	mov	r9, r2
    23d2:	2280      	movs	r2, #128	; 0x80
    23d4:	0092      	lsls	r2, r2, #2
    23d6:	2700      	movs	r7, #0
    23d8:	4693      	mov	fp, r2
    23da:	68ac      	ldr	r4, [r5, #8]
    23dc:	6828      	ldr	r0, [r5, #0]
    23de:	2f00      	cmp	r7, #0
    23e0:	d053      	beq.n	248a <__sfvwrite_r+0x15e>
    23e2:	465a      	mov	r2, fp
    23e4:	4213      	tst	r3, r2
    23e6:	d100      	bne.n	23ea <__sfvwrite_r+0xbe>
    23e8:	e0a8      	b.n	253c <__sfvwrite_r+0x210>
    23ea:	46a2      	mov	sl, r4
    23ec:	42bc      	cmp	r4, r7
    23ee:	d900      	bls.n	23f2 <__sfvwrite_r+0xc6>
    23f0:	e0d7      	b.n	25a2 <__sfvwrite_r+0x276>
    23f2:	2290      	movs	r2, #144	; 0x90
    23f4:	00d2      	lsls	r2, r2, #3
    23f6:	4213      	tst	r3, r2
    23f8:	d02e      	beq.n	2458 <__sfvwrite_r+0x12c>
    23fa:	6929      	ldr	r1, [r5, #16]
    23fc:	1a44      	subs	r4, r0, r1
    23fe:	46a4      	mov	ip, r4
    2400:	6968      	ldr	r0, [r5, #20]
    2402:	9401      	str	r4, [sp, #4]
    2404:	0042      	lsls	r2, r0, #1
    2406:	1812      	adds	r2, r2, r0
    2408:	0fd0      	lsrs	r0, r2, #31
    240a:	1882      	adds	r2, r0, r2
    240c:	1c78      	adds	r0, r7, #1
    240e:	1052      	asrs	r2, r2, #1
    2410:	4460      	add	r0, ip
    2412:	4692      	mov	sl, r2
    2414:	4290      	cmp	r0, r2
    2416:	d901      	bls.n	241c <__sfvwrite_r+0xf0>
    2418:	4682      	mov	sl, r0
    241a:	0002      	movs	r2, r0
    241c:	055b      	lsls	r3, r3, #21
    241e:	d400      	bmi.n	2422 <__sfvwrite_r+0xf6>
    2420:	e0d0      	b.n	25c4 <__sfvwrite_r+0x298>
    2422:	0011      	movs	r1, r2
    2424:	9800      	ldr	r0, [sp, #0]
    2426:	f7ff f92b 	bl	1680 <_malloc_r>
    242a:	1e04      	subs	r4, r0, #0
    242c:	d100      	bne.n	2430 <__sfvwrite_r+0x104>
    242e:	e0ea      	b.n	2606 <__sfvwrite_r+0x2da>
    2430:	9a01      	ldr	r2, [sp, #4]
    2432:	6929      	ldr	r1, [r5, #16]
    2434:	f000 f9be 	bl	27b4 <memcpy>
    2438:	89ab      	ldrh	r3, [r5, #12]
    243a:	4a78      	ldr	r2, [pc, #480]	; (261c <__sfvwrite_r+0x2f0>)
    243c:	4013      	ands	r3, r2
    243e:	2280      	movs	r2, #128	; 0x80
    2440:	4313      	orrs	r3, r2
    2442:	81ab      	strh	r3, [r5, #12]
    2444:	4652      	mov	r2, sl
    2446:	9b01      	ldr	r3, [sp, #4]
    2448:	612c      	str	r4, [r5, #16]
    244a:	18e0      	adds	r0, r4, r3
    244c:	46ba      	mov	sl, r7
    244e:	003c      	movs	r4, r7
    2450:	1ad3      	subs	r3, r2, r3
    2452:	6028      	str	r0, [r5, #0]
    2454:	616a      	str	r2, [r5, #20]
    2456:	60ab      	str	r3, [r5, #8]
    2458:	4652      	mov	r2, sl
    245a:	4649      	mov	r1, r9
    245c:	f000 f9ee 	bl	283c <memmove>
    2460:	68ab      	ldr	r3, [r5, #8]
    2462:	1b1c      	subs	r4, r3, r4
    2464:	60ac      	str	r4, [r5, #8]
    2466:	003c      	movs	r4, r7
    2468:	2700      	movs	r7, #0
    246a:	682b      	ldr	r3, [r5, #0]
    246c:	4453      	add	r3, sl
    246e:	602b      	str	r3, [r5, #0]
    2470:	4643      	mov	r3, r8
    2472:	689b      	ldr	r3, [r3, #8]
    2474:	44a1      	add	r9, r4
    2476:	1b1c      	subs	r4, r3, r4
    2478:	4643      	mov	r3, r8
    247a:	609c      	str	r4, [r3, #8]
    247c:	d100      	bne.n	2480 <__sfvwrite_r+0x154>
    247e:	e790      	b.n	23a2 <__sfvwrite_r+0x76>
    2480:	68ac      	ldr	r4, [r5, #8]
    2482:	6828      	ldr	r0, [r5, #0]
    2484:	89ab      	ldrh	r3, [r5, #12]
    2486:	2f00      	cmp	r7, #0
    2488:	d1ab      	bne.n	23e2 <__sfvwrite_r+0xb6>
    248a:	6832      	ldr	r2, [r6, #0]
    248c:	6877      	ldr	r7, [r6, #4]
    248e:	4691      	mov	r9, r2
    2490:	3608      	adds	r6, #8
    2492:	e7a4      	b.n	23de <__sfvwrite_r+0xb2>
    2494:	0029      	movs	r1, r5
    2496:	9800      	ldr	r0, [sp, #0]
    2498:	f7ff ff06 	bl	22a8 <_fflush_r>
    249c:	2800      	cmp	r0, #0
    249e:	d02d      	beq.n	24fc <__sfvwrite_r+0x1d0>
    24a0:	220c      	movs	r2, #12
    24a2:	5eab      	ldrsh	r3, [r5, r2]
    24a4:	2240      	movs	r2, #64	; 0x40
    24a6:	2001      	movs	r0, #1
    24a8:	4313      	orrs	r3, r2
    24aa:	81ab      	strh	r3, [r5, #12]
    24ac:	4240      	negs	r0, r0
    24ae:	e779      	b.n	23a4 <__sfvwrite_r+0x78>
    24b0:	2300      	movs	r3, #0
    24b2:	4699      	mov	r9, r3
    24b4:	469a      	mov	sl, r3
    24b6:	0033      	movs	r3, r6
    24b8:	2000      	movs	r0, #0
    24ba:	464e      	mov	r6, r9
    24bc:	2700      	movs	r7, #0
    24be:	4699      	mov	r9, r3
    24c0:	e025      	b.n	250e <__sfvwrite_r+0x1e2>
    24c2:	2800      	cmp	r0, #0
    24c4:	d02f      	beq.n	2526 <__sfvwrite_r+0x1fa>
    24c6:	46b3      	mov	fp, r6
    24c8:	42be      	cmp	r6, r7
    24ca:	d900      	bls.n	24ce <__sfvwrite_r+0x1a2>
    24cc:	46bb      	mov	fp, r7
    24ce:	6828      	ldr	r0, [r5, #0]
    24d0:	692a      	ldr	r2, [r5, #16]
    24d2:	696b      	ldr	r3, [r5, #20]
    24d4:	4290      	cmp	r0, r2
    24d6:	d903      	bls.n	24e0 <__sfvwrite_r+0x1b4>
    24d8:	68aa      	ldr	r2, [r5, #8]
    24da:	189c      	adds	r4, r3, r2
    24dc:	45a3      	cmp	fp, r4
    24de:	dc63      	bgt.n	25a8 <__sfvwrite_r+0x27c>
    24e0:	455b      	cmp	r3, fp
    24e2:	dd00      	ble.n	24e6 <__sfvwrite_r+0x1ba>
    24e4:	e082      	b.n	25ec <__sfvwrite_r+0x2c0>
    24e6:	6aac      	ldr	r4, [r5, #40]	; 0x28
    24e8:	4652      	mov	r2, sl
    24ea:	6a29      	ldr	r1, [r5, #32]
    24ec:	9800      	ldr	r0, [sp, #0]
    24ee:	47a0      	blx	r4
    24f0:	1e04      	subs	r4, r0, #0
    24f2:	ddd5      	ble.n	24a0 <__sfvwrite_r+0x174>
    24f4:	1b36      	subs	r6, r6, r4
    24f6:	2001      	movs	r0, #1
    24f8:	2e00      	cmp	r6, #0
    24fa:	d0cb      	beq.n	2494 <__sfvwrite_r+0x168>
    24fc:	4643      	mov	r3, r8
    24fe:	689b      	ldr	r3, [r3, #8]
    2500:	44a2      	add	sl, r4
    2502:	1b3f      	subs	r7, r7, r4
    2504:	1b1c      	subs	r4, r3, r4
    2506:	4643      	mov	r3, r8
    2508:	609c      	str	r4, [r3, #8]
    250a:	d100      	bne.n	250e <__sfvwrite_r+0x1e2>
    250c:	e749      	b.n	23a2 <__sfvwrite_r+0x76>
    250e:	2f00      	cmp	r7, #0
    2510:	d1d7      	bne.n	24c2 <__sfvwrite_r+0x196>
    2512:	464b      	mov	r3, r9
    2514:	681b      	ldr	r3, [r3, #0]
    2516:	469a      	mov	sl, r3
    2518:	464b      	mov	r3, r9
    251a:	685f      	ldr	r7, [r3, #4]
    251c:	2308      	movs	r3, #8
    251e:	469c      	mov	ip, r3
    2520:	44e1      	add	r9, ip
    2522:	2f00      	cmp	r7, #0
    2524:	d0f5      	beq.n	2512 <__sfvwrite_r+0x1e6>
    2526:	003a      	movs	r2, r7
    2528:	210a      	movs	r1, #10
    252a:	4650      	mov	r0, sl
    252c:	f000 f902 	bl	2734 <memchr>
    2530:	2800      	cmp	r0, #0
    2532:	d059      	beq.n	25e8 <__sfvwrite_r+0x2bc>
    2534:	4653      	mov	r3, sl
    2536:	3001      	adds	r0, #1
    2538:	1ac6      	subs	r6, r0, r3
    253a:	e7c4      	b.n	24c6 <__sfvwrite_r+0x19a>
    253c:	692b      	ldr	r3, [r5, #16]
    253e:	4283      	cmp	r3, r0
    2540:	d317      	bcc.n	2572 <__sfvwrite_r+0x246>
    2542:	696b      	ldr	r3, [r5, #20]
    2544:	469a      	mov	sl, r3
    2546:	42bb      	cmp	r3, r7
    2548:	d813      	bhi.n	2572 <__sfvwrite_r+0x246>
    254a:	4b35      	ldr	r3, [pc, #212]	; (2620 <__sfvwrite_r+0x2f4>)
    254c:	0038      	movs	r0, r7
    254e:	429f      	cmp	r7, r3
    2550:	d900      	bls.n	2554 <__sfvwrite_r+0x228>
    2552:	4834      	ldr	r0, [pc, #208]	; (2624 <__sfvwrite_r+0x2f8>)
    2554:	4651      	mov	r1, sl
    2556:	f000 fac5 	bl	2ae4 <__divsi3>
    255a:	4653      	mov	r3, sl
    255c:	464a      	mov	r2, r9
    255e:	4343      	muls	r3, r0
    2560:	6a29      	ldr	r1, [r5, #32]
    2562:	9800      	ldr	r0, [sp, #0]
    2564:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2566:	47a0      	blx	r4
    2568:	2800      	cmp	r0, #0
    256a:	dd99      	ble.n	24a0 <__sfvwrite_r+0x174>
    256c:	0004      	movs	r4, r0
    256e:	1b3f      	subs	r7, r7, r4
    2570:	e77e      	b.n	2470 <__sfvwrite_r+0x144>
    2572:	42bc      	cmp	r4, r7
    2574:	d900      	bls.n	2578 <__sfvwrite_r+0x24c>
    2576:	003c      	movs	r4, r7
    2578:	0022      	movs	r2, r4
    257a:	4649      	mov	r1, r9
    257c:	f000 f95e 	bl	283c <memmove>
    2580:	68ab      	ldr	r3, [r5, #8]
    2582:	682a      	ldr	r2, [r5, #0]
    2584:	1b1b      	subs	r3, r3, r4
    2586:	1912      	adds	r2, r2, r4
    2588:	60ab      	str	r3, [r5, #8]
    258a:	602a      	str	r2, [r5, #0]
    258c:	2b00      	cmp	r3, #0
    258e:	d1ee      	bne.n	256e <__sfvwrite_r+0x242>
    2590:	0029      	movs	r1, r5
    2592:	9800      	ldr	r0, [sp, #0]
    2594:	f7ff fe88 	bl	22a8 <_fflush_r>
    2598:	2800      	cmp	r0, #0
    259a:	d000      	beq.n	259e <__sfvwrite_r+0x272>
    259c:	e780      	b.n	24a0 <__sfvwrite_r+0x174>
    259e:	1b3f      	subs	r7, r7, r4
    25a0:	e766      	b.n	2470 <__sfvwrite_r+0x144>
    25a2:	003c      	movs	r4, r7
    25a4:	46ba      	mov	sl, r7
    25a6:	e757      	b.n	2458 <__sfvwrite_r+0x12c>
    25a8:	4651      	mov	r1, sl
    25aa:	0022      	movs	r2, r4
    25ac:	f000 f946 	bl	283c <memmove>
    25b0:	682b      	ldr	r3, [r5, #0]
    25b2:	0029      	movs	r1, r5
    25b4:	191b      	adds	r3, r3, r4
    25b6:	602b      	str	r3, [r5, #0]
    25b8:	9800      	ldr	r0, [sp, #0]
    25ba:	f7ff fe75 	bl	22a8 <_fflush_r>
    25be:	2800      	cmp	r0, #0
    25c0:	d098      	beq.n	24f4 <__sfvwrite_r+0x1c8>
    25c2:	e76d      	b.n	24a0 <__sfvwrite_r+0x174>
    25c4:	9800      	ldr	r0, [sp, #0]
    25c6:	f000 f9e1 	bl	298c <_realloc_r>
    25ca:	1e04      	subs	r4, r0, #0
    25cc:	d000      	beq.n	25d0 <__sfvwrite_r+0x2a4>
    25ce:	e739      	b.n	2444 <__sfvwrite_r+0x118>
    25d0:	9c00      	ldr	r4, [sp, #0]
    25d2:	6929      	ldr	r1, [r5, #16]
    25d4:	0020      	movs	r0, r4
    25d6:	f000 f983 	bl	28e0 <_free_r>
    25da:	2280      	movs	r2, #128	; 0x80
    25dc:	89ab      	ldrh	r3, [r5, #12]
    25de:	4393      	bics	r3, r2
    25e0:	3a74      	subs	r2, #116	; 0x74
    25e2:	b21b      	sxth	r3, r3
    25e4:	6022      	str	r2, [r4, #0]
    25e6:	e75d      	b.n	24a4 <__sfvwrite_r+0x178>
    25e8:	1c7e      	adds	r6, r7, #1
    25ea:	e76c      	b.n	24c6 <__sfvwrite_r+0x19a>
    25ec:	465a      	mov	r2, fp
    25ee:	4651      	mov	r1, sl
    25f0:	f000 f924 	bl	283c <memmove>
    25f4:	465a      	mov	r2, fp
    25f6:	68ab      	ldr	r3, [r5, #8]
    25f8:	465c      	mov	r4, fp
    25fa:	1a9b      	subs	r3, r3, r2
    25fc:	60ab      	str	r3, [r5, #8]
    25fe:	682b      	ldr	r3, [r5, #0]
    2600:	445b      	add	r3, fp
    2602:	602b      	str	r3, [r5, #0]
    2604:	e776      	b.n	24f4 <__sfvwrite_r+0x1c8>
    2606:	230c      	movs	r3, #12
    2608:	9a00      	ldr	r2, [sp, #0]
    260a:	6013      	str	r3, [r2, #0]
    260c:	220c      	movs	r2, #12
    260e:	5eab      	ldrsh	r3, [r5, r2]
    2610:	e748      	b.n	24a4 <__sfvwrite_r+0x178>
    2612:	2001      	movs	r0, #1
    2614:	4240      	negs	r0, r0
    2616:	e6c5      	b.n	23a4 <__sfvwrite_r+0x78>
    2618:	7ffffc00 	.word	0x7ffffc00
    261c:	fffffb7f 	.word	0xfffffb7f
    2620:	7ffffffe 	.word	0x7ffffffe
    2624:	7fffffff 	.word	0x7fffffff

00002628 <_lseek_r>:
    2628:	b570      	push	{r4, r5, r6, lr}
    262a:	0005      	movs	r5, r0
    262c:	0008      	movs	r0, r1
    262e:	0011      	movs	r1, r2
    2630:	2200      	movs	r2, #0
    2632:	4c06      	ldr	r4, [pc, #24]	; (264c <_lseek_r+0x24>)
    2634:	6022      	str	r2, [r4, #0]
    2636:	001a      	movs	r2, r3
    2638:	f000 fa2c 	bl	2a94 <_lseek>
    263c:	1c43      	adds	r3, r0, #1
    263e:	d000      	beq.n	2642 <_lseek_r+0x1a>
    2640:	bd70      	pop	{r4, r5, r6, pc}
    2642:	6823      	ldr	r3, [r4, #0]
    2644:	2b00      	cmp	r3, #0
    2646:	d0fb      	beq.n	2640 <_lseek_r+0x18>
    2648:	602b      	str	r3, [r5, #0]
    264a:	e7f9      	b.n	2640 <_lseek_r+0x18>
    264c:	2000013c 	.word	0x2000013c

00002650 <__swhatbuf_r>:
    2650:	b570      	push	{r4, r5, r6, lr}
    2652:	000c      	movs	r4, r1
    2654:	001d      	movs	r5, r3
    2656:	230e      	movs	r3, #14
    2658:	5ec9      	ldrsh	r1, [r1, r3]
    265a:	b096      	sub	sp, #88	; 0x58
    265c:	0016      	movs	r6, r2
    265e:	2900      	cmp	r1, #0
    2660:	da0d      	bge.n	267e <__swhatbuf_r+0x2e>
    2662:	2300      	movs	r3, #0
    2664:	602b      	str	r3, [r5, #0]
    2666:	89a3      	ldrh	r3, [r4, #12]
    2668:	061b      	lsls	r3, r3, #24
    266a:	d405      	bmi.n	2678 <__swhatbuf_r+0x28>
    266c:	2380      	movs	r3, #128	; 0x80
    266e:	00db      	lsls	r3, r3, #3
    2670:	6033      	str	r3, [r6, #0]
    2672:	2000      	movs	r0, #0
    2674:	b016      	add	sp, #88	; 0x58
    2676:	bd70      	pop	{r4, r5, r6, pc}
    2678:	2340      	movs	r3, #64	; 0x40
    267a:	6033      	str	r3, [r6, #0]
    267c:	e7f9      	b.n	2672 <__swhatbuf_r+0x22>
    267e:	466a      	mov	r2, sp
    2680:	f000 f9c0 	bl	2a04 <_fstat_r>
    2684:	2800      	cmp	r0, #0
    2686:	dbec      	blt.n	2662 <__swhatbuf_r+0x12>
    2688:	22f0      	movs	r2, #240	; 0xf0
    268a:	9b01      	ldr	r3, [sp, #4]
    268c:	0212      	lsls	r2, r2, #8
    268e:	4013      	ands	r3, r2
    2690:	4a03      	ldr	r2, [pc, #12]	; (26a0 <__swhatbuf_r+0x50>)
    2692:	4694      	mov	ip, r2
    2694:	4463      	add	r3, ip
    2696:	425a      	negs	r2, r3
    2698:	4153      	adcs	r3, r2
    269a:	602b      	str	r3, [r5, #0]
    269c:	e7e6      	b.n	266c <__swhatbuf_r+0x1c>
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	ffffe000 	.word	0xffffe000

000026a4 <__smakebuf_r>:
    26a4:	b570      	push	{r4, r5, r6, lr}
    26a6:	898b      	ldrh	r3, [r1, #12]
    26a8:	b082      	sub	sp, #8
    26aa:	0006      	movs	r6, r0
    26ac:	000c      	movs	r4, r1
    26ae:	079b      	lsls	r3, r3, #30
    26b0:	d507      	bpl.n	26c2 <__smakebuf_r+0x1e>
    26b2:	0023      	movs	r3, r4
    26b4:	3347      	adds	r3, #71	; 0x47
    26b6:	6023      	str	r3, [r4, #0]
    26b8:	6123      	str	r3, [r4, #16]
    26ba:	2301      	movs	r3, #1
    26bc:	6163      	str	r3, [r4, #20]
    26be:	b002      	add	sp, #8
    26c0:	bd70      	pop	{r4, r5, r6, pc}
    26c2:	ab01      	add	r3, sp, #4
    26c4:	466a      	mov	r2, sp
    26c6:	f7ff ffc3 	bl	2650 <__swhatbuf_r>
    26ca:	9900      	ldr	r1, [sp, #0]
    26cc:	0005      	movs	r5, r0
    26ce:	0030      	movs	r0, r6
    26d0:	f7fe ffd6 	bl	1680 <_malloc_r>
    26d4:	2800      	cmp	r0, #0
    26d6:	d01e      	beq.n	2716 <__smakebuf_r+0x72>
    26d8:	2280      	movs	r2, #128	; 0x80
    26da:	4b15      	ldr	r3, [pc, #84]	; (2730 <__smakebuf_r+0x8c>)
    26dc:	62b3      	str	r3, [r6, #40]	; 0x28
    26de:	89a3      	ldrh	r3, [r4, #12]
    26e0:	6020      	str	r0, [r4, #0]
    26e2:	4313      	orrs	r3, r2
    26e4:	9a00      	ldr	r2, [sp, #0]
    26e6:	b21b      	sxth	r3, r3
    26e8:	6162      	str	r2, [r4, #20]
    26ea:	9a01      	ldr	r2, [sp, #4]
    26ec:	81a3      	strh	r3, [r4, #12]
    26ee:	6120      	str	r0, [r4, #16]
    26f0:	2a00      	cmp	r2, #0
    26f2:	d102      	bne.n	26fa <__smakebuf_r+0x56>
    26f4:	432b      	orrs	r3, r5
    26f6:	81a3      	strh	r3, [r4, #12]
    26f8:	e7e1      	b.n	26be <__smakebuf_r+0x1a>
    26fa:	230e      	movs	r3, #14
    26fc:	5ee1      	ldrsh	r1, [r4, r3]
    26fe:	0030      	movs	r0, r6
    2700:	f000 f994 	bl	2a2c <_isatty_r>
    2704:	2800      	cmp	r0, #0
    2706:	d010      	beq.n	272a <__smakebuf_r+0x86>
    2708:	2203      	movs	r2, #3
    270a:	89a3      	ldrh	r3, [r4, #12]
    270c:	4393      	bics	r3, r2
    270e:	2201      	movs	r2, #1
    2710:	4313      	orrs	r3, r2
    2712:	b21b      	sxth	r3, r3
    2714:	e7ee      	b.n	26f4 <__smakebuf_r+0x50>
    2716:	220c      	movs	r2, #12
    2718:	5ea3      	ldrsh	r3, [r4, r2]
    271a:	059a      	lsls	r2, r3, #22
    271c:	d4cf      	bmi.n	26be <__smakebuf_r+0x1a>
    271e:	2203      	movs	r2, #3
    2720:	4393      	bics	r3, r2
    2722:	2202      	movs	r2, #2
    2724:	4313      	orrs	r3, r2
    2726:	81a3      	strh	r3, [r4, #12]
    2728:	e7c3      	b.n	26b2 <__smakebuf_r+0xe>
    272a:	220c      	movs	r2, #12
    272c:	5ea3      	ldrsh	r3, [r4, r2]
    272e:	e7e1      	b.n	26f4 <__smakebuf_r+0x50>
    2730:	000013b5 	.word	0x000013b5

00002734 <memchr>:
    2734:	b570      	push	{r4, r5, r6, lr}
    2736:	b2cc      	uxtb	r4, r1
    2738:	0783      	lsls	r3, r0, #30
    273a:	d034      	beq.n	27a6 <memchr+0x72>
    273c:	1e53      	subs	r3, r2, #1
    273e:	2a00      	cmp	r2, #0
    2740:	d01b      	beq.n	277a <memchr+0x46>
    2742:	7802      	ldrb	r2, [r0, #0]
    2744:	42a2      	cmp	r2, r4
    2746:	d019      	beq.n	277c <memchr+0x48>
    2748:	2503      	movs	r5, #3
    274a:	e004      	b.n	2756 <memchr+0x22>
    274c:	3b01      	subs	r3, #1
    274e:	d314      	bcc.n	277a <memchr+0x46>
    2750:	7802      	ldrb	r2, [r0, #0]
    2752:	42a2      	cmp	r2, r4
    2754:	d012      	beq.n	277c <memchr+0x48>
    2756:	3001      	adds	r0, #1
    2758:	4228      	tst	r0, r5
    275a:	d1f7      	bne.n	274c <memchr+0x18>
    275c:	2b03      	cmp	r3, #3
    275e:	d80e      	bhi.n	277e <memchr+0x4a>
    2760:	2b00      	cmp	r3, #0
    2762:	d00a      	beq.n	277a <memchr+0x46>
    2764:	7802      	ldrb	r2, [r0, #0]
    2766:	42a2      	cmp	r2, r4
    2768:	d008      	beq.n	277c <memchr+0x48>
    276a:	18c3      	adds	r3, r0, r3
    276c:	e002      	b.n	2774 <memchr+0x40>
    276e:	7802      	ldrb	r2, [r0, #0]
    2770:	42a2      	cmp	r2, r4
    2772:	d003      	beq.n	277c <memchr+0x48>
    2774:	3001      	adds	r0, #1
    2776:	4283      	cmp	r3, r0
    2778:	d1f9      	bne.n	276e <memchr+0x3a>
    277a:	2000      	movs	r0, #0
    277c:	bd70      	pop	{r4, r5, r6, pc}
    277e:	22ff      	movs	r2, #255	; 0xff
    2780:	060d      	lsls	r5, r1, #24
    2782:	0c2d      	lsrs	r5, r5, #16
    2784:	4011      	ands	r1, r2
    2786:	4329      	orrs	r1, r5
    2788:	040d      	lsls	r5, r1, #16
    278a:	4e08      	ldr	r6, [pc, #32]	; (27ac <memchr+0x78>)
    278c:	430d      	orrs	r5, r1
    278e:	6802      	ldr	r2, [r0, #0]
    2790:	4907      	ldr	r1, [pc, #28]	; (27b0 <memchr+0x7c>)
    2792:	406a      	eors	r2, r5
    2794:	1851      	adds	r1, r2, r1
    2796:	4391      	bics	r1, r2
    2798:	4231      	tst	r1, r6
    279a:	d1e3      	bne.n	2764 <memchr+0x30>
    279c:	3b04      	subs	r3, #4
    279e:	3004      	adds	r0, #4
    27a0:	2b03      	cmp	r3, #3
    27a2:	d8f4      	bhi.n	278e <memchr+0x5a>
    27a4:	e7dc      	b.n	2760 <memchr+0x2c>
    27a6:	0013      	movs	r3, r2
    27a8:	e7d8      	b.n	275c <memchr+0x28>
    27aa:	46c0      	nop			; (mov r8, r8)
    27ac:	80808080 	.word	0x80808080
    27b0:	fefefeff 	.word	0xfefefeff

000027b4 <memcpy>:
    27b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27b6:	2a0f      	cmp	r2, #15
    27b8:	d937      	bls.n	282a <memcpy+0x76>
    27ba:	000d      	movs	r5, r1
    27bc:	4305      	orrs	r5, r0
    27be:	000c      	movs	r4, r1
    27c0:	0003      	movs	r3, r0
    27c2:	07ad      	lsls	r5, r5, #30
    27c4:	d135      	bne.n	2832 <memcpy+0x7e>
    27c6:	0015      	movs	r5, r2
    27c8:	3d10      	subs	r5, #16
    27ca:	092d      	lsrs	r5, r5, #4
    27cc:	012e      	lsls	r6, r5, #4
    27ce:	1836      	adds	r6, r6, r0
    27d0:	3610      	adds	r6, #16
    27d2:	6827      	ldr	r7, [r4, #0]
    27d4:	601f      	str	r7, [r3, #0]
    27d6:	6867      	ldr	r7, [r4, #4]
    27d8:	605f      	str	r7, [r3, #4]
    27da:	68a7      	ldr	r7, [r4, #8]
    27dc:	609f      	str	r7, [r3, #8]
    27de:	68e7      	ldr	r7, [r4, #12]
    27e0:	3410      	adds	r4, #16
    27e2:	60df      	str	r7, [r3, #12]
    27e4:	3310      	adds	r3, #16
    27e6:	42b3      	cmp	r3, r6
    27e8:	d1f3      	bne.n	27d2 <memcpy+0x1e>
    27ea:	240f      	movs	r4, #15
    27ec:	3501      	adds	r5, #1
    27ee:	012d      	lsls	r5, r5, #4
    27f0:	1949      	adds	r1, r1, r5
    27f2:	4014      	ands	r4, r2
    27f4:	1945      	adds	r5, r0, r5
    27f6:	2c03      	cmp	r4, #3
    27f8:	d91d      	bls.n	2836 <memcpy+0x82>
    27fa:	2300      	movs	r3, #0
    27fc:	58ce      	ldr	r6, [r1, r3]
    27fe:	50ee      	str	r6, [r5, r3]
    2800:	3304      	adds	r3, #4
    2802:	1ae6      	subs	r6, r4, r3
    2804:	2e03      	cmp	r6, #3
    2806:	d8f9      	bhi.n	27fc <memcpy+0x48>
    2808:	2303      	movs	r3, #3
    280a:	3c04      	subs	r4, #4
    280c:	08a4      	lsrs	r4, r4, #2
    280e:	3401      	adds	r4, #1
    2810:	00a4      	lsls	r4, r4, #2
    2812:	401a      	ands	r2, r3
    2814:	192d      	adds	r5, r5, r4
    2816:	1909      	adds	r1, r1, r4
    2818:	2a00      	cmp	r2, #0
    281a:	d005      	beq.n	2828 <memcpy+0x74>
    281c:	2300      	movs	r3, #0
    281e:	5ccc      	ldrb	r4, [r1, r3]
    2820:	54ec      	strb	r4, [r5, r3]
    2822:	3301      	adds	r3, #1
    2824:	4293      	cmp	r3, r2
    2826:	d1fa      	bne.n	281e <memcpy+0x6a>
    2828:	bdf0      	pop	{r4, r5, r6, r7, pc}
    282a:	0005      	movs	r5, r0
    282c:	2a00      	cmp	r2, #0
    282e:	d1f5      	bne.n	281c <memcpy+0x68>
    2830:	e7fa      	b.n	2828 <memcpy+0x74>
    2832:	0005      	movs	r5, r0
    2834:	e7f2      	b.n	281c <memcpy+0x68>
    2836:	0022      	movs	r2, r4
    2838:	e7f8      	b.n	282c <memcpy+0x78>
    283a:	46c0      	nop			; (mov r8, r8)

0000283c <memmove>:
    283c:	b5f0      	push	{r4, r5, r6, r7, lr}
    283e:	4288      	cmp	r0, r1
    2840:	d90a      	bls.n	2858 <memmove+0x1c>
    2842:	188b      	adds	r3, r1, r2
    2844:	4298      	cmp	r0, r3
    2846:	d207      	bcs.n	2858 <memmove+0x1c>
    2848:	1e53      	subs	r3, r2, #1
    284a:	2a00      	cmp	r2, #0
    284c:	d003      	beq.n	2856 <memmove+0x1a>
    284e:	5cca      	ldrb	r2, [r1, r3]
    2850:	54c2      	strb	r2, [r0, r3]
    2852:	3b01      	subs	r3, #1
    2854:	d2fb      	bcs.n	284e <memmove+0x12>
    2856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2858:	2a0f      	cmp	r2, #15
    285a:	d809      	bhi.n	2870 <memmove+0x34>
    285c:	0005      	movs	r5, r0
    285e:	2a00      	cmp	r2, #0
    2860:	d0f9      	beq.n	2856 <memmove+0x1a>
    2862:	2300      	movs	r3, #0
    2864:	5ccc      	ldrb	r4, [r1, r3]
    2866:	54ec      	strb	r4, [r5, r3]
    2868:	3301      	adds	r3, #1
    286a:	4293      	cmp	r3, r2
    286c:	d1fa      	bne.n	2864 <memmove+0x28>
    286e:	e7f2      	b.n	2856 <memmove+0x1a>
    2870:	000d      	movs	r5, r1
    2872:	4305      	orrs	r5, r0
    2874:	000c      	movs	r4, r1
    2876:	0003      	movs	r3, r0
    2878:	07ad      	lsls	r5, r5, #30
    287a:	d129      	bne.n	28d0 <memmove+0x94>
    287c:	0015      	movs	r5, r2
    287e:	3d10      	subs	r5, #16
    2880:	092d      	lsrs	r5, r5, #4
    2882:	012f      	lsls	r7, r5, #4
    2884:	183f      	adds	r7, r7, r0
    2886:	3710      	adds	r7, #16
    2888:	6826      	ldr	r6, [r4, #0]
    288a:	601e      	str	r6, [r3, #0]
    288c:	6866      	ldr	r6, [r4, #4]
    288e:	605e      	str	r6, [r3, #4]
    2890:	68a6      	ldr	r6, [r4, #8]
    2892:	609e      	str	r6, [r3, #8]
    2894:	68e6      	ldr	r6, [r4, #12]
    2896:	3410      	adds	r4, #16
    2898:	60de      	str	r6, [r3, #12]
    289a:	3310      	adds	r3, #16
    289c:	42bb      	cmp	r3, r7
    289e:	d1f3      	bne.n	2888 <memmove+0x4c>
    28a0:	240f      	movs	r4, #15
    28a2:	3501      	adds	r5, #1
    28a4:	012d      	lsls	r5, r5, #4
    28a6:	1949      	adds	r1, r1, r5
    28a8:	4014      	ands	r4, r2
    28aa:	1945      	adds	r5, r0, r5
    28ac:	2c03      	cmp	r4, #3
    28ae:	d911      	bls.n	28d4 <memmove+0x98>
    28b0:	2300      	movs	r3, #0
    28b2:	58ce      	ldr	r6, [r1, r3]
    28b4:	50ee      	str	r6, [r5, r3]
    28b6:	3304      	adds	r3, #4
    28b8:	1ae6      	subs	r6, r4, r3
    28ba:	2e03      	cmp	r6, #3
    28bc:	d8f9      	bhi.n	28b2 <memmove+0x76>
    28be:	2303      	movs	r3, #3
    28c0:	3c04      	subs	r4, #4
    28c2:	08a4      	lsrs	r4, r4, #2
    28c4:	3401      	adds	r4, #1
    28c6:	00a4      	lsls	r4, r4, #2
    28c8:	192d      	adds	r5, r5, r4
    28ca:	1909      	adds	r1, r1, r4
    28cc:	401a      	ands	r2, r3
    28ce:	e7c6      	b.n	285e <memmove+0x22>
    28d0:	0005      	movs	r5, r0
    28d2:	e7c6      	b.n	2862 <memmove+0x26>
    28d4:	0022      	movs	r2, r4
    28d6:	e7c2      	b.n	285e <memmove+0x22>

000028d8 <__malloc_lock>:
    28d8:	4770      	bx	lr
    28da:	46c0      	nop			; (mov r8, r8)

000028dc <__malloc_unlock>:
    28dc:	4770      	bx	lr
    28de:	46c0      	nop			; (mov r8, r8)

000028e0 <_free_r>:
    28e0:	b570      	push	{r4, r5, r6, lr}
    28e2:	0005      	movs	r5, r0
    28e4:	2900      	cmp	r1, #0
    28e6:	d015      	beq.n	2914 <_free_r+0x34>
    28e8:	1f0c      	subs	r4, r1, #4
    28ea:	6823      	ldr	r3, [r4, #0]
    28ec:	2b00      	cmp	r3, #0
    28ee:	db27      	blt.n	2940 <_free_r+0x60>
    28f0:	0028      	movs	r0, r5
    28f2:	f7ff fff1 	bl	28d8 <__malloc_lock>
    28f6:	4b24      	ldr	r3, [pc, #144]	; (2988 <_free_r+0xa8>)
    28f8:	681a      	ldr	r2, [r3, #0]
    28fa:	2a00      	cmp	r2, #0
    28fc:	d005      	beq.n	290a <_free_r+0x2a>
    28fe:	42a2      	cmp	r2, r4
    2900:	d90c      	bls.n	291c <_free_r+0x3c>
    2902:	6821      	ldr	r1, [r4, #0]
    2904:	1860      	adds	r0, r4, r1
    2906:	4282      	cmp	r2, r0
    2908:	d01c      	beq.n	2944 <_free_r+0x64>
    290a:	6062      	str	r2, [r4, #4]
    290c:	0028      	movs	r0, r5
    290e:	601c      	str	r4, [r3, #0]
    2910:	f7ff ffe4 	bl	28dc <__malloc_unlock>
    2914:	bd70      	pop	{r4, r5, r6, pc}
    2916:	42a3      	cmp	r3, r4
    2918:	d803      	bhi.n	2922 <_free_r+0x42>
    291a:	001a      	movs	r2, r3
    291c:	6853      	ldr	r3, [r2, #4]
    291e:	2b00      	cmp	r3, #0
    2920:	d1f9      	bne.n	2916 <_free_r+0x36>
    2922:	6811      	ldr	r1, [r2, #0]
    2924:	1850      	adds	r0, r2, r1
    2926:	42a0      	cmp	r0, r4
    2928:	d019      	beq.n	295e <_free_r+0x7e>
    292a:	d812      	bhi.n	2952 <_free_r+0x72>
    292c:	6821      	ldr	r1, [r4, #0]
    292e:	1860      	adds	r0, r4, r1
    2930:	4283      	cmp	r3, r0
    2932:	d021      	beq.n	2978 <_free_r+0x98>
    2934:	6063      	str	r3, [r4, #4]
    2936:	6054      	str	r4, [r2, #4]
    2938:	0028      	movs	r0, r5
    293a:	f7ff ffcf 	bl	28dc <__malloc_unlock>
    293e:	e7e9      	b.n	2914 <_free_r+0x34>
    2940:	18e4      	adds	r4, r4, r3
    2942:	e7d5      	b.n	28f0 <_free_r+0x10>
    2944:	6810      	ldr	r0, [r2, #0]
    2946:	6852      	ldr	r2, [r2, #4]
    2948:	4684      	mov	ip, r0
    294a:	4461      	add	r1, ip
    294c:	6021      	str	r1, [r4, #0]
    294e:	6062      	str	r2, [r4, #4]
    2950:	e7dc      	b.n	290c <_free_r+0x2c>
    2952:	230c      	movs	r3, #12
    2954:	0028      	movs	r0, r5
    2956:	602b      	str	r3, [r5, #0]
    2958:	f7ff ffc0 	bl	28dc <__malloc_unlock>
    295c:	e7da      	b.n	2914 <_free_r+0x34>
    295e:	6820      	ldr	r0, [r4, #0]
    2960:	1809      	adds	r1, r1, r0
    2962:	1850      	adds	r0, r2, r1
    2964:	6011      	str	r1, [r2, #0]
    2966:	4283      	cmp	r3, r0
    2968:	d1e6      	bne.n	2938 <_free_r+0x58>
    296a:	6818      	ldr	r0, [r3, #0]
    296c:	685b      	ldr	r3, [r3, #4]
    296e:	4684      	mov	ip, r0
    2970:	4461      	add	r1, ip
    2972:	6011      	str	r1, [r2, #0]
    2974:	6053      	str	r3, [r2, #4]
    2976:	e7df      	b.n	2938 <_free_r+0x58>
    2978:	6818      	ldr	r0, [r3, #0]
    297a:	685b      	ldr	r3, [r3, #4]
    297c:	4684      	mov	ip, r0
    297e:	4461      	add	r1, ip
    2980:	6021      	str	r1, [r4, #0]
    2982:	6063      	str	r3, [r4, #4]
    2984:	6054      	str	r4, [r2, #4]
    2986:	e7d7      	b.n	2938 <_free_r+0x58>
    2988:	2000012c 	.word	0x2000012c

0000298c <_realloc_r>:
    298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    298e:	0007      	movs	r7, r0
    2990:	000c      	movs	r4, r1
    2992:	0015      	movs	r5, r2
    2994:	2900      	cmp	r1, #0
    2996:	d017      	beq.n	29c8 <_realloc_r+0x3c>
    2998:	2a00      	cmp	r2, #0
    299a:	d01a      	beq.n	29d2 <_realloc_r+0x46>
    299c:	f000 f858 	bl	2a50 <_malloc_usable_size_r>
    29a0:	0026      	movs	r6, r4
    29a2:	42a8      	cmp	r0, r5
    29a4:	d301      	bcc.n	29aa <_realloc_r+0x1e>
    29a6:	0030      	movs	r0, r6
    29a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29aa:	0029      	movs	r1, r5
    29ac:	0038      	movs	r0, r7
    29ae:	f7fe fe67 	bl	1680 <_malloc_r>
    29b2:	1e06      	subs	r6, r0, #0
    29b4:	d0f7      	beq.n	29a6 <_realloc_r+0x1a>
    29b6:	0021      	movs	r1, r4
    29b8:	002a      	movs	r2, r5
    29ba:	f7ff fefb 	bl	27b4 <memcpy>
    29be:	0021      	movs	r1, r4
    29c0:	0038      	movs	r0, r7
    29c2:	f7ff ff8d 	bl	28e0 <_free_r>
    29c6:	e7ee      	b.n	29a6 <_realloc_r+0x1a>
    29c8:	0011      	movs	r1, r2
    29ca:	f7fe fe59 	bl	1680 <_malloc_r>
    29ce:	0006      	movs	r6, r0
    29d0:	e7e9      	b.n	29a6 <_realloc_r+0x1a>
    29d2:	f7ff ff85 	bl	28e0 <_free_r>
    29d6:	2600      	movs	r6, #0
    29d8:	e7e5      	b.n	29a6 <_realloc_r+0x1a>
    29da:	46c0      	nop			; (mov r8, r8)

000029dc <_read_r>:
    29dc:	b570      	push	{r4, r5, r6, lr}
    29de:	0005      	movs	r5, r0
    29e0:	0008      	movs	r0, r1
    29e2:	0011      	movs	r1, r2
    29e4:	2200      	movs	r2, #0
    29e6:	4c06      	ldr	r4, [pc, #24]	; (2a00 <_read_r+0x24>)
    29e8:	6022      	str	r2, [r4, #0]
    29ea:	001a      	movs	r2, r3
    29ec:	f000 f85a 	bl	2aa4 <_read>
    29f0:	1c43      	adds	r3, r0, #1
    29f2:	d000      	beq.n	29f6 <_read_r+0x1a>
    29f4:	bd70      	pop	{r4, r5, r6, pc}
    29f6:	6823      	ldr	r3, [r4, #0]
    29f8:	2b00      	cmp	r3, #0
    29fa:	d0fb      	beq.n	29f4 <_read_r+0x18>
    29fc:	602b      	str	r3, [r5, #0]
    29fe:	e7f9      	b.n	29f4 <_read_r+0x18>
    2a00:	2000013c 	.word	0x2000013c

00002a04 <_fstat_r>:
    2a04:	2300      	movs	r3, #0
    2a06:	b570      	push	{r4, r5, r6, lr}
    2a08:	4c07      	ldr	r4, [pc, #28]	; (2a28 <_fstat_r+0x24>)
    2a0a:	0005      	movs	r5, r0
    2a0c:	0008      	movs	r0, r1
    2a0e:	0011      	movs	r1, r2
    2a10:	6023      	str	r3, [r4, #0]
    2a12:	f000 f82f 	bl	2a74 <_fstat>
    2a16:	1c43      	adds	r3, r0, #1
    2a18:	d000      	beq.n	2a1c <_fstat_r+0x18>
    2a1a:	bd70      	pop	{r4, r5, r6, pc}
    2a1c:	6823      	ldr	r3, [r4, #0]
    2a1e:	2b00      	cmp	r3, #0
    2a20:	d0fb      	beq.n	2a1a <_fstat_r+0x16>
    2a22:	602b      	str	r3, [r5, #0]
    2a24:	e7f9      	b.n	2a1a <_fstat_r+0x16>
    2a26:	46c0      	nop			; (mov r8, r8)
    2a28:	2000013c 	.word	0x2000013c

00002a2c <_isatty_r>:
    2a2c:	2300      	movs	r3, #0
    2a2e:	b570      	push	{r4, r5, r6, lr}
    2a30:	4c06      	ldr	r4, [pc, #24]	; (2a4c <_isatty_r+0x20>)
    2a32:	0005      	movs	r5, r0
    2a34:	0008      	movs	r0, r1
    2a36:	6023      	str	r3, [r4, #0]
    2a38:	f000 f824 	bl	2a84 <_isatty>
    2a3c:	1c43      	adds	r3, r0, #1
    2a3e:	d000      	beq.n	2a42 <_isatty_r+0x16>
    2a40:	bd70      	pop	{r4, r5, r6, pc}
    2a42:	6823      	ldr	r3, [r4, #0]
    2a44:	2b00      	cmp	r3, #0
    2a46:	d0fb      	beq.n	2a40 <_isatty_r+0x14>
    2a48:	602b      	str	r3, [r5, #0]
    2a4a:	e7f9      	b.n	2a40 <_isatty_r+0x14>
    2a4c:	2000013c 	.word	0x2000013c

00002a50 <_malloc_usable_size_r>:
    2a50:	1f0b      	subs	r3, r1, #4
    2a52:	681b      	ldr	r3, [r3, #0]
    2a54:	1f18      	subs	r0, r3, #4
    2a56:	2b00      	cmp	r3, #0
    2a58:	db00      	blt.n	2a5c <_malloc_usable_size_r+0xc>
    2a5a:	4770      	bx	lr
    2a5c:	580b      	ldr	r3, [r1, r0]
    2a5e:	18c0      	adds	r0, r0, r3
    2a60:	e7fb      	b.n	2a5a <_malloc_usable_size_r+0xa>
    2a62:	46c0      	nop			; (mov r8, r8)

00002a64 <_close>:
    2a64:	2258      	movs	r2, #88	; 0x58
    2a66:	2001      	movs	r0, #1
    2a68:	4b01      	ldr	r3, [pc, #4]	; (2a70 <_close+0xc>)
    2a6a:	4240      	negs	r0, r0
    2a6c:	601a      	str	r2, [r3, #0]
    2a6e:	4770      	bx	lr
    2a70:	2000013c 	.word	0x2000013c

00002a74 <_fstat>:
    2a74:	2258      	movs	r2, #88	; 0x58
    2a76:	2001      	movs	r0, #1
    2a78:	4b01      	ldr	r3, [pc, #4]	; (2a80 <_fstat+0xc>)
    2a7a:	4240      	negs	r0, r0
    2a7c:	601a      	str	r2, [r3, #0]
    2a7e:	4770      	bx	lr
    2a80:	2000013c 	.word	0x2000013c

00002a84 <_isatty>:
    2a84:	2258      	movs	r2, #88	; 0x58
    2a86:	4b02      	ldr	r3, [pc, #8]	; (2a90 <_isatty+0xc>)
    2a88:	2000      	movs	r0, #0
    2a8a:	601a      	str	r2, [r3, #0]
    2a8c:	4770      	bx	lr
    2a8e:	46c0      	nop			; (mov r8, r8)
    2a90:	2000013c 	.word	0x2000013c

00002a94 <_lseek>:
    2a94:	2258      	movs	r2, #88	; 0x58
    2a96:	2001      	movs	r0, #1
    2a98:	4b01      	ldr	r3, [pc, #4]	; (2aa0 <_lseek+0xc>)
    2a9a:	4240      	negs	r0, r0
    2a9c:	601a      	str	r2, [r3, #0]
    2a9e:	4770      	bx	lr
    2aa0:	2000013c 	.word	0x2000013c

00002aa4 <_read>:
    2aa4:	2258      	movs	r2, #88	; 0x58
    2aa6:	2001      	movs	r0, #1
    2aa8:	4b01      	ldr	r3, [pc, #4]	; (2ab0 <_read+0xc>)
    2aaa:	4240      	negs	r0, r0
    2aac:	601a      	str	r2, [r3, #0]
    2aae:	4770      	bx	lr
    2ab0:	2000013c 	.word	0x2000013c

00002ab4 <_sbrk>:
    2ab4:	4a04      	ldr	r2, [pc, #16]	; (2ac8 <_sbrk+0x14>)
    2ab6:	6813      	ldr	r3, [r2, #0]
    2ab8:	2b00      	cmp	r3, #0
    2aba:	d100      	bne.n	2abe <_sbrk+0xa>
    2abc:	4b03      	ldr	r3, [pc, #12]	; (2acc <_sbrk+0x18>)
    2abe:	1818      	adds	r0, r3, r0
    2ac0:	6010      	str	r0, [r2, #0]
    2ac2:	0018      	movs	r0, r3
    2ac4:	4770      	bx	lr
    2ac6:	46c0      	nop			; (mov r8, r8)
    2ac8:	20000134 	.word	0x20000134
    2acc:	20000140 	.word	0x20000140

00002ad0 <_write>:
    2ad0:	2258      	movs	r2, #88	; 0x58
    2ad2:	2001      	movs	r0, #1
    2ad4:	4b01      	ldr	r3, [pc, #4]	; (2adc <_write+0xc>)
    2ad6:	4240      	negs	r0, r0
    2ad8:	601a      	str	r2, [r3, #0]
    2ada:	4770      	bx	lr
    2adc:	2000013c 	.word	0x2000013c

00002ae0 <_exit>:
    2ae0:	e7fe      	b.n	2ae0 <_exit>
    2ae2:	46c0      	nop			; (mov r8, r8)

00002ae4 <__divsi3>:
    2ae4:	4603      	mov	r3, r0
    2ae6:	430b      	orrs	r3, r1
    2ae8:	d47f      	bmi.n	2bea <__divsi3+0x106>
    2aea:	2200      	movs	r2, #0
    2aec:	0843      	lsrs	r3, r0, #1
    2aee:	428b      	cmp	r3, r1
    2af0:	d374      	bcc.n	2bdc <__divsi3+0xf8>
    2af2:	0903      	lsrs	r3, r0, #4
    2af4:	428b      	cmp	r3, r1
    2af6:	d35f      	bcc.n	2bb8 <__divsi3+0xd4>
    2af8:	0a03      	lsrs	r3, r0, #8
    2afa:	428b      	cmp	r3, r1
    2afc:	d344      	bcc.n	2b88 <__divsi3+0xa4>
    2afe:	0b03      	lsrs	r3, r0, #12
    2b00:	428b      	cmp	r3, r1
    2b02:	d328      	bcc.n	2b56 <__divsi3+0x72>
    2b04:	0c03      	lsrs	r3, r0, #16
    2b06:	428b      	cmp	r3, r1
    2b08:	d30d      	bcc.n	2b26 <__divsi3+0x42>
    2b0a:	22ff      	movs	r2, #255	; 0xff
    2b0c:	0209      	lsls	r1, r1, #8
    2b0e:	ba12      	rev	r2, r2
    2b10:	0c03      	lsrs	r3, r0, #16
    2b12:	428b      	cmp	r3, r1
    2b14:	d302      	bcc.n	2b1c <__divsi3+0x38>
    2b16:	1212      	asrs	r2, r2, #8
    2b18:	0209      	lsls	r1, r1, #8
    2b1a:	d065      	beq.n	2be8 <__divsi3+0x104>
    2b1c:	0b03      	lsrs	r3, r0, #12
    2b1e:	428b      	cmp	r3, r1
    2b20:	d319      	bcc.n	2b56 <__divsi3+0x72>
    2b22:	e000      	b.n	2b26 <__divsi3+0x42>
    2b24:	0a09      	lsrs	r1, r1, #8
    2b26:	0bc3      	lsrs	r3, r0, #15
    2b28:	428b      	cmp	r3, r1
    2b2a:	d301      	bcc.n	2b30 <__divsi3+0x4c>
    2b2c:	03cb      	lsls	r3, r1, #15
    2b2e:	1ac0      	subs	r0, r0, r3
    2b30:	4152      	adcs	r2, r2
    2b32:	0b83      	lsrs	r3, r0, #14
    2b34:	428b      	cmp	r3, r1
    2b36:	d301      	bcc.n	2b3c <__divsi3+0x58>
    2b38:	038b      	lsls	r3, r1, #14
    2b3a:	1ac0      	subs	r0, r0, r3
    2b3c:	4152      	adcs	r2, r2
    2b3e:	0b43      	lsrs	r3, r0, #13
    2b40:	428b      	cmp	r3, r1
    2b42:	d301      	bcc.n	2b48 <__divsi3+0x64>
    2b44:	034b      	lsls	r3, r1, #13
    2b46:	1ac0      	subs	r0, r0, r3
    2b48:	4152      	adcs	r2, r2
    2b4a:	0b03      	lsrs	r3, r0, #12
    2b4c:	428b      	cmp	r3, r1
    2b4e:	d301      	bcc.n	2b54 <__divsi3+0x70>
    2b50:	030b      	lsls	r3, r1, #12
    2b52:	1ac0      	subs	r0, r0, r3
    2b54:	4152      	adcs	r2, r2
    2b56:	0ac3      	lsrs	r3, r0, #11
    2b58:	428b      	cmp	r3, r1
    2b5a:	d301      	bcc.n	2b60 <__divsi3+0x7c>
    2b5c:	02cb      	lsls	r3, r1, #11
    2b5e:	1ac0      	subs	r0, r0, r3
    2b60:	4152      	adcs	r2, r2
    2b62:	0a83      	lsrs	r3, r0, #10
    2b64:	428b      	cmp	r3, r1
    2b66:	d301      	bcc.n	2b6c <__divsi3+0x88>
    2b68:	028b      	lsls	r3, r1, #10
    2b6a:	1ac0      	subs	r0, r0, r3
    2b6c:	4152      	adcs	r2, r2
    2b6e:	0a43      	lsrs	r3, r0, #9
    2b70:	428b      	cmp	r3, r1
    2b72:	d301      	bcc.n	2b78 <__divsi3+0x94>
    2b74:	024b      	lsls	r3, r1, #9
    2b76:	1ac0      	subs	r0, r0, r3
    2b78:	4152      	adcs	r2, r2
    2b7a:	0a03      	lsrs	r3, r0, #8
    2b7c:	428b      	cmp	r3, r1
    2b7e:	d301      	bcc.n	2b84 <__divsi3+0xa0>
    2b80:	020b      	lsls	r3, r1, #8
    2b82:	1ac0      	subs	r0, r0, r3
    2b84:	4152      	adcs	r2, r2
    2b86:	d2cd      	bcs.n	2b24 <__divsi3+0x40>
    2b88:	09c3      	lsrs	r3, r0, #7
    2b8a:	428b      	cmp	r3, r1
    2b8c:	d301      	bcc.n	2b92 <__divsi3+0xae>
    2b8e:	01cb      	lsls	r3, r1, #7
    2b90:	1ac0      	subs	r0, r0, r3
    2b92:	4152      	adcs	r2, r2
    2b94:	0983      	lsrs	r3, r0, #6
    2b96:	428b      	cmp	r3, r1
    2b98:	d301      	bcc.n	2b9e <__divsi3+0xba>
    2b9a:	018b      	lsls	r3, r1, #6
    2b9c:	1ac0      	subs	r0, r0, r3
    2b9e:	4152      	adcs	r2, r2
    2ba0:	0943      	lsrs	r3, r0, #5
    2ba2:	428b      	cmp	r3, r1
    2ba4:	d301      	bcc.n	2baa <__divsi3+0xc6>
    2ba6:	014b      	lsls	r3, r1, #5
    2ba8:	1ac0      	subs	r0, r0, r3
    2baa:	4152      	adcs	r2, r2
    2bac:	0903      	lsrs	r3, r0, #4
    2bae:	428b      	cmp	r3, r1
    2bb0:	d301      	bcc.n	2bb6 <__divsi3+0xd2>
    2bb2:	010b      	lsls	r3, r1, #4
    2bb4:	1ac0      	subs	r0, r0, r3
    2bb6:	4152      	adcs	r2, r2
    2bb8:	08c3      	lsrs	r3, r0, #3
    2bba:	428b      	cmp	r3, r1
    2bbc:	d301      	bcc.n	2bc2 <__divsi3+0xde>
    2bbe:	00cb      	lsls	r3, r1, #3
    2bc0:	1ac0      	subs	r0, r0, r3
    2bc2:	4152      	adcs	r2, r2
    2bc4:	0883      	lsrs	r3, r0, #2
    2bc6:	428b      	cmp	r3, r1
    2bc8:	d301      	bcc.n	2bce <__divsi3+0xea>
    2bca:	008b      	lsls	r3, r1, #2
    2bcc:	1ac0      	subs	r0, r0, r3
    2bce:	4152      	adcs	r2, r2
    2bd0:	0843      	lsrs	r3, r0, #1
    2bd2:	428b      	cmp	r3, r1
    2bd4:	d301      	bcc.n	2bda <__divsi3+0xf6>
    2bd6:	004b      	lsls	r3, r1, #1
    2bd8:	1ac0      	subs	r0, r0, r3
    2bda:	4152      	adcs	r2, r2
    2bdc:	1a41      	subs	r1, r0, r1
    2bde:	d200      	bcs.n	2be2 <__divsi3+0xfe>
    2be0:	4601      	mov	r1, r0
    2be2:	4152      	adcs	r2, r2
    2be4:	4610      	mov	r0, r2
    2be6:	4770      	bx	lr
    2be8:	e05d      	b.n	2ca6 <__divsi3+0x1c2>
    2bea:	0fca      	lsrs	r2, r1, #31
    2bec:	d000      	beq.n	2bf0 <__divsi3+0x10c>
    2bee:	4249      	negs	r1, r1
    2bf0:	1003      	asrs	r3, r0, #32
    2bf2:	d300      	bcc.n	2bf6 <__divsi3+0x112>
    2bf4:	4240      	negs	r0, r0
    2bf6:	4053      	eors	r3, r2
    2bf8:	2200      	movs	r2, #0
    2bfa:	469c      	mov	ip, r3
    2bfc:	0903      	lsrs	r3, r0, #4
    2bfe:	428b      	cmp	r3, r1
    2c00:	d32d      	bcc.n	2c5e <__divsi3+0x17a>
    2c02:	0a03      	lsrs	r3, r0, #8
    2c04:	428b      	cmp	r3, r1
    2c06:	d312      	bcc.n	2c2e <__divsi3+0x14a>
    2c08:	22fc      	movs	r2, #252	; 0xfc
    2c0a:	0189      	lsls	r1, r1, #6
    2c0c:	ba12      	rev	r2, r2
    2c0e:	0a03      	lsrs	r3, r0, #8
    2c10:	428b      	cmp	r3, r1
    2c12:	d30c      	bcc.n	2c2e <__divsi3+0x14a>
    2c14:	0189      	lsls	r1, r1, #6
    2c16:	1192      	asrs	r2, r2, #6
    2c18:	428b      	cmp	r3, r1
    2c1a:	d308      	bcc.n	2c2e <__divsi3+0x14a>
    2c1c:	0189      	lsls	r1, r1, #6
    2c1e:	1192      	asrs	r2, r2, #6
    2c20:	428b      	cmp	r3, r1
    2c22:	d304      	bcc.n	2c2e <__divsi3+0x14a>
    2c24:	0189      	lsls	r1, r1, #6
    2c26:	d03a      	beq.n	2c9e <__divsi3+0x1ba>
    2c28:	1192      	asrs	r2, r2, #6
    2c2a:	e000      	b.n	2c2e <__divsi3+0x14a>
    2c2c:	0989      	lsrs	r1, r1, #6
    2c2e:	09c3      	lsrs	r3, r0, #7
    2c30:	428b      	cmp	r3, r1
    2c32:	d301      	bcc.n	2c38 <__divsi3+0x154>
    2c34:	01cb      	lsls	r3, r1, #7
    2c36:	1ac0      	subs	r0, r0, r3
    2c38:	4152      	adcs	r2, r2
    2c3a:	0983      	lsrs	r3, r0, #6
    2c3c:	428b      	cmp	r3, r1
    2c3e:	d301      	bcc.n	2c44 <__divsi3+0x160>
    2c40:	018b      	lsls	r3, r1, #6
    2c42:	1ac0      	subs	r0, r0, r3
    2c44:	4152      	adcs	r2, r2
    2c46:	0943      	lsrs	r3, r0, #5
    2c48:	428b      	cmp	r3, r1
    2c4a:	d301      	bcc.n	2c50 <__divsi3+0x16c>
    2c4c:	014b      	lsls	r3, r1, #5
    2c4e:	1ac0      	subs	r0, r0, r3
    2c50:	4152      	adcs	r2, r2
    2c52:	0903      	lsrs	r3, r0, #4
    2c54:	428b      	cmp	r3, r1
    2c56:	d301      	bcc.n	2c5c <__divsi3+0x178>
    2c58:	010b      	lsls	r3, r1, #4
    2c5a:	1ac0      	subs	r0, r0, r3
    2c5c:	4152      	adcs	r2, r2
    2c5e:	08c3      	lsrs	r3, r0, #3
    2c60:	428b      	cmp	r3, r1
    2c62:	d301      	bcc.n	2c68 <__divsi3+0x184>
    2c64:	00cb      	lsls	r3, r1, #3
    2c66:	1ac0      	subs	r0, r0, r3
    2c68:	4152      	adcs	r2, r2
    2c6a:	0883      	lsrs	r3, r0, #2
    2c6c:	428b      	cmp	r3, r1
    2c6e:	d301      	bcc.n	2c74 <__divsi3+0x190>
    2c70:	008b      	lsls	r3, r1, #2
    2c72:	1ac0      	subs	r0, r0, r3
    2c74:	4152      	adcs	r2, r2
    2c76:	d2d9      	bcs.n	2c2c <__divsi3+0x148>
    2c78:	0843      	lsrs	r3, r0, #1
    2c7a:	428b      	cmp	r3, r1
    2c7c:	d301      	bcc.n	2c82 <__divsi3+0x19e>
    2c7e:	004b      	lsls	r3, r1, #1
    2c80:	1ac0      	subs	r0, r0, r3
    2c82:	4152      	adcs	r2, r2
    2c84:	1a41      	subs	r1, r0, r1
    2c86:	d200      	bcs.n	2c8a <__divsi3+0x1a6>
    2c88:	4601      	mov	r1, r0
    2c8a:	4663      	mov	r3, ip
    2c8c:	4152      	adcs	r2, r2
    2c8e:	105b      	asrs	r3, r3, #1
    2c90:	4610      	mov	r0, r2
    2c92:	d301      	bcc.n	2c98 <__divsi3+0x1b4>
    2c94:	4240      	negs	r0, r0
    2c96:	2b00      	cmp	r3, #0
    2c98:	d500      	bpl.n	2c9c <__divsi3+0x1b8>
    2c9a:	4249      	negs	r1, r1
    2c9c:	4770      	bx	lr
    2c9e:	4663      	mov	r3, ip
    2ca0:	105b      	asrs	r3, r3, #1
    2ca2:	d300      	bcc.n	2ca6 <__divsi3+0x1c2>
    2ca4:	4240      	negs	r0, r0
    2ca6:	b501      	push	{r0, lr}
    2ca8:	2000      	movs	r0, #0
    2caa:	f7fe f99d 	bl	fe8 <__aeabi_idiv0>
    2cae:	bd02      	pop	{r1, pc}

00002cb0 <__aeabi_idivmod>:
    2cb0:	2900      	cmp	r1, #0
    2cb2:	d0f8      	beq.n	2ca6 <__divsi3+0x1c2>
    2cb4:	e716      	b.n	2ae4 <__divsi3>
    2cb6:	4770      	bx	lr

00002cb8 <_init>:
    2cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cba:	46c0      	nop			; (mov r8, r8)
    2cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2cbe:	bc08      	pop	{r3}
    2cc0:	469e      	mov	lr, r3
    2cc2:	4770      	bx	lr

00002cc4 <_fini>:
    2cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2cca:	bc08      	pop	{r3}
    2ccc:	469e      	mov	lr, r3
    2cce:	4770      	bx	lr
    2cd0:	74736574 	.word	0x74736574
    2cd4:	00000000 	.word	0x00000000
    2cd8:	00000972 	.word	0x00000972
    2cdc:	00000916 	.word	0x00000916
    2ce0:	0000091c 	.word	0x0000091c
    2ce4:	00000910 	.word	0x00000910
    2ce8:	00000972 	.word	0x00000972
    2cec:	00000972 	.word	0x00000972
    2cf0:	00000922 	.word	0x00000922
    2cf4:	0000092c 	.word	0x0000092c
    2cf8:	00000936 	.word	0x00000936
    2cfc:	00000972 	.word	0x00000972
    2d00:	00000942 	.word	0x00000942
    2d04:	00000c86 	.word	0x00000c86
    2d08:	00000afc 	.word	0x00000afc
    2d0c:	00000b64 	.word	0x00000b64
    2d10:	00000bb0 	.word	0x00000bb0
    2d14:	00000bfc 	.word	0x00000bfc
    2d18:	00000c86 	.word	0x00000c86
    2d1c:	00000c2e 	.word	0x00000c2e
    2d20:	00000c38 	.word	0x00000c38

00002d24 <_global_impure_ptr>:
    2d24:	20000014                                ... 

00002d28 <__sf_fake_stderr>:
	...

00002d48 <__sf_fake_stdout>:
	...

00002d68 <__sf_fake_stdin>:
	...
    2d88:	2b302d23 00000020 004c6c68 45676665     #-0+ ...hlL.efgE
    2d98:	00004746 33323130 37363534 42413938     FG..0123456789AB
    2da8:	46454443 00000000 33323130 37363534     CDEF....01234567
    2db8:	62613938 66656463 00000000              89abcdef....

00002dc4 <__EH_FRAME_BEGIN__>:
    2dc4:	00000000                                ....
